declare const CoromonServer: {
  new: (_0?: any, _1?: any) => any;
};
declare const electrifiedStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const OnlineProfileData: {
  setAccessToken: (_0?: any, _1?: any, _2?: any) => any;
  set: (_0?: any, _1?: any) => any;
  ensureValidAccessToken: (_0?: any, _1?: any, _2?: any) => any;
  getAccessToken: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const blockStatusStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const minutes: {
  DAY: number;
  WEEK: number;
  HOUR: number;
};
declare const UIGridViewBuilder: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const innerTopBarStyleCrystals: {
  getOrCreateInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  createInstance: (_0?: any) => any;
};
declare const outerTopBarMilestoneButtonBuilder: {
  new: (_0?: any) => any;
};
declare const worldSnow: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const inElasticCustom: (_0?: any, _1?: any) => any;
declare const OnlineBattleData: {
  destroy: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  rollRandomRankedBattleRewardItemUID: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
};
declare const cursedGroundsEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const monsterFamilyDataList: any;
declare const combinedNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const outQuart: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const worldDungeon: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const inOutExpo: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const pauseMenuScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const outElasticCustom: (_0?: any, _1?: any) => any;
declare const cronHelper: {
  every: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  cancel: (_0?: any, _1?: any) => any;
};
declare const UIContainerBuilder: {
  newGoldSlimScrollableWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newGreyDarkSlimWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newDirectional: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newGreyDarkSlim: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGreySlimScrollableWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newGreyFancyWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  newVertical: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  newFilled: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  newGreySlim: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGreyDarkSlimScrollableWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newGoldSlimWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newDarkLineRect: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newHoldIndicator: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGreySlimScrollable: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newGreySlimWithHeaderSpacing: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newHorizontal: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newEnvironmental: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGreyFancy: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGreyDarkSlimScrollable: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newGoldSlim: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newGoldSlimScrollable: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
};
declare const urlHelper: {
  encode: (_0?: any, _1?: any) => any;
  tableToParamString: (_0?: any, _1?: any) => any;
  decode: (_0?: any, _1?: any) => any;
};
declare const debugMapSelectScreen: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreen: (_0?: any, _1?: any) => any;
};
declare const OnlineDailyMilestoneServer: {
  get: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  achieve: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const knockdownStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const feelersStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const outBackCustom: (_0?: any) => any;
declare const OnlineWinBattleTaunt: {
  sleep: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  blush: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  values: any;
  haha: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  devil: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  angel: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  chuckle: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  smile: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
  ed: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
    doEdDance: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  newValueObject: (_0?: any, _1?: any) => any;
  cool: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    executeTaunt: (_0?: any, _1?: any, _2?: any) => any;
    createTauntPreview: (_0?: any, _1?: any) => any;
  };
};
declare const localiseKey: (_0?: any, _1?: any, _2?: any) => any;
declare const freezeConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const regularTrainerAI: {
  new: (_0?: any) => any;
};
declare const sortOrders: {
  normal: number;
  veryEarly: number;
  veryLate: number;
  late: number;
  early: number;
};
declare const wrapFunctions: (...args: any[]) => any;
declare const device: {
  isMacOS: boolean;
  isRunningOnMacOS: boolean;
  isSimulator: boolean;
  isAndroid: boolean;
  isLinux: boolean;
  supportsInAppPurchases: boolean;
  targetAppStore: string;
  maxContentWidth: number;
  minContentHeight: number;
  language: string;
  safeWidth: number;
  isRunningOnDesktop: boolean;
  isAppleArcade: boolean;
  isSwitch: boolean;
  deviceWidth: number;
  diagonal: number;
  model: string;
  isTvOS: boolean;
  localeIdentifier: string;
  platformVersion: string;
  isMobile: boolean;
  supportsOpenSSL: boolean;
  deviceHeight: number;
  isIOS: boolean;
  minContentWidth: number;
  country: string;
  platform: string;
  isDesktop: boolean;
  isRunningOnWindows: boolean;
  isApple: boolean;
  isWindows: boolean;
  maxContentHeight: number;
  manufacturer: string;
  languageCode: string;
  width: number;
  height: number;
};
declare const OnlineBattleRules: {
  forOnlineMatchmakingMode: (_0?: any, _1?: any) => any;
  fromQueuePreferences: (_0?: any, _1?: any) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const gifHelper: {
  newBuilder: (_0?: any, _1?: any, _2?: any) => any;
  getPlatforms: (_0?: any) => any;
  newSocialBuilder: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createContainerAndBackground: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
};
declare const spriteAnimation: {
  sequences: (...args: any[]) => any;
  directions: {
    amount_frames: number;
    sequences: any;
  };
};
declare const worldTransitions: {
  slowFade_out: (_0?: any) => any;
  slideVertical_out: (_0?: any) => any;
  hideBlackRectangle: (_0?: any) => any;
  slowFade_in: (_0?: any) => any;
  showBlackRectangle: (_0?: any) => any;
  whiteSlowFade_out: (_0?: any) => any;
  fade_in: (_0?: any) => any;
  instant_out: (_0?: any) => any;
  circle_in: (_0?: any) => any;
  slideDirectionalLeft_in: (_0?: any) => any;
  mediumFade_in: (_0?: any) => any;
  slideDirectionalDown_out: (_0?: any) => any;
  whiteFade_in: (_0?: any) => any;
  mediumSlowFade_in: (_0?: any) => any;
  slideDirectionalDown_in: (_0?: any) => any;
  instant_in: (_0?: any) => any;
  mediumFade_out: (_0?: any) => any;
  slideHorizontal_in: (_0?: any) => any;
  slideHorizontal_out: (_0?: any) => any;
  mediumSlowFade_out: (_0?: any) => any;
  inTransitionAndHideBlackRectangle: (_0?: any, _1?: any, _2?: any) => any;
  slideDirectionalRight_out: (_0?: any) => any;
  slideDirectionalUp_out: (_0?: any) => any;
  slideDirectionalLeft_out: (_0?: any) => any;
  outTransition: (_0?: any, _1?: any, _2?: any) => any;
  whiteFade_out: (_0?: any) => any;
  slideVertical_in: (_0?: any) => any;
  hideWhiteRectangle: (_0?: any) => any;
  slideDirectionalUp_in: (_0?: any) => any;
  showWhiteRectangle: (_0?: any) => any;
  whiteSlowFade_in: (_0?: any) => any;
  fade_out: (_0?: any) => any;
  circle_out: (_0?: any) => any;
  inTransition: (_0?: any, _1?: any, _2?: any) => any;
  slideDirectionalRight_in: (_0?: any) => any;
};
declare const RandomizeEncounterZonesMode: {
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  values: any;
  everyEncounterBalanced: {
    getValue: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    isEveryEncounterZone: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isBalanced: (_0?: any) => any;
    isEveryEncounter: (_0?: any) => any;
  };
  everyEncounter: {
    getValue: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    isEveryEncounterZone: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isBalanced: (_0?: any) => any;
    isEveryEncounter: (_0?: any) => any;
  };
  everyEncounterZoneBalanced: {
    getValue: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    isEveryEncounterZone: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isBalanced: (_0?: any) => any;
    isEveryEncounter: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  everyEncounterZone: {
    getValue: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    isEveryEncounterZone: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isBalanced: (_0?: any) => any;
    isEveryEncounter: (_0?: any) => any;
  };
};
declare const outQuint: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const GOGHelper: {
  isLoggedOn: (_0?: any) => any;
  getEncryptedAppTicket: (_0?: any, _1?: any, _2?: any) => any;
  unlockAchievement: (_0?: any, _1?: any) => any;
};
declare const pauseMenu: {
  isCreatedAsOnline: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  createInstanceAndPauseWorld: (_0?: any, _1?: any, _2?: any) => any;
  closeIfCreated: (_0?: any, _1?: any) => any;
  forceDestroyIfCreated: (_0?: any) => any;
  createInstance: (_0?: any, _1?: any, _2?: any) => any;
};
declare const milliseconds: {
  MINUTE: number;
  HOUR: number;
  DAY: number;
  SECOND: number;
  WEEK: number;
};
declare const swampUtility: any;
declare const berserkStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const staticHazeWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const TypeEffectivenessMode: {
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  vulnerableTo: {
    getDetailedExplanationText: (_0?: any, _1?: any, _2?: any) => any;
    isResistantTo: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any) => any;
    isVulnerableTo: (_0?: any) => any;
    isNotEffectiveAgainst: (_0?: any) => any;
    getSimpleExplanationText: (_0?: any, _1?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  values: any;
  resistantTo: {
    getDetailedExplanationText: (_0?: any, _1?: any, _2?: any) => any;
    isResistantTo: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any) => any;
    isVulnerableTo: (_0?: any) => any;
    isNotEffectiveAgainst: (_0?: any) => any;
    getSimpleExplanationText: (_0?: any, _1?: any) => any;
  };
  notEffectiveAgainst: {
    getDetailedExplanationText: (_0?: any, _1?: any, _2?: any) => any;
    isResistantTo: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any) => any;
    isVulnerableTo: (_0?: any) => any;
    isNotEffectiveAgainst: (_0?: any) => any;
    getSimpleExplanationText: (_0?: any, _1?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  veryEffectiveAgainst: {
    getDetailedExplanationText: (_0?: any, _1?: any, _2?: any) => any;
    isResistantTo: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any) => any;
    isVulnerableTo: (_0?: any) => any;
    isNotEffectiveAgainst: (_0?: any) => any;
    getSimpleExplanationText: (_0?: any, _1?: any) => any;
  };
};
declare const outInSine: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const amishTownUtility: {
  executeTrainerHubCutscene: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createBeezelCutscene: (_0?: any) => any;
  optionalBookHatLocalisation: (_0?: any, _1?: any, _2?: any) => any;
};
declare const titleScreen: {
  addGameSettingsMigrationTitleScreenMessage: (_0?: any, _1?: any) => any;
  addGameSettingsMigrationTitleScreenOnCompleteFunction: (
    _0?: any,
    _1?: any,
  ) => any;
  new: (_0?: any, _1?: any) => any;
};
declare const graphics: {
  releaseTextures: (_0?: any) => any;
  revision: number;
  defineEffect: (_0?: any) => any;
  newTexture: (_0?: any) => any;
  class: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  newImageSheet: (_0?: any) => any;
  name: string;
  newMask: (_0?: any) => any;
  version: number;
  publisherId: string;
  listEffects: (_0?: any) => any;
  __metatableOrig: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  __index: {
    releaseTextures: (_0?: any) => any;
    revision: number;
    defineEffect: (_0?: any) => any;
    newTexture: (_0?: any) => any;
    class: any;
    newImageSheet: (_0?: any) => any;
    name: string;
    newMask: (_0?: any) => any;
    version: number;
    publisherId: string;
    listEffects: (_0?: any) => any;
    __metatableOrig: any;
    __index: any;
    undefineEffect: (_0?: any) => any;
  };
  undefineEffect: (_0?: any) => any;
};
declare const dumbTrainerAI: {
  new: (_0?: any) => any;
};
declare const zoneParticipant: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const traitList: {
  LOW_DENSITY: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  REGURGITATOR: {
    new: (_0?: any, _1?: any) => any;
  };
  BRIGHT_LIGHT: {
    new: (_0?: any, _1?: any) => any;
  };
  KINDRED_SOUL: {
    new: (_0?: any, _1?: any) => any;
  };
  HUMIDIFIER: {
    new: (_0?: any, _1?: any) => any;
  };
  TITAN_ELECTRIC: {
    new: (_0?: any, _1?: any) => any;
  };
  TOXIC_SKIN: {
    new: (_0?: any, _1?: any) => any;
  };
  FLARE_INTAKE: {
    new: (_0?: any, _1?: any) => any;
  };
  INNER_FIRE: {
    new: (_0?: any, _1?: any) => any;
  };
  DARK_ATMOSPHERE: {
    new: (_0?: any, _1?: any) => any;
  };
  RADIATOR: {
    new: (_0?: any, _1?: any) => any;
  };
  NOT_ALLOWED: {
    new: (_0?: any, _1?: any) => any;
  };
  SHOCK_ABSORBER: {
    new: (_0?: any, _1?: any) => any;
  };
  TITAN_FIRE: {
    new: (_0?: any, _1?: any) => any;
  };
  CONTAINED_POWER: {
    new: (_0?: any, _1?: any) => any;
  };
  REIGNITE: {
    new: (_0?: any, _1?: any) => any;
  };
  ANTARCTIC: {
    new: (_0?: any, _1?: any) => any;
  };
  ANTIDOTE: {
    new: (_0?: any, _1?: any) => any;
  };
  PREPARED: {
    new: (_0?: any, _1?: any) => any;
  };
  WET_COAT: {
    new: (_0?: any, _1?: any) => any;
  };
  FAST_LEARNER: {
    new: (_0?: any, _1?: any) => any;
  };
  GULLIBLE: {
    new: (_0?: any, _1?: any) => any;
  };
  CONDUCTOR: {
    new: (_0?: any, _1?: any) => any;
  };
  NANO_SKIN: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  TITAN_GHOST: {
    new: (_0?: any, _1?: any) => any;
  };
  HOT_HEADED: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  LUCKY: {
    new: (_0?: any, _1?: any) => any;
  };
  SPECIALIST: {
    new: (_0?: any, _1?: any) => any;
  };
  WEATHERPROOF: {
    new: (_0?: any, _1?: any) => any;
  };
  GOOD_AIM: {
    new: (_0?: any, _1?: any) => any;
  };
  CAFFEINATED: {
    new: (_0?: any, _1?: any) => any;
  };
  SUPERSENSORY: {
    new: (_0?: any, _1?: any) => any;
  };
  INTELLIGENT: {
    new: (_0?: any, _1?: any) => any;
  };
  RESTLESS: {
    new: (_0?: any, _1?: any) => any;
  };
  HOARDER: {
    new: (_0?: any, _1?: any) => any;
  };
  BRAVE: {
    new: (_0?: any, _1?: any) => any;
  };
  HARDHEADED: {
    new: (_0?: any, _1?: any) => any;
  };
  INVERSE: {
    new: (_0?: any, _1?: any) => any;
  };
  IMPATIENT: {
    new: (_0?: any, _1?: any) => any;
  };
  THERMOGENESIS: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  ZEALOUS: {
    new: (_0?: any, _1?: any) => any;
  };
  FULLY_RESTED: {
    new: (_0?: any, _1?: any) => any;
  };
  AMPLIFIED: {
    new: (_0?: any, _1?: any) => any;
  };
  STATIC_BODY: {
    new: (_0?: any, _1?: any) => any;
  };
  COOL_BODY: {
    new: (_0?: any, _1?: any) => any;
  };
  ESCAPIST: {
    new: (_0?: any, _1?: any) => any;
  };
  ANTIFUNGAL: {
    new: (_0?: any, _1?: any) => any;
  };
  MOLTER: {
    new: (_0?: any, _1?: any) => any;
  };
  MOTIVATED: {
    new: (_0?: any, _1?: any) => any;
  };
  CRIPPLER: {
    new: (_0?: any, _1?: any) => any;
  };
  STINKY: {
    new: (_0?: any, _1?: any) => any;
  };
  MAGIC_LAYER: {
    new: (_0?: any, _1?: any) => any;
  };
  GOURMAND: {
    new: (_0?: any, _1?: any) => any;
  };
  FUSEBOX: {
    new: (_0?: any, _1?: any) => any;
  };
  DIMENSIONAL_EYE: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  NURSE: {
    new: (_0?: any, _1?: any) => any;
  };
  VEGETARIAN: {
    new: (_0?: any, _1?: any) => any;
  };
  SHARP_CLAWS: {
    new: (_0?: any, _1?: any) => any;
  };
  SPIKED_BODY: {
    new: (_0?: any, _1?: any) => any;
  };
  COWARD: {
    new: (_0?: any, _1?: any) => any;
  };
  NIMBLE: {
    new: (_0?: any, _1?: any) => any;
  };
  OVERCLOCKER: {
    new: (_0?: any, _1?: any) => any;
  };
  ACCURATE: {
    new: (_0?: any, _1?: any) => any;
  };
  DRY_WIND: {
    new: (_0?: any, _1?: any) => any;
  };
  SNOWMAN: {
    new: (_0?: any, _1?: any) => any;
  };
  VACCINATED: {
    new: (_0?: any, _1?: any) => any;
  };
  TITAN_WATER: {
    new: (_0?: any, _1?: any) => any;
  };
  SOUL_EATER: {
    new: (_0?: any, _1?: any) => any;
  };
  PEP_TALK: {
    new: (_0?: any, _1?: any) => any;
  };
  SCRAPPER: {
    new: (_0?: any, _1?: any) => any;
  };
  CONSERVER: {
    new: (_0?: any, _1?: any) => any;
  };
  SLIPPERY: {
    new: (_0?: any, _1?: any) => any;
  };
  ACUPUNCTURE: {
    new: (_0?: any, _1?: any) => any;
  };
  RECONSTITUTION: {
    new: (_0?: any, _1?: any) => any;
  };
  TITAN_ICE: {
    new: (_0?: any, _1?: any) => any;
  };
  THICK_SKIN: {
    new: (_0?: any, _1?: any) => any;
  };
  STEADY: {
    new: (_0?: any, _1?: any) => any;
  };
  DISRUPTING_AURA: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  CLEAR_SKIES: {
    new: (_0?: any, _1?: any) => any;
  };
  STEAM_LAYER: {
    new: (_0?: any, _1?: any) => any;
  };
  CLEANSE: {
    new: (_0?: any, _1?: any) => any;
  };
  TACTICAL_RETREAT: {
    new: (_0?: any, _1?: any) => any;
  };
  POLLUTER: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  COSMIC: {
    new: (_0?: any, _1?: any, _2?: any) => any;
  };
  RESISTANT: {
    new: (_0?: any, _1?: any) => any;
  };
  ROBBER: {
    new: (_0?: any, _1?: any) => any;
  };
  FEARLESS: {
    new: (_0?: any, _1?: any) => any;
  };
  DIRT_COAT: {
    new: (_0?: any, _1?: any) => any;
  };
  TITAN_SAND: {
    doFallingRocksAnimation: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    new: (_0?: any, _1?: any) => any;
  };
  SHORT_FUSED: {
    new: (_0?: any, _1?: any) => any;
  };
  WATER_COOLED: {
    new: (_0?: any, _1?: any) => any;
  };
  MENACING: {
    new: (_0?: any, _1?: any) => any;
  };
  SOOTHING_AURA: {
    new: (_0?: any, _1?: any) => any;
  };
  GRAVITY_PULL: {
    new: (_0?: any, _1?: any) => any;
  };
  BACKUP_PLAN: {
    new: (_0?: any, _1?: any) => any;
  };
  CLEAN_RETREAT: {
    new: (_0?: any, _1?: any) => any;
  };
  EMPATHETIC: {
    new: (_0?: any, _1?: any) => any;
  };
  STICKY_LAYER: {
    new: (_0?: any, _1?: any) => any;
  };
  POLISHED_BODY: {
    new: (_0?: any, _1?: any) => any;
  };
  COMEBACK: {
    new: (_0?: any, _1?: any) => any;
  };
  GLACIAL_AFFINITY: {
    new: (_0?: any, _1?: any) => any;
  };
  VIGILANT: {
    new: (_0?: any, _1?: any) => any;
  };
  STOIC: {
    new: (_0?: any, _1?: any) => any;
  };
  PATDOWN: {
    new: (_0?: any, _1?: any) => any;
  };
  STRATEGIST: {
    new: (_0?: any, _1?: any) => any;
  };
  MAGNETIC: {
    new: (_0?: any, _1?: any) => any;
  };
  SHINY: {
    new: (_0?: any, _1?: any) => any;
  };
  AFTERBURNER: {
    new: (_0?: any, _1?: any) => any;
  };
  REBIRTH: {
    new: (_0?: any, _1?: any) => any;
  };
};
declare const localiseArray: (_0?: any, _1?: any) => any;
declare const worldOverlay: {
  HEATED: any;
  isCreated: (_0?: any) => any;
  SLIGHTLY_DARK: any;
  createInstanceAndShow: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  MESCHER_REALM: any;
  LIGHTS_OFF: any;
  createInstance: (_0?: any, _1?: any, _2?: any) => any;
  get: (_0?: any) => any;
};
declare const trainerHubUtility: {
  extendSpecialEvents: (_0?: any, _1?: any) => any;
  ED_CONSECUTIVE_WINS: number;
  getTrainerHubAnswers: (_0?: any) => any;
};
declare const staticFurStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const gcinfo: (_0?: any) => any;
declare const spriteEvent: {
  removeSelfOnLoop: (_0?: any, _1?: any) => any;
  newSequenceOnLoop: (_0?: any, _1?: any, _2?: any) => any;
  resetOnEnded: (_0?: any) => any;
  synchroniseFramesAndSequencesSafe: (_0?: any, _1?: any) => any;
  synchroniseFramesInSequence: (_0?: any, _1?: any) => any;
  onFrame: (_0?: any, _1?: any, _2?: any) => any;
  onFrameChange: (_0?: any) => any;
  onLoop: (_0?: any, _1?: any) => any;
  synchroniseFrames: (_0?: any, _1?: any) => any;
  synchroniseFramesAndSequences: (_0?: any, _1?: any) => any;
  removeSelfOnEnded: (_0?: any, _1?: any) => any;
  newSequenceOnLoopX: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setInvisibleOnEnded: (_0?: any, _1?: any) => any;
  synchroniseFramesSafe: (_0?: any, _1?: any) => any;
  onFrameInSequence: (_0?: any, _1?: any, _2?: any) => any;
  newStaticSequenceOnEnded: (_0?: any, _1?: any, _2?: any) => any;
  synchroniseFramesToMask: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  onFrameInSheet: (_0?: any, _1?: any, _2?: any) => any;
  onEnded: (_0?: any, _1?: any) => any;
  onLoopX: (_0?: any, _1?: any, _2?: any) => any;
  newSequenceOnEnded: (_0?: any, _1?: any, _2?: any) => any;
};
declare const MTE: {
  loadObjectTypes: (_0?: any) => any;
  magnet: any;
  createCullableObject: () => any;
  getObjectsByFunction: (_0?: any) => any;
  getTileOutsideBoundary: (_0?: any) => any;
  unattachChildSprite: (_0?: any, _1?: any) => any;
  update: () => any;
  getLayerPropertiesByIndex: (_0?: any) => any;
  removeObject: (_0?: any) => any;
  transition: {
    to: (...args: any[]) => any;
    toDelta: (...args: any[]) => any;
  };
  setCameraToBoundary: (_0?: any) => any;
  setInitialValues: () => any;
  addSpriteAbove: (_0?: any, _1?: any, _2?: any) => any;
  setCameraFocus: (_0?: any) => any;
  setCameraTo: (_0?: any, _1?: any) => any;
  getObjects: () => any;
  getLayers: () => any;
  addSpriteAtLayer: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  changeSpriteLayer: (_0?: any, _1?: any) => any;
  getBasePath: () => any;
  setBasePath: (_0?: any) => any;
  disableLayer: (_0?: any) => any;
  attachChildSprite: (_0?: any, _1?: any) => any;
  getCameraPositionObjectForSprite: (_0?: any) => any;
  registerSprite: (_0?: any) => any;
  getObject: (_0?: any) => any;
  resumeSprites: () => any;
  findObjectsInGrid: (_0?: any) => any;
  getTileAtBoundary: (_0?: any) => any;
  addSpriteBelow: (_0?: any, _1?: any, _2?: any) => any;
  setCameraBoundariesForSprite: (_0?: any) => any;
  setCameraBoundaryAdjustments: (_0?: any) => any;
  getMagnetTile: (_0?: any, _1?: any) => any;
  getLayerNameByIndex: (_0?: any) => any;
  loadMap: (_0?: any, _1?: any, _2?: any) => any;
  getLevelByLayerIndex: (_0?: any) => any;
  addObject: (_0?: any, _1?: any) => any;
  getTiledWorld: () => any;
  getCamera: () => any;
  transitionCamera: {
    to: (...args: any[]) => any;
    toDelta: (...args: any[]) => any;
  };
  getLayerIndexByFunction: (_0?: any) => any;
  reloadTilesets: () => any;
  moveSprite: (_0?: any, _1?: any) => any;
  setSpriteLocation: (_0?: any, _1?: any) => any;
  getFullPath: () => any;
  addSprite: (_0?: any, _1?: any, _2?: any) => any;
  enableLayersByFunction: (_0?: any) => any;
  getUnflattenedLayers: () => any;
  destroy: () => any;
  getCameraFocus: () => any;
  getObjectsAtTile: (_0?: any, _1?: any) => any;
  getMap: () => any;
  disableLayersByFunction: (_0?: any) => any;
  addCullable: (_0?: any) => any;
  getCameraPositionForSprite: (_0?: any) => any;
  removeCullable: (_0?: any) => any;
  pauseSprites: () => any;
  getConstrainedDistanceOfCamera: () => any;
  getLayerIndexByName: (_0?: any) => any;
  editObject: (_0?: any, _1?: any) => any;
  sortSprite: (_0?: any) => any;
  finalizeSprite: (_0?: any) => any;
  enableLayer: (_0?: any) => any;
  translateCamera: (_0?: any, _1?: any) => any;
};
declare const worldDesertRouteHeatMeter: {
  isCreated: (_0?: any) => any;
  createInstance: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const playerPerks: {
  destroy: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  hasObtainedAllPerks: (_0?: any) => any;
  hasObtainedPerk: (_0?: any, _1?: any) => any;
  hasReducedShopPricePerk: (_0?: any) => any;
  perkExists: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  setObtainedPerk: (_0?: any, _1?: any) => any;
  hasCatchProbabilityPerk: (_0?: any) => any;
};
declare const system: {
  cancelNotification: (_0?: any) => any;
  setAccelerometerInterval: (_0?: any) => any;
  setGyroscopeInterval: (_0?: any) => any;
  getInfo: (...args: any[]) => any;
  __proxynewindex: (_0?: any) => any;
  DocumentsDirectory: any;
  canOpenURL: (_0?: any) => any;
  endListener: (_0?: any) => any;
  setPreferences: (_0?: any) => any;
  __proxyindex: (_0?: any) => any;
  newEventDispatcher: () => any;
  deletePreference: (_0?: any) => any;
  pathForTable: (_0?: any) => any;
  getPreference: (_0?: any) => any;
  SystemCachesDirectory: any;
  deactivate: (_0?: any) => any;
  CachesDirectory: any;
  request: (_0?: any) => any;
  openURL: (_0?: any) => any;
  b64: (_0?: any) => any;
  pathForFile: (_0?: any) => any;
  __proxyregister: (_0?: any) => any;
  beginListener: (_0?: any) => any;
  TemporaryDirectory: any;
  activate: (_0?: any) => any;
  unb64: (_0?: any) => any;
  deletePreferences: (_0?: any) => any;
  getTimer: (_0?: any) => any;
  vibrate: (_0?: any) => any;
  ResourceDirectory: any;
  getInputDevices: (_0?: any) => any;
  scheduleNotification: (_0?: any) => any;
  hasEventSource: (_0?: any) => any;
  ApplicationSupportDirectory: any;
  PluginsDirectory: any;
  VirtualTexturesDirectory: any;
  xor_crypt: (_0?: any) => any;
};
declare const recallBlockerWorldEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const restMove: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const shareHelper: {
  canShare: (_0?: any) => any;
  shareString: (_0?: any, _1?: any, _2?: any) => any;
};
declare const toboolean: (_0?: any) => any;
declare const dialog: {
  destroy: (_0?: any, _1?: any) => any;
  onTextStarted: (_0?: any, _1?: any) => any;
  addQuestionAndOptionallyShowTrainerHubRecoveriesLeft: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  onBeforeContinue: (_0?: any, _1?: any) => any;
  addQuestionAndShowGold: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isCreated: (_0?: any) => any;
  onAfterHide: (_0?: any, _1?: any) => any;
  addText: (_0?: any, _1?: any) => any;
  addQuestion: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onTextShown: (_0?: any, _1?: any) => any;
  new: (_0?: any, _1?: any) => any;
};
declare const module: (_0?: any) => any;
declare const innerTopBarMonstersSeenCounter: {
  new: (_0?: any) => any;
};
declare const outCubic: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const IAPStore: {
  isAvailableForDevice: (_0?: any) => any;
  purchase: (_0?: any, _1?: any, _2?: any) => any;
  init: (_0?: any) => any;
  setOnRefund: (_0?: any, _1?: any) => any;
  loadProducts: (_0?: any, _1?: any, _2?: any) => any;
  restore: (_0?: any, _1?: any) => any;
  arePurchasesDisabled: (_0?: any) => any;
};
declare const questList: any;
declare const _patch: (_0?: any) => any;
declare const keyboardOverlayBuilder: {
  infiniteDebugWidth: any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const keys: {
  parseNumberOfKey: (_0?: any, _1?: any) => any;
  onKeyUp: (_0?: any) => any;
  onKeyDown: (_0?: any) => any;
  parseNumberOfFunctionKey: (_0?: any, _1?: any) => any;
  parseNumberOfNumpadKey: (_0?: any, _1?: any) => any;
  parseNumberOfKeyOrNumpadKey: (_0?: any, _1?: any) => any;
};
declare const monsterUsableItemMove: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const burnConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const catchableMonsterParticipant: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const worldThunder: {
  createInstance: (_0?: any, _1?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const monsterBattleConfigList: {
  TITAN_ELECTRIC: {
    enemy: any;
  };
  FIRE_GOLEM_2: {
    enemy: any;
  };
};
declare const DepleteEnergyAction: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const emptyParams: () => any;
declare const monsterSummaryScreen: {
  getScreenForOnlineSquadEditable: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenNonEditable: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getScreenForMonsterNonEditable: (_0?: any, _1?: any) => any;
  getScreenEditable: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenForMonsterEditable: (_0?: any, _1?: any) => any;
};
declare const accelerate: (_0?: any, _1?: any, _2?: any) => any;
declare const groupHelper: {
  clear: (_0?: any, _1?: any) => any;
  newAnchored: (_0?: any, _1?: any, _2?: any) => any;
  newStack: (_0?: any, _1?: any, _2?: any) => any;
  newContainer: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  returnBorrowedObject: (_0?: any, _1?: any) => any;
  borrowObject: (_0?: any, _1?: any, _2?: any) => any;
  newObject: (_0?: any, _1?: any, _2?: any) => any;
  newGridStack: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setObjectContainer: (_0?: any, _1?: any, _2?: any) => any;
  newFullScreenContainer: (_0?: any, _1?: any, _2?: any) => any;
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const blazingCoalsEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const OnlineCharacterWearable: any;
declare const fillBarBuilder: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const firedUpStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const touches: {
  passFocusAfterMove: (_0?: any, _1?: any) => any;
  passFocusAfterMoveX: (_0?: any, _1?: any) => any;
  simulateClick: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  doClickPress: (_0?: any) => any;
  holdDuration_short: number;
  ifMovedAtLeastY: (_0?: any, _1?: any) => any;
  ifMovedAtLeast: (_0?: any, _1?: any) => any;
  holdDuration_medium: number;
  ifMovedAtLeastX: (_0?: any, _1?: any) => any;
  getTouchableAtLocation: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  doClick: (_0?: any) => any;
  doClickRelease: (_0?: any) => any;
  passFocusAfterMoveY: (_0?: any, _1?: any) => any;
};
declare const ObtainableQuestRewardItems: {
  getRandomizable: (_0?: any, _1?: any) => any;
  populateRandomizedObtainableItems: (_0?: any) => any;
  getRandomizedObtainableItems: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const characterConfigList: any;
declare const twilightWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const outerTopBarInfoButtonBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const nextFrame: (_0?: any) => any;
declare const gridHelper: {
  createArrayStartingAtZero: (_0?: any, _1?: any, _2?: any) => any;
  indexToRow: (_0?: any, _1?: any, _2?: any) => any;
  createArrayStartingAtOne: (_0?: any, _1?: any, _2?: any) => any;
  getRandomTileInDistance: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  indexToColumn: (_0?: any, _1?: any, _2?: any) => any;
  gridToIndex: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  amountOfColumns: (_0?: any, _1?: any, _2?: any) => any;
  findBestGrid: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  indexToGrid: (_0?: any, _1?: any, _2?: any) => any;
  amountOfRows: (_0?: any, _1?: any, _2?: any) => any;
};
declare const worldThunderFlash: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const IAPShopScreen: {
  ensureProductsAndStyleCrystalsOrShowError: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreen: (_0?: any) => any;
};
declare const UIScrollBarBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const desertTownUtility: {
  getShopItems: (_0?: any, _1?: any) => any;
  executeRandomGuardResponseCutscene: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  executeRandomGuardCodewordResponseCutscene: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
};
declare const monsterDatabaseScreen: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenWithActiveViewMode: (_0?: any, _1?: any) => any;
  getScreenForMonster: (_0?: any, _1?: any, _2?: any) => any;
  getScreen: (_0?: any) => any;
};
declare const audio: {
  rewind: (_0?: any) => any;
  resume: (_0?: any) => any;
  countFreeChannels: (_0?: any) => any;
  countUnreservedFreeChannels: (_0?: any) => any;
  reserveChannels: (_0?: any) => any;
  isChannelPaused: (_0?: any) => any;
  play: (_0?: any) => any;
  loadStream: (_0?: any) => any;
  isSourcePlaying: (_0?: any) => any;
  dispose: (_0?: any) => any;
  setMinVolume: (_0?: any) => any;
  countUsedChannels: (_0?: any) => any;
  stop: (_0?: any) => any;
  setMaxVolume: (_0?: any) => any;
  seek: (_0?: any) => any;
  getSessionProperty: (_0?: any) => any;
  stopWithDelay: (_0?: any) => any;
  getVolume: (_0?: any) => any;
  loadSound: (_0?: any) => any;
  isSourcePaused: (_0?: any) => any;
  getMaxVolume: (_0?: any) => any;
  getMinVolume: (_0?: any) => any;
  setSessionProperty: (_0?: any) => any;
  fadeOut: (_0?: any) => any;
  isChannelActive: (_0?: any) => any;
  countTotalChannels: (_0?: any) => any;
  countUnreservedUsedChannels: (_0?: any) => any;
  findFreeChannel: (_0?: any) => any;
  fade: (_0?: any) => any;
  getSourceFromChannel: (_0?: any) => any;
  getDuration: (_0?: any) => any;
  isSourceActive: (_0?: any) => any;
  isChannelPlaying: (_0?: any) => any;
  getChannelFromSource: (_0?: any) => any;
  setVolume: (_0?: any) => any;
  pause: (_0?: any) => any;
  countReservedChannels: (_0?: any) => any;
};
declare const TrainerMonsterList: {
  getRandomizedMonsterUIDByTrainerMonsterUID: (_0?: any) => any;
  populateRandomizedMonsters: (_0?: any) => any;
  getRandomizableUID: (_0?: any, _1?: any) => any;
};
declare const statBoostStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const PushNotifications: {
  getDeviceToken: (_0?: any) => any;
  optionallyRequestRequestNativePermission: (_0?: any, _1?: any) => any;
  unsubscribeFromTopic: (_0?: any, _1?: any, _2?: any) => any;
  trySubscribeToTopicOptionallyRequestingPermission: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  hasPushNotificationPermission: (_0?: any) => any;
  subscribeToTopic: (_0?: any, _1?: any, _2?: any) => any;
};
declare const magnet: {
  bottomCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  bottomLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  horizontalCenter: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  centerRightBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  top: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  invalidateOnSafeAreaChangedEvent: (_0?: any, _1?: any, _2?: any) => any;
  atLeftBottomBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  centerRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atRightCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atEdgeCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atLeftTopBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atBottom: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atBottomLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atLeftBottom: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  topCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  center: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  returnBorrowedObject: (_0?: any, _1?: any) => any;
  getDeltaYLocationFor: (...args: any[]) => any;
  atBottomRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  getDeltaXLocationFor: (...args: any[]) => any;
  getLocationFor: (...args: any[]) => any;
  borrowObjectWithConsistentLocation: (_0?: any, _1?: any, _2?: any) => any;
  atLeftCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  evenlyDistributed: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atTopLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atTop: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atRightCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  getDeltaLocationFor: (...args: any[]) => any;
  left: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  centerLeftBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atTopCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atTopLeftBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atLeftCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  topLeftBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atBottomCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  right: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getXLocationFor: (...args: any[]) => any;
  atRightBottom: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  bottomRightBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atLeftTop: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  bottomCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atRight: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atTopRightBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  topRightBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  bottomRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  getYLocationFor: (...args: any[]) => any;
  atRightTopBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atEdge: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  topCenter: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  bottom: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atBottomRightBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atBottomLeftBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atLeft: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  atRightTop: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  topLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  verticalCenter: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  topRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atTopRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  centerLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  atRightBottomBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atBottomCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  atTopCenterBetween: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
};
declare const localiseWrapper: (_0?: any, _1?: any) => any;
declare const OnlineMenuScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const curseCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const worldBattleEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const textHelper: {
  addCharacterObjectRenderFunction: (_0?: any, _1?: any, _2?: any) => any;
  addCharacterObjectCreateFunction: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  getReplaceCharacters: (_0?: any) => any;
  spawnPrepared: (_0?: any, _1?: any, _2?: any) => any;
  width: (_0?: any, _1?: any, _2?: any) => any;
  typeWriter: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setTypeWriterSpeedFactor: (_0?: any, _1?: any) => any;
  scrollingTypeWriter: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newPrepared: (_0?: any, _1?: any, _2?: any) => any;
  height: (_0?: any, _1?: any, _2?: any) => any;
  parseText: (_0?: any, _1?: any) => any;
  isCharacterUsedToParse: (_0?: any, _1?: any) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const worldMapDataUtility: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const outQuad: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const RandomizeEvolutionsMode: {
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  replaceWithSameType: {
    shouldLimitToSimilarStats: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldLimitToSameType: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldRandomlyEvolveEveryLevel: (_0?: any) => any;
  };
  replaceWithSimilarStats: {
    shouldLimitToSimilarStats: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldLimitToSameType: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldRandomlyEvolveEveryLevel: (_0?: any) => any;
  };
  values: any;
  replaceWithAny: {
    shouldLimitToSimilarStats: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldLimitToSameType: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldRandomlyEvolveEveryLevel: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  instanceOf: (_0?: any, _1?: any) => any;
};
declare const Achievement: {
  COMPLETE_TRAINING_THROWING_ARM: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_10_DEFEAT_TITAN_WATER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FINISH_GAME_ON_EASY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EARLY_EVOLVE_GHOST_OCTO_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_5_DEFEAT_TITAN_SAND: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REACH_LUX_SOLIS_RANK_50: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EARLY_EVOLVE_GHOST_WOLF_2: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EARLY_EVOLVE_GHOST_CAT_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_1_PICK_STARTER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REACH_COROMON_LEVEL_99: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EARLY_EVOLVE_NORMAL_ADDER_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_CAKES_IN_OVEN: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  GIVE_STARTER_TO_JEROME: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  COMPLETE_5_SIDEQUESTS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  START_WEATHER_RAIN: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_IN_SAME_SPINNER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_CAVE_WITHIN_A_CAVE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_WITH_HOUNDOS_AND_PURRGY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_OUTFIT_WALDO: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SPEND_ALL_GOLD_IN_SHOP: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_OF_DIFFERENT_TYPES: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SELL_GEMS_FOR_5000_GOLD: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  DIG_UP_HOLD_ITEM: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_OF_POTENT: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  CATCH_ALL_MONSTER_FAMILIES: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FINISH_GAME_ON_INSANE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  WEAR_TOWEL_AND_GO_TO_SHOP: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_7_DEFEAT_TITAN_FIRE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REDEEM_SHOP_COUPON: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FINISH_GAME_WITHOUT_MONSTER_FAINTED: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  GET_HIGHSCORE_500_IN_FLAPPY_SWURMY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  values: any;
  WEAR_TOWEL_AND_TALK_WITH_RIGEL: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  USE_SKILL_FLASH: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CATCH_ICE_BEAR_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CATCH_FIRE_TURTLE_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  START_WEATHER_SNOW: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FINISH_GAME_ON_NORMAL: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  TRY_RANDOMIZER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CONSUME_FRUIT: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REROLL_TRAIT: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_2_DEFEAT_MYSTERIOUS_INTRUDER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  DEVOLVE_A_COROMON: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_4_DEFEAT_TITAN_GHOST: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  WEAR_TOWEL_AND_GET_OVERHEATED_IN_DESERTROUTE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  TRAIT_PLUS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CATCH_WATER_SHARK_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_150_HIDDEN_ITEMS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_HEADGEAR_BUNNY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  START_WEATHER_TWILIGHT: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REROLL_POTENTIAL: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CROSS_DESERTROUTE_3_BRIDGE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PLANT_FRUITS_IN_ALL_POTS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  GET_HIGHSCORE_1000_IN_SWURMY_RUSH: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PET_PAWBURY_SWURMY_TOO_MANY_TIMES: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_OF_SAME_MONSTER: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EARLY_EVOLVE_NORMAL_BEE_1: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  REACH_LUX_SOLIS_RANK_100: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CREATE_A_CROP_CIRCLE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  OPEN_ALL_DOORS_IN_TOWN: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  WATCH_CREDITS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_3_DEFEAT_TITAN_ELECTRIC: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FINISH_GAME_ON_HARD: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  CHANGE_HAIRSTYLE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  EVOLVE_A_COROMON: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  USE_RESETINATOR: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  WEAR_TOWEL_AND_WALK_IN_SNOW: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  BREW_POTENT_SCENT: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  UNLOCK_MAGNETIC_LOCK: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_6_WIN_MIRROR_CHALLENGE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_8_ICETOWN_FESTIVAL: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SPEND_LESS_THAN_50_GOLD_IN_SHOP: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  TRAIT_PLUS_PLUS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  SQUAD_WITH_WHOLE_FAMILY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  START_WEATHER_SANDSTORM: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  START_WEATHER_HEATWAVE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  FIND_HEADGEAR_SANTA: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  READ_MOMS_DIARY: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  DEFEAT_60_TRAINERS: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  PROGRESS_9_DEFEAT_TITAN_ICE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
  COMPLETE_TRAINING_HAGGLE: {
    isHidden: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    getMaxProgress: (_0?: any) => any;
    achieveAndShowIndicator: (_0?: any, _1?: any) => any;
    achieve: (_0?: any, _1?: any) => any;
    getProgress: (_0?: any, _1?: any) => any;
    isAchieved: (_0?: any, _1?: any) => any;
    setProgressAndShowIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createUnachievedIcon: (_0?: any, _1?: any) => any;
    createAchievedIcon: (_0?: any, _1?: any) => any;
    setProgress: (_0?: any, _1?: any, _2?: any) => any;
  };
};
declare const harborUtility: {
  askIfReadyToGoToElectricTown: (_0?: any, _1?: any) => any;
};
declare const outerTopBarMonsterFilterButtonBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const OnlineMatchmakingScreen: {
  getScreenOrShowOnlineSquadErrorsFor: (_0?: any, _1?: any, _2?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenFor: (_0?: any, _1?: any) => any;
  getScreenName: (_0?: any) => any;
  restoreStateBeforeLastBattle: (_0?: any, _1?: any, _2?: any) => any;
};
declare const OnlineAuthenticationServer: {
  authenticate: (_0?: any, _1?: any, _2?: any) => any;
  getLinks: (_0?: any, _1?: any, _2?: any) => any;
  revoke: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  refresh: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  unlink: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  link: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const playerStats: {
  getAmountDistinctMonstersSeen: (_0?: any) => any;
  getAmountDistinctMonstersSeenWithPotentialCategory: (
    _0?: any,
    _1?: any,
  ) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  addLuxSolisRankExperience: (_0?: any, _1?: any) => any;
  hasReachedMaxLuxSolisRankExperience: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  addStep: (_0?: any) => any;
  hasClaimedOnlineSeasonReward: (_0?: any, _1?: any, _2?: any) => any;
  resetMonsterSeenInRandomizedEvolution: (_0?: any) => any;
  hasAchievedAchievement: (_0?: any, _1?: any) => any;
  getAchievedMilestoneStagesNotShownMessageFor: (_0?: any) => any;
  setSwurmyRushHighscore: (_0?: any, _1?: any) => any;
  createMinigameHighscoreEncryption: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  getMonstersSeen: (_0?: any) => any;
  getAmountOfMonstersCaughtWithSpinnerWithPotentialCategory: (
    _0?: any,
    _1?: any,
  ) => any;
  getSwurmyRushHighscore: (_0?: any) => any;
  getMaxLuxSolisRankExperience: (_0?: any) => any;
  getAmountOfSpinnersSwapped: (_0?: any) => any;
  addScentBrewed: (_0?: any, _1?: any) => any;
  setClaimedOnlineSeasonRewards: (_0?: any, _1?: any, _2?: any) => any;
  addEvolutionCancelled: (_0?: any) => any;
  increaseOnlineConsecutiveWins: (_0?: any) => any;
  getUnclaimedButAchievedMilestoneStages: (_0?: any) => any;
  getAmountOfRecallsConsumed: (_0?: any) => any;
  hasDifficultyBeenModified: (_0?: any) => any;
  getAmountOfGrassAreaTiledBurned: (_0?: any) => any;
  resetOnlineCasualRank: (_0?: any, _1?: any) => any;
  getAmountOfScentsBrewed: (_0?: any) => any;
  getAmountOfEvolutionsCancelled: (_0?: any) => any;
  getLuxSolisRankExperience: (_0?: any) => any;
  getOnlineBattleItemRewardCounter: (_0?: any) => any;
  destroy: (_0?: any) => any;
  getAmountOfPerfectMonstersEncountered: (_0?: any) => any;
  setItemPopupContextTextSeen: (_0?: any, _1?: any) => any;
  getHighestDamageDealt: (_0?: any) => any;
  setMilestoneStageShownMessageFor: (_0?: any, _1?: any, _2?: any) => any;
  addGauntletModuleAttractTriggered: (_0?: any) => any;
  addHardResetinatorUsage: (_0?: any) => any;
  setAchievementProgress: (_0?: any, _1?: any, _2?: any) => any;
  getAmountOfHardResetinatorUsages: (_0?: any) => any;
  hasSeenItemPopupContextText: (_0?: any, _1?: any) => any;
  addScentConsumed: (_0?: any) => any;
  getAchievementProgress: (_0?: any, _1?: any) => any;
  getAmountOfMonstersFainted: (_0?: any) => any;
  hasUnclaimedLuxSolisBenefits: (_0?: any) => any;
  setMonsterSeen: (_0?: any, _1?: any, _2?: any) => any;
  getLongestOnlineConsecutiveWins: (_0?: any) => any;
  getAmountOfFruitsConsumed: (_0?: any) => any;
  getFlappySwurmyHighscore: (_0?: any) => any;
  getSteps: (_0?: any) => any;
  hasSeenMonsterInRandomizedEvolution: (_0?: any, _1?: any, _2?: any) => any;
  resetOnlineConsecutiveWins: (_0?: any) => any;
  getAmountOfMonstersCaughtWithSpinner: (_0?: any) => any;
  addPotentialReroll: (_0?: any) => any;
  setMilestoneStageClaimed: (_0?: any, _1?: any, _2?: any) => any;
  getAmountOfTimesGauntletModuleAttractTriggered: (_0?: any) => any;
  getMilestoneStageClaimed: (_0?: any, _1?: any) => any;
  increaseOnlineBattleItemRewardCounter: (_0?: any) => any;
  addTrainerHubRecovery: (_0?: any, _1?: any) => any;
  addEvolutionTriggered: (_0?: any) => any;
  setFlappySwurmyHighscore: (_0?: any, _1?: any) => any;
  addSpinnerSwap: (_0?: any) => any;
  addPlaytimeSecond: (_0?: any) => any;
  getAmountOfSoftResetinatorUsages: (_0?: any) => any;
  setClaimedLuxSolisBenefit: (_0?: any, _1?: any, _2?: any) => any;
  getAmountOfFruitPlantsHarvested: (_0?: any) => any;
  getAmountOfTimesRerolledTrait: (_0?: any) => any;
  getAmountOfTimesGauntletModuleRepelTriggered: (_0?: any) => any;
  addPerfectMonsterEncountered: (_0?: any) => any;
  hasClaimedLuxSolisBenefit: (_0?: any, _1?: any, _2?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getAchievedMilestoneStageNotShownMessageFor: (_0?: any, _1?: any) => any;
  getAmountDistinctMonstersOwnedWithPotentialCategory: (
    _0?: any,
    _1?: any,
  ) => any;
  getLuxSolisRank: (_0?: any) => any;
  setDifficultyHasBeenModified: (_0?: any) => any;
  addBattle: (_0?: any, _1?: any, _2?: any) => any;
  hasOwnedMonster: (_0?: any, _1?: any, _2?: any) => any;
  addGoldEarnedBySellingAuctionableItems: (_0?: any, _1?: any) => any;
  addTraitReroll: (_0?: any) => any;
  getAmountOfScentsConsumed: (_0?: any) => any;
  addOnlineCasualDraw: (_0?: any, _1?: any) => any;
  addOnlineCasualWin: (_0?: any, _1?: any) => any;
  addOnlineCasualLoss: (_0?: any, _1?: any) => any;
  addFruitConsumed: (_0?: any) => any;
  addPotentMonsterEncountered: (_0?: any) => any;
  addGauntletModuleRepelTriggered: (_0?: any) => any;
  getAmountOfGoldEarnedBySellingAuctionableItems: (_0?: any) => any;
  addMonsterFainted: (_0?: any) => any;
  getAmountOfBattles: (_0?: any) => any;
  getAmountOfBattlesByFunction: (_0?: any, _1?: any) => any;
  addRecallConsumed: (_0?: any) => any;
  getAmountOfEvolutionsTriggered: (_0?: any) => any;
  setHighestDamageDealtIfHigher: (_0?: any, _1?: any) => any;
  getAmountOfTimesRerolledPotential: (_0?: any) => any;
  addMonsterOwnedWithSpinner: (_0?: any, _1?: any, _2?: any) => any;
  getAmountOfTrainerHubRecoveries: (_0?: any, _1?: any) => any;
  getOnlineCasualRank: (_0?: any, _1?: any) => any;
  getAmountOfPotentMonstersEncountered: (_0?: any) => any;
  getTotalAmountOfTrainerHubRecoveries: (_0?: any) => any;
  setMonsterSeenInRandomizedEvolution: (_0?: any, _1?: any) => any;
  getAmountOfHiddenItemsFound: (_0?: any) => any;
  addGrassAreaTileBurned: (_0?: any) => any;
  addHiddenItemFound: (_0?: any) => any;
  getMilestoneStageShownMessageFor: (_0?: any, _1?: any) => any;
  addFruitPlantAndFruitsHarvested: (_0?: any, _1?: any) => any;
  getBattles: (_0?: any) => any;
  getPlaytimeInSeconds: (_0?: any) => any;
  hasSeenMonster: (_0?: any, _1?: any, _2?: any) => any;
  setMonsterOwned: (_0?: any, _1?: any, _2?: any) => any;
  addSoftResetinatorUsage: (_0?: any) => any;
  getMonstersOwned: (_0?: any) => any;
};
declare const expressionBuilder: {
  ideaLight: {
    path: string;
    width: number;
    height: number;
    loopCount: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  exclamationMark: {
    path: string;
    width: number;
    height: number;
    loopCount: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  newInfinite: (_0?: any, _1?: any) => any;
  questionMark: {
    path: string;
    width: number;
    height: number;
    loopCount: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const worldInterface: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const volcanoCaveUtility: {
  createOptionalFloorQuestionCutscene: (_0?: any, _1?: any) => any;
  didSpawnAtEnd: (_0?: any) => any;
};
declare const __dep_require: {
  paths: any;
  require: (_0?: any) => any;
  pkg_path: string;
};
declare const potentialStatSoftResetWorldEffect: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const network: {
  setStatusListener: () => any;
  getConnectionStatus: (_0?: any) => any;
  upload: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  class: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  download: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  request: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  name: string;
  publisherId: string;
  request_native: (_0?: any) => any;
  __metatableOrig: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  __index: {
    setStatusListener: () => any;
    getConnectionStatus: (_0?: any) => any;
    upload: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    class: any;
    download: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    request: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    name: string;
    publisherId: string;
    request_native: (_0?: any) => any;
    __metatableOrig: any;
    __index: any;
    cancel: (_0?: any) => any;
  };
  cancel: (_0?: any) => any;
};
declare const paramHelper: {
  optionalString: (...args: any[]) => any;
};
declare const loadstring: (_0?: any) => any;
declare const horizontalNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const parentNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const snapshotHelper: {
  newAndRecreateIfAndroid: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const fiveFrameImageBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const AI: {
  classes: any;
  instanceOf: (_0?: any, _1?: any) => any;
  isCalculatingAIScore: (_0?: any) => any;
  setIsCalculatingAIScore: (_0?: any, _1?: any) => any;
  getDamageRandomizerPriority: (_0?: any) => any;
  getDamageRandomizer: (_0?: any) => any;
};
declare const battleDialog: {
  onTextShown: (_0?: any, _1?: any) => any;
  isCreated: (_0?: any) => any;
  newNonClosable: (_0?: any) => any;
  addText: (_0?: any, _1?: any) => any;
  addQuestion: (_0?: any, _1?: any, _2?: any) => any;
  onBeforeContinue: (_0?: any, _1?: any) => any;
  onTextStarted: (_0?: any, _1?: any) => any;
  onAfterHide: (_0?: any, _1?: any) => any;
};
declare const outInQuad: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const AjaxLoaderOverlay: {
  new: (_0?: any) => any;
};
declare const RandomizeSkillsMode: {
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  replaceWithAnyButPreferSameType: {
    isShuffle: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithAnyButPreferSameType: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
  };
  values: any;
  shuffle: {
    isShuffle: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithAnyButPreferSameType: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  replaceWithAny: {
    isShuffle: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithAnyButPreferSameType: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
  };
};
declare const outInElasticCustom: (_0?: any, _1?: any) => any;
declare const saveslotDataHelper: {
  encrypt: (_0?: any, _1?: any) => any;
  createScreenshotForMetadata: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  decodeMetadata: (_0?: any, _1?: any) => any;
  decrypt: (_0?: any, _1?: any) => any;
  updateDataToNewestVersion: (_0?: any, _1?: any, _2?: any) => any;
  createMetadata: (_0?: any, _1?: any) => any;
  encodeMetadata: (_0?: any, _1?: any) => any;
};
declare const outInQuint: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const RandomizeQuestMonstersMode: {
  replaceWithAny: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
    isReplaceWithSimilarStats: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  replaceWithSimilarStats: {
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
    isReplaceWithSimilarStats: (_0?: any) => any;
  };
  values: any;
  newValueObject: (_0?: any, _1?: any) => any;
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
};
declare const rainWeatherEffect: {
  spawnRain: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  new: (_0?: any, _1?: any) => any;
};
declare const OnlineProfileServer: {
  login: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getAuthenticated: (_0?: any, _1?: any, _2?: any) => any;
  create: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  update: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  get: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const continuousLoop: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const seconds: {
  DAY: number;
  MINUTE: number;
  WEEK: number;
  HOUR: number;
};
declare const destinyBondStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const freezeCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const _extend: (_0?: any, _1?: any) => any;
declare const inputHelper: {
  setMultitouchEnabled: (_0?: any, _1?: any) => any;
  setKeyEventShouldAcceptFallbackForUnknownGamepads: (
    _0?: any,
    _1?: any,
  ) => any;
  releaseKeys: (_0?: any) => any;
  unblockInputNavigation: (_0?: any) => any;
  releaseWithinBounds: (_0?: any, _1?: any) => any;
  releaseFocusOnEvent: (_0?: any, _1?: any) => any;
  addTouchable: (_0?: any, _1?: any, _2?: any) => any;
  isUsingKeyboard: (_0?: any) => any;
  blockInputNavigation: (_0?: any) => any;
  setInputNavigationForInputLevel: (_0?: any, _1?: any, _2?: any) => any;
  isUsingGamepad: (_0?: any) => any;
  getLastHorizontalDirection: (_0?: any, _1?: any) => any;
  releaseInput: (_0?: any) => any;
  trySetNavigationMethod: (_0?: any, _1?: any) => any;
  getMouseListener: (_0?: any, _1?: any) => any;
  onPress: (_0?: any, _1?: any) => any;
  unblockInput: (_0?: any) => any;
  repeatIfButtonIsStillPressed: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  listenToTouchOrUseButton: (_0?: any, _1?: any, _2?: any) => any;
  increaseInputLevel: (_0?: any) => any;
  onMouseSecondaryButton: (_0?: any, _1?: any, _2?: any) => any;
  removeTouchableOverlay: (_0?: any, _1?: any) => any;
  getInputLevel: (_0?: any) => any;
  onReleaseWithinBounds: (_0?: any, _1?: any) => any;
  isKeyboardNavigationSelected: (_0?: any) => any;
  setCurrentDevice: (_0?: any, _1?: any) => any;
  isGamepadNavigationSelected: (_0?: any) => any;
  onMouseScroll: (_0?: any, _1?: any, _2?: any) => any;
  onMouseMove: (_0?: any, _1?: any, _2?: any) => any;
  addTouchableOverlay: (_0?: any, _1?: any, _2?: any) => any;
  isTouchable: (_0?: any, _1?: any) => any;
  isKeyboardDevice: (_0?: any, _1?: any) => any;
  blockInput: (_0?: any) => any;
  onMouseScrollAndMove: (_0?: any, _1?: any, _2?: any) => any;
  isButtonActuallyPressed: (_0?: any, _1?: any) => any;
  isInputBlocked: (_0?: any, _1?: any) => any;
  getLastDirectionNonFake: (_0?: any) => any;
  returnTrue: (_0?: any) => any;
  getLastVerticalDirection: (_0?: any, _1?: any) => any;
  isKeyPressed: (_0?: any, _1?: any) => any;
  isButtonPressed: (_0?: any, _1?: any) => any;
  isUsingAppleTVRemote: (_0?: any) => any;
  setButtonPressed: (_0?: any, _1?: any) => any;
  releaseTouches: (_0?: any) => any;
  getTouchListener: (_0?: any, _1?: any) => any;
  removeTouchable: (_0?: any, _1?: any) => any;
  getOptionalMouseLocation: (_0?: any) => any;
  decreaseInputLevel: (_0?: any) => any;
  setKeyEventShouldDetectUnknownGamepads: (_0?: any, _1?: any) => any;
};
declare const AIScoreHelper: {
  preferAttack: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  preferStatus: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  reflectStatusScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const handCursorBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const crash: () => any;
declare const outBounce: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const overclockerStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const OnlineMatchmakingSocket: {
  setOnQueuePopResultEvent: (_0?: any, _1?: any) => any;
  getWebsocket: (_0?: any) => any;
  setOnQueueSearchingEvent: (_0?: any, _1?: any) => any;
  setOnJoinQueueResponse: (_0?: any, _1?: any) => any;
  connect: (_0?: any, _1?: any, _2?: any) => any;
  sendAcceptQueuePopCommand: (_0?: any) => any;
  disconnect: (_0?: any) => any;
  setOnQueuePopEvent: (_0?: any, _1?: any) => any;
  sendDenyQueuePopCommand: (_0?: any) => any;
  setOnLeaveQueueResponse: (_0?: any, _1?: any) => any;
  sendJoinQueueRequest: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  sendLeaveQueueRequestAndClearOtherListeners: (_0?: any, _1?: any) => any;
};
declare const poisonCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const characterConfigUtility: {
  replaceHair: (_0?: any, _1?: any, _2?: any) => any;
  isNonSelectablePartKey: (_0?: any, _1?: any) => any;
  getHeadgear: (_0?: any, _1?: any) => any;
  getHeadLocation: (_0?: any, _1?: any) => any;
  replaceClothing: (_0?: any, _1?: any, _2?: any) => any;
  replaceBody: (_0?: any, _1?: any, _2?: any) => any;
  replaceFacialhair: (_0?: any, _1?: any, _2?: any) => any;
  resolveHeadLocationForBody: (_0?: any, _1?: any) => any;
  replaceHeadgear: (_0?: any, _1?: any, _2?: any) => any;
  getHair: (_0?: any, _1?: any) => any;
  getHairtype: (_0?: any, _1?: any) => any;
  getHead: (_0?: any, _1?: any) => any;
  replaceScar: (_0?: any, _1?: any, _2?: any) => any;
  partKeySuffixExcludes: {
    eyes: string;
  };
  getEyes: (_0?: any, _1?: any) => any;
  replaceGlasses: (_0?: any, _1?: any, _2?: any) => any;
  replaceHead: (_0?: any, _1?: any, _2?: any) => any;
  replaceWrinkle: (_0?: any, _1?: any, _2?: any) => any;
  isPartKeyOfType: (_0?: any, _1?: any, _2?: any) => any;
  getSkintone: (_0?: any, _1?: any) => any;
  getFacialhair: (_0?: any, _1?: any) => any;
  replaceSkintone: (_0?: any, _1?: any, _2?: any) => any;
  getGlasses: (_0?: any, _1?: any) => any;
  replace: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getEarrings: (_0?: any, _1?: any) => any;
  getHaircolor: (_0?: any, _1?: any) => any;
  replaceHairtype: (_0?: any, _1?: any, _2?: any) => any;
  getWrinkle: (_0?: any, _1?: any) => any;
  getScar: (_0?: any, _1?: any) => any;
  replaceEarrings: (_0?: any, _1?: any, _2?: any) => any;
  replaceFacialhairtype: (_0?: any, _1?: any, _2?: any) => any;
  getClothing: (_0?: any, _1?: any) => any;
  getBody: (_0?: any, _1?: any) => any;
  replaceHaircolor: (_0?: any, _1?: any, _2?: any) => any;
  getBlush: (_0?: any, _1?: any) => any;
  createBase: (_0?: any, _1?: any, _2?: any) => any;
  replaceEyes: (_0?: any, _1?: any, _2?: any) => any;
  partKeyPrefixes: {
    gauntlet: string;
    blush: string;
    scar: string;
    clothing: string;
    body: string;
    eyes: string;
    facialhair: string;
    wrinkle: string;
    head: string;
    glasses: string;
    headgear: string;
    earrings: string;
    hair: string;
  };
  replaceBlush: (_0?: any, _1?: any, _2?: any) => any;
  getGauntlet: (_0?: any, _1?: any) => any;
  setHeadLocation: (_0?: any, _1?: any, _2?: any) => any;
  getFacialhairtype: (_0?: any, _1?: any) => any;
  replaceGauntlet: (_0?: any, _1?: any, _2?: any) => any;
};
declare const regurgitatingStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const playerMonsters: {
  getOwnedMonstersIncludingMonsterGraveyard: (_0?: any) => any;
  getInsaneSpinnerSquad: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  releaseMultipleFromHiddenMonsterStorage: (_0?: any, _1?: any) => any;
  debugSetMonsterStorage: (_0?: any, _1?: any) => any;
  addToHiddenMonsterStorage: (_0?: any, _1?: any) => any;
  getMonsterInOnlineLoanSquad: (_0?: any, _1?: any) => any;
  getMonster: (_0?: any, _1?: any) => any;
  isFirstConsciousMonsterInSquad: (_0?: any, _1?: any) => any;
  addMultipleToHiddenMonsterStorage: (_0?: any, _1?: any) => any;
  moveMultipleFromHiddenMonsterStorageToSquad: (_0?: any, _1?: any) => any;
  getSquadOrInsaneSpinnerSquad: (_0?: any) => any;
  populateOnlineLoanSquad: (_0?: any) => any;
  getOnlineLoanSquad: (_0?: any) => any;
  swapWithinSquad: (_0?: any, _1?: any, _2?: any) => any;
  moveGraveyardToMonsterStorage: (_0?: any) => any;
  releaseFromSquad: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  setSquadFullyRestored: (_0?: any) => any;
  addToInsaneSpinnerSquad: (_0?: any, _1?: any, _2?: any) => any;
  moveFromSquadToGraveyard: (_0?: any, _1?: any) => any;
  hasFullSquad: (_0?: any) => any;
  releaseFromMonsterStorage: (_0?: any, _1?: any) => any;
  getFirstConsciousMemberInSquad: (_0?: any) => any;
  getBattleEffects: (_0?: any) => any;
  moveMultipleFromSquadToHiddenMonsterStorage: (_0?: any, _1?: any) => any;
  addToSquad: (_0?: any, _1?: any, _2?: any) => any;
  setSquad: (_0?: any, _1?: any) => any;
  getMonsterInStorage: (_0?: any, _1?: any) => any;
  getMonsterInHiddenStorage: (_0?: any, _1?: any) => any;
  getMonsterGraveyard: (_0?: any) => any;
  releaseFromInsaneSpinnerSquad: (_0?: any, _1?: any) => any;
  getMaxSquadSize: (_0?: any) => any;
  getMonstersIncludingMonsterGraveyard: (_0?: any) => any;
  getUnlockedMonsterSpriteSkinUIDs: (_0?: any) => any;
  addToMonsterStorage: (_0?: any, _1?: any) => any;
  destroy: (_0?: any) => any;
  releaseMultiple: (_0?: any, _1?: any) => any;
  getMonstersExcludingMonsterGraveyard: (_0?: any) => any;
  getSquad: (_0?: any) => any;
  isOnlyAliveMonsterInSquad: (_0?: any, _1?: any) => any;
  getMonsterInInsaneSpinnerSquad: (_0?: any, _1?: any) => any;
  hasFullInsaneSpinnerSquad: (_0?: any) => any;
  releaseFromHiddenMonsterStorage: (_0?: any, _1?: any) => any;
  setUnlockedMonsterSpriteSkinUIDs: (_0?: any, _1?: any) => any;
  getMonsterInSquad: (_0?: any, _1?: any) => any;
  getOwnedMonstersExcludingInsaneSpinnerSquad: (_0?: any) => any;
  getMonsterStorage: (_0?: any) => any;
  release: (_0?: any, _1?: any) => any;
  isSquadFullyRestored: (_0?: any) => any;
  getHiddenMonsterStorage: (_0?: any) => any;
  add: (_0?: any, _1?: any) => any;
};
declare const increaseEnergyCostStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const navigations: {
  createVerticalNavigation: (_0?: any, _1?: any) => any;
  createVerticalButtonsNavigation: (_0?: any, _1?: any, _2?: any) => any;
  setAlphaShowOnFocus: (...args: any[]) => any;
  createHorizontalButtonsNavigationWithLastSelected: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  setHideOnFocus: (...args: any[]) => any;
  createUseButtonNavigation: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createStartButtonNavigation: (_0?: any, _1?: any) => any;
  mapKeyEventToTouches: (_0?: any) => any;
  createSecondExtraButtonNavigation: (_0?: any, _1?: any) => any;
  createVerticalButtonsNavigationWithLastSelected: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createShowNavigation: (...args: any[]) => any;
  createAlphaShowNavigation: (...args: any[]) => any;
  createHorizontalButtonsNavigation: (_0?: any, _1?: any, _2?: any) => any;
  createHideOnFocusNavigation: (...args: any[]) => any;
  createGridButtonsNavigation: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  switchFromKeyboardToGamepadNavigationMethodOnDpad: (_0?: any) => any;
  createFirstExtraButtonNavigation: (_0?: any, _1?: any) => any;
  createUpButtonNavigation: (_0?: any, _1?: any) => any;
  createDownButtonNavigation: (_0?: any, _1?: any) => any;
  findByFunctionRecursive: (_0?: any, _1?: any, _2?: any) => any;
  createHorizontalNavigationWithLastSelected: (_0?: any, _1?: any) => any;
  createNumericKeyTouchNavigation: (_0?: any, _1?: any) => any;
  createVerticalNavigationWithLastSelected: (_0?: any, _1?: any) => any;
  createHorizontalNavigation: (_0?: any, _1?: any) => any;
  setShowOnFocus: (...args: any[]) => any;
  onStartButtonDown: (_0?: any, _1?: any) => any;
  doMapKeyEventToTouch: (_0?: any, _1?: any) => any;
  createNonFocusableNavigation: (_0?: any, _1?: any) => any;
  createBackButtonNavigation: (_0?: any, _1?: any) => any;
  createNumericFunctionKeyTouchNavigation: (_0?: any, _1?: any) => any;
};
declare const inOutQuart: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const imageHelper: {
  newFilled: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newScaledFrame: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newFrame: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newObject: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newVerticallyRepeated: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newStitched: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  newHorizontallyRepeated: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newScaled: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  newRepeatedObject: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  newScaledFromB64: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newRepeated: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  newHorizontallyRepeatedObject: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newVerticallyRepeatedObject: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const trainerEncounterOverlayBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const afterSkillMoveMiss: {
  classes: any;
  onAfterSkillMovePriority: (_0?: any) => any;
  onAfterSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  instanceOf: (_0?: any, _1?: any) => any;
};
declare const playerStateHelper: {
  isSaveBlocked: (_0?: any) => any;
  manualSave: (_0?: any, _1?: any, _2?: any) => any;
  blockGauntletPower: (_0?: any) => any;
  getSelectedSaveslotDeviceId: (_0?: any) => any;
  unblockGauntletPower: (_0?: any) => any;
  isGauntletPowerBlocked: (_0?: any) => any;
  unblockSave: (_0?: any) => any;
  blockSave: (_0?: any) => any;
  createNewGame: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  quitCurrentGame: (_0?: any) => any;
  getSelectedSaveslotIdentifier: (_0?: any) => any;
  initialisePlayerLibraries: (_0?: any, _1?: any) => any;
  autoSaveIfPrepared: (_0?: any) => any;
  setShouldSilenceOnlineSaveErrorsThisSession: (_0?: any, _1?: any) => any;
  prepareAutoSave: (_0?: any) => any;
  loadGame: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  shouldSilenceOnlineSaveErrorsThisSession: (_0?: any) => any;
};
declare const luxSolisTownUtility: {
  spawnReceptionGauntletPlatform: (_0?: any, _1?: any, _2?: any) => any;
};
declare const UICheckboxBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const BattleEnvironmentPreview: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newForWorldLocation: (_0?: any, _1?: any, _2?: any) => any;
};
declare const Battle: {
  asOffline: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  isCreatedAsOnline: (_0?: any) => any;
  asOnline: (_0?: any) => any;
  createOnline: (_0?: any, _1?: any) => any;
  isCreatedAsOffline: (_0?: any) => any;
  createOffline: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const traitUtility: {
  getNameForEnhancementStage: (_0?: any, _1?: any, _2?: any) => any;
  hasTraitEnhancement: (_0?: any, _1?: any) => any;
  getDescriptionForEnhancementStage: (_0?: any, _1?: any, _2?: any) => any;
};
declare const monsterShadowConfigList: {
  TITAN_FIRE_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_PHOENIX_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CHERUBIM_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_SLIME_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FISH_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_WATER_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OROCHI_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_BULL_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_TOUCAN_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FUSEBOX_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OCTO_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_TIGER_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_SLIME_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_WATER_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_BEAST_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OCTO_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CHIMAERA_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SWAMP_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FISH_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_ADDER_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_PHOENIX_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_2_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_ICE_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CERBERUS_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_KRAKEN_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CERBERUS_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CLOUD_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_2_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_TOUCAN_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CHIMAERA_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_OOZE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_TOUCAN_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CHERUBIM_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CHERUBIM_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_SLIME_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_PHOENIX_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_BEAST_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_PHOENIX_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_KRAKEN_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_BULL_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CHIMAERA_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OCTO_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CAT_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_1_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_TURTLE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_GOLEM_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_3_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_GOLEM_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_OOZE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_SAND_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_KRAKEN_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_PHOENIX_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_ICE_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OCTO_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_CHERUBIM_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_OOZE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CLOUD_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_2_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ICE_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OROCHI_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CLOUD_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SWAMP_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_SAND_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_GOLEM_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_BULL_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_2_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_GOLEM_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ICE_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CERBERUS_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_GHOST_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_TIGER_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FISH_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_SLIME_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_TURTLE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OROCHI_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_OROCHI_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_BEETLE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SWAMP_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_ELECTRIC_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_TURTLE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_BULL_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_KRAKEN_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  TITAN_WATER_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CERBERUS_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_3_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_ADDER_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_ADDER_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_BEAST_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CHIMAERA_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_MOLE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_TOUCAN_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_TIGER_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_1_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  GHOST_WOLF_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CROW_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SWAMP_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_MAGMA_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_CREATURE_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_MOTH_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_OOZE_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_GOLEM_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_BEAST_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_FIREFLY_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_CRAB_2_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_ADDER_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FISH_2_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_BEAR_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_TIGER_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ICE_SNOWBALL_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_SHARK_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_CRAB_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  ELECTRIC_CLOUD_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_TURTLE_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_RODENT_2_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_JELLYFISH_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_CYBORG_3_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_WORM_2_darkMagic_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_SAND_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  FIRE_TURTLE_1_back: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  SAND_SKELETON_3_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
  WATER_FROG_1_front: {
    y4: number;
    x2: number;
    x3: number;
    x4: number;
    y3: number;
    y2: number;
    y1: number;
    x1: number;
  };
};
declare const OnlineSaveslotServer: {
  getAll: (_0?: any, _1?: any, _2?: any) => any;
  delete: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  put: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
    _9?: any,
    _10?: any,
  ) => any;
  getMetadata: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getData: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const monsterStorageScreen: {
  isDisplayGroup: boolean;
  addKeyboardNavigation: (_0?: any, _1?: any) => any;
  getScreenForWithdraw: (_0?: any) => any;
  addGamepadNavigation: (_0?: any, _1?: any) => any;
  getTopBarObjects: (_0?: any) => any;
  getGamepadNavigations: (_0?: any) => any;
  _proxy: any;
  setBackButtonDisabled: (_0?: any, _1?: any) => any;
  isBackButtonDisabled: (_0?: any) => any;
  _class: {
    addEventListener: (_0?: any, _1?: any, _2?: any) => any;
    removeEventListener: (_0?: any, _1?: any, _2?: any) => any;
  };
  getScreenForSelection: (_0?: any, _1?: any, _2?: any) => any;
  addTopBarObject: (_0?: any, _1?: any) => any;
  addGlobalNavigation: (_0?: any, _1?: any) => any;
  getKeyboardNavigations: (_0?: any) => any;
  setTitle: (_0?: any, _1?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const monsterDataList: {
  GHOST_CAT_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_SNOWBALL_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_MOTH_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_CRAB_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_TURTLE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_OCTO_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_CRAB_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_FIREFLY_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_ELECTRIC: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_FROG_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_BEE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CYBORG_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_CRAB_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_BEETLE_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CROW_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_SLIME_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_FIREFLY_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_CRAB_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_WORM_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_MAGMA_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_TURTLE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_FIREFLY_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_TURTLE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_BEAR_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_SHARK_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_CERBERUS_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_FIREFLY_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_BEETLE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_BULL_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_SNOWBALL_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_SWAMP_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_RODENT_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_TOUCAN_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_CERBERUS_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_OOZE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_OOZE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_CLOUD_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_MOTH_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_BULL_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_FIREFLY_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_CREATURE_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_GHOST: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_PHOENIX_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CYBORG_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_PHOENIX_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_SKELETON_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_PHOENIX_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_TURTLE_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_WORM_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_WOLF_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_WOLF_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_CHERUBIM_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_CRAB_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_CAT_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_GOLEM_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_JELLYFISH_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_OROCHI_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_OCTO_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_BEAR_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_SHARK_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_FROG_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_MAGMA_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_CLOUD_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_ADDER_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_GOLEM_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_FIRE: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FUSEBOX: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_KRAKEN_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_BEAST_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_CAT_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_MOLE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_BEE_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_FIREFLY_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_BEETLE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_SNOWBALL_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_GOLEM_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_WORM_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_CHIMAERA_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_TOUCAN_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_SPINNER: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_RODENT_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_TURTLE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_CREATURE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CYBORG_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_TIGER_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_CREATURE_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_FROG_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CROW_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_CROW_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_CHIMAERA_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_CRAB_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_BEE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_SWAMP_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_WOLF_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_MAGMA_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_FISH_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_SNOWBALL_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_OROCHI_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_MOLE_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_SKELETON_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_KRAKEN_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_SAND: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_CHERUBIM_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_WATER: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_SKELETON_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_JELLYFISH_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  GHOST_SLIME_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_MOLE_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_BEAST_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_FISH_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ELECTRIC_TIGER_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_ADDER_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_WORM_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  NORMAL_RODENT_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_MOTH_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  TITAN_ICE: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  SAND_GOLEM_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_SHARK_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  DARKMAGIC_WORM_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  ICE_BEAR_3: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  WATER_JELLYFISH_1: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
  FIRE_GOLEM_2: {
    getBaseStats: (_0?: any) => any;
    getSkillProperties: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getNonDarkMagicUID: (_0?: any) => any;
    getNumber: (_0?: any) => any;
    getMonsterFamilyUID: (_0?: any) => any;
    getEncounterMethods: (_0?: any) => any;
    mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldTriggerEarlyEvolveAfterTurn: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterProperties: (_0?: any) => any;
  };
};
declare const UIContainerStyle: {
  disabled: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  topSticker_styleCrystals: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  darkBlue_round_highlight: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabSelected_middle: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  cyan_round: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  lightBlue_round_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTab_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueSelected_round_narrow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancyWithHeaderSpacing_right: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyDark_slim_scrollable: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  goldBlue: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  goldTabSelected_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabDisabled_right: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  intern: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyPointer_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  back: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabSelected_right: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  researcher: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  champion: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey_slim_scrollable: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  red_round_narrow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  titan: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  master: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_slim_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  green: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancyWithHeaderSpacing_none: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabDisabled_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyWithMargin: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_pop: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyDark_slim_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  casual: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyLight: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  credits: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  worldGreen: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  lightBlue_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_round_narrow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  red_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  disabled_round_pop: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueSoftDisabled: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  world: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyBlue: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueSelected: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_slim: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueHighlighted: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  goldTab_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_pop_holdRed: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_round_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancyWithHeaderSpacing_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  lightBlue_round: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  darkBlue_round: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_pop_hold: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  red_round_pop: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyDark_slim: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTab_right: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_pop_holdLeft: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_slim_scrollable_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey_slim: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey_slim_scrollable_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  gold_slim_scrollable: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  steam: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancyWithHeaderSpacing_both: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_narrow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancy_none: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  red: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabSelected_left: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTabDisabled_middle: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  dark_error: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey_slim_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blueTab_middle: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  dark: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_shadowPop: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyDark_slim_scrollable_withHeaderSpacing: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  grey_world: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  greyFancy: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  blue_round_popSelected: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  unknown: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  disabled_round_narrow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
  disabled_withShadow: {
    getFrameWidth: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getFullPath: (_0?: any) => any;
    getFrameHeight: (_0?: any) => any;
    getName: (_0?: any) => any;
  };
};
declare const worldBackground: {
  createInstance: (_0?: any, _1?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const stayingFrostyStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const outInBack: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
  _5?: any,
) => any;
declare const unpack: (_0?: any) => any;
declare const inBackCustom: (_0?: any) => any;
declare const innerTopBarGold: {
  getOrCreateInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  createInstance: (_0?: any) => any;
};
declare const inOutElasticCustom: (_0?: any, _1?: any) => any;
declare const DemoHelper: {
  getDemoMonsters: (_0?: any) => any;
  getDemoMonsterFamilies: (_0?: any) => any;
};
declare const CoromonWebsocket: {
  optionallyEmptyArray: (_0?: any, _1?: any) => any;
  newAuthorizing: (_0?: any, _1?: any, _2?: any) => any;
};
declare const outSine: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const burnCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const outInCubic: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const openssl: {
  csr_new: (_0?: any) => any;
  ENGINE_F_ENGINE_SET_ID: number;
  ENGINE_F_DYNAMIC_LOAD: number;
  engine: (_0?: any) => any;
  pkcs12_read: (_0?: any) => any;
  ocsp_request_read: (_0?: any) => any;
  ENGINE_F_ENGINE_GET_PREV: number;
  ENGINE_F_ENGINE_LIST_REMOVE: number;
  ENGINE_F_ENGINE_UNLOAD_KEY: number;
  csr_read: (_0?: any) => any;
  pkcs7_verify: (_0?: any) => any;
  ENGINE_METHOD_RAND: number;
  ENGINE_F_LOG_MESSAGE: number;
  ENGINE_METHOD_ECDSA: number;
  sk_x509_read: (_0?: any) => any;
  ENGINE_F_DYNAMIC_GET_DATA_CTX: number;
  ENGINE_F_ENGINE_CTRL_CMD_STRING: number;
  pkey_read: (_0?: any) => any;
  ENGINE_METHOD_DIGESTS: number;
  bn: {
    gcd: (_0?: any) => any;
    invmod: (_0?: any) => any;
    tostring: (_0?: any) => any;
    __tostring: (_0?: any) => any;
    bits: (_0?: any) => any;
    __pow: (_0?: any) => any;
    random: (_0?: any) => any;
    powmod: (_0?: any) => any;
    __mod: (_0?: any) => any;
    __unm: (_0?: any) => any;
    isodd: (_0?: any) => any;
    aprime: (_0?: any) => any;
    text: (_0?: any) => any;
    submod: (_0?: any) => any;
    __lt: (_0?: any) => any;
    __div: (_0?: any) => any;
    addmod: (_0?: any) => any;
    pow: (_0?: any) => any;
    totext: (_0?: any) => any;
    isprime: (_0?: any) => any;
    sqrtmod: (_0?: any) => any;
    __eq: (_0?: any) => any;
    __gc: (_0?: any) => any;
    add: (_0?: any) => any;
    div: (_0?: any) => any;
    compare: (_0?: any) => any;
    sqrmod: (_0?: any) => any;
    sqr: (_0?: any) => any;
    tohex: (_0?: any) => any;
    __index: any;
    divmod: (_0?: any) => any;
    sub: (_0?: any) => any;
    version: string;
    __mul: (_0?: any) => any;
    iszero: (_0?: any) => any;
    abs: (_0?: any) => any;
    mulmod: (_0?: any) => any;
    mod: (_0?: any) => any;
    mul: (_0?: any) => any;
    __add: (_0?: any) => any;
    number: (_0?: any) => any;
    isneg: (_0?: any) => any;
    rmod: (_0?: any) => any;
    neg: (_0?: any) => any;
    tonumber: (_0?: any) => any;
    __sub: (_0?: any) => any;
    isone: (_0?: any) => any;
  };
  pkcs7_encrypt: (_0?: any) => any;
  ENGINE_METHOD_STORE: number;
  ENGINE_F_ENGINE_FINISH: number;
  ocsp_response_read: (_0?: any) => any;
  ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT: number;
  object_create: (_0?: any) => any;
  ENGINE_F_ENGINE_GET_DIGEST: number;
  ENGINE_F_DYNAMIC_SET_DATA_CTX: number;
  ENGINE_F_ENGINE_GET_CIPHER: number;
  sk_x509_new: (_0?: any) => any;
  verify: (_0?: any) => any;
  ENGINE_METHOD_ALL: number;
  get_cipher: (_0?: any) => any;
  crl_read: (_0?: any) => any;
  ENGINE_F_ENGINE_UP_REF: number;
  ENGINE_F_ENGINE_GET_DEFAULT_TYPE: number;
  bio_new_file: (_0?: any) => any;
  sign: (_0?: any) => any;
  ENGINE_F_ENGINE_NEW: number;
  ts_resp_d2i: (_0?: any) => any;
  ENGINE_F_ENGINE_LIST_ADD: number;
  seal: (_0?: any) => any;
  ENGINE_F_ENGINE_CTRL: number;
  ENGINE_F_ENGINE_GET_NEXT: number;
  error_string: (_0?: any) => any;
  ts_verify_ctx_new: (_0?: any) => any;
  ENGINE_F_DYNAMIC_CTRL: number;
  ENGINE_F_ENGINE_BY_ID: number;
  pkcs7_read: (_0?: any) => any;
  ENGINE_F_ENGINE_FREE_UTIL: number;
  list_curve_name: (_0?: any) => any;
  ENGINE_METHOD_NONE: number;
  ENGINE_METHOD_CIPHERS: number;
  ENGINE_METHOD_ECDH: number;
  pkcs12_export: (_0?: any) => any;
  ENGINE_F_INT_ENGINE_MODULE_INIT: number;
  ts_req_new: (_0?: any) => any;
  version: (_0?: any) => any;
  ENGINE_F_INT_CTRL_HELPER: number;
  pkcs7_sign: (_0?: any) => any;
  ENGINE_F_ENGINE_CMD_IS_EXECUTABLE: number;
  random_bytes: (_0?: any) => any;
  LEAVE: number;
  pkcs7_decrypt: (_0?: any) => any;
  ENGINE_F_ENGINE_CTRL_CMD: number;
  ocsp_request_new: (_0?: any) => any;
  ts_req_d2i: (_0?: any) => any;
  ENGINE_F_ENGINE_LOAD_PUBLIC_KEY: number;
  bio_new_mem: (_0?: any) => any;
  topointer: (_0?: any) => any;
  ENGINE_F_ENGINE_SET_NAME: number;
  pkey_new: (_0?: any) => any;
  ENGINE_F_ENGINE_SET_DEFAULT_TYPE: number;
  bio_new_accept: (_0?: any) => any;
  ocsp_response_new: (_0?: any) => any;
  x509_read: (_0?: any) => any;
  crl_new: (_0?: any) => any;
  ENGINE_F_ENGINE_REMOVE: number;
  ENGINE_F_ENGINE_LOAD_PRIVATE_KEY: number;
  ENGINE_F_ENGINE_INIT: number;
  ENGINE_F_ENGINE_ADD: number;
  ssl_session_new: (_0?: any) => any;
  ENGINE_F_ENGINE_TABLE_REGISTER: number;
  ENGINE_F_ENGINE_UNLOCKED_FINISH: number;
  ssl_ctx_new: (_0?: any) => any;
  open: (_0?: any) => any;
  ENGINE_F_ENGINE_SET_DEFAULT_STRING: number;
  ENGINE_F_INT_ENGINE_CONFIGURE: number;
  ENGINE_METHOD_DSA: number;
  ts_resp_ctx_new: (_0?: any) => any;
  ENGINE_METHOD_DH: number;
  get_digest: (_0?: any) => any;
  ENGINE_METHOD_RSA: number;
  dh_compute_key: (_0?: any) => any;
  conf_load: (_0?: any) => any;
};
declare const spawnableHelper: {
  getStepsUntilTile: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getTileIndexAt: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  startCutscene: (...args: any[]) => any;
  getGenericSpriteMask: (_0?: any) => any;
  findSpawnablesInDirectionUntilBlocking: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  findOptionallyNonPrimarySpawnablesAndObjectPropertiesAtTile: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  getDistanceBetween: (_0?: any, _1?: any, _2?: any) => any;
  resolveUnmountedSpawnable: (_0?: any, _1?: any) => any;
  isPlayerCollidingWithObject: (_0?: any, _1?: any) => any;
  getTileIndicesAt: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  findSpawnablesAtTile: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  endCutscene: (...args: any[]) => any;
  prepareTeleport: (_0?: any, _1?: any) => any;
  isColliding: (_0?: any, _1?: any, _2?: any) => any;
  createMagnetObject: (_0?: any, _1?: any) => any;
  getPlayerSpawnableConstructor: (_0?: any) => any;
  isAtSameLocation: (_0?: any, _1?: any, _2?: any) => any;
  getTileInDirectionOfTile: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getPlayerSpawnable: (_0?: any) => any;
  neverSpawnAgain: (...args: any[]) => any;
  destroySpawnableAndNeverSpawnAgain: (...args: any[]) => any;
  getTileInDirectionOf: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getTileIndicesIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  destroySpawnable: (...args: any[]) => any;
  findSpawnablesInDirection: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getTileIndexIn: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getStepsUntilTileY: (_0?: any, _1?: any, _2?: any) => any;
  getStepsUntilTileX: (_0?: any, _1?: any, _2?: any) => any;
  modifyGridMoveToLedgeJump: (_0?: any, _1?: any, _2?: any) => any;
  getStepsUntilOutsideBoundary: (_0?: any, _1?: any, _2?: any) => any;
  getTileInFrontOf: (_0?: any, _1?: any, _2?: any) => any;
  getStepsUntilBoundary: (_0?: any, _1?: any, _2?: any) => any;
};
declare const appleTVHelper: {
  disableBackToExit: (_0?: any) => any;
  enableBackToExit: (_0?: any) => any;
};
declare const itemScreen: {
  getScreenForFruitGrowingPot: (_0?: any, _1?: any, _2?: any) => any;
  getScreenParamsForInventoryOnHold: (_0?: any, _1?: any) => any;
  getScreenForSpinnerSwap: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForBattle: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getScreenForPowerTowerFuses: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForInventory: (_0?: any, _1?: any) => any;
  getScreenForBindItemSelection: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForSelling: (_0?: any, _1?: any) => any;
  getScreenForPyramidTableRiddleStatue: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForHoldItemSelection: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getScreenForBuying: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForSettingHoldItemOnMonster: (_0?: any, _1?: any, _2?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const outerTopBarDebugButtonBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const threeFrameImageBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newRepeated: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newRepeatedObject: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newObject: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const onlineOpponentTrainerParticipant: {
  new: (_0?: any, _1?: any) => any;
};
declare const lib: {
  name: string;
  publisherId: string;
  __metatableOrig: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  __index: {
    name: string;
    publisherId: string;
    __metatableOrig: any;
    __index: any;
    class: any;
  };
  class: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
};
declare const forcedParentNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const SaveslotClusterPopup: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const pauseMenuScreenBuilder: {
  newBuilder: (_0?: any) => any;
  newSimpleBuilder: (_0?: any, _1?: any) => any;
  new: (_0?: any) => any;
};
declare const sparkWallStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const inBounce: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const finalGiftStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const Pasteboard: {
  copy: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getType: (_0?: any) => any;
  isAvailable: (_0?: any) => any;
  setAllowedTypes: (_0?: any, _1?: any) => any;
  paste: (_0?: any, _1?: any) => any;
};
declare const navigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const gauntletModuleUtility: {
  createIcon: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getName: (_0?: any, _1?: any) => any;
  getOrderedModules: (_0?: any) => any;
};
declare const rechargingStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const UITableViewBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const OnlineStyleScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const difficultyUtility: {
  getDifficultyIndex: (_0?: any, _1?: any) => any;
  getDifficulties: (_0?: any) => any;
};
declare const display: {
  isAtLeastPartiallyRendered: (_0?: any, _1?: any) => any;
  class: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  timeScale: number;
  findMaxWidth: (_0?: any) => any;
  yToRow: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  applyDisplayObjectMutations: (_0?: any, _1?: any, _2?: any) => any;
  newSnapshot: (_0?: any) => any;
  isLeftHalfOf: (_0?: any, _1?: any, _2?: any) => any;
  getSafeAreaInsets: (_0?: any) => any;
  xToColumn: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  verticallyRepeatWithin: (_0?: any, _1?: any, _2?: any) => any;
  isWithin: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  isSpriteObject: (_0?: any, _1?: any) => any;
  isActuallyVisible: (_0?: any) => any;
  setInvisible: (_0?: any) => any;
  newCircle: (_0?: any) => any;
  clear: (_0?: any) => any;
  swap: (_0?: any, _1?: any, _2?: any) => any;
  getCurrentStage: (_0?: any) => any;
  getChildrenRecursive: (_0?: any, _1?: any) => any;
  getChildrenIncludingParentRecursive: (_0?: any, _1?: any) => any;
  saveToFile: (_0?: any, _1?: any) => any;
  applyRectMutations: (_0?: any, _1?: any, _2?: any) => any;
  getHeight: (_0?: any) => any;
  getObjectAtLocation: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  isAt: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isRightHalfOf: (_0?: any, _1?: any, _2?: any) => any;
  isTopHalfOf: (_0?: any, _1?: any, _2?: any) => any;
  drawBounds: (_0?: any, _1?: any) => any;
  remove: (_0?: any) => any;
  captureScreen: (_0?: any) => any;
  translateAll: (_0?: any, _1?: any, _2?: any) => any;
  newImage: (_0?: any) => any;
  capture: (_0?: any) => any;
  setTimeScale: (_0?: any, _1?: any) => any;
  isDisplayObject: (_0?: any, _1?: any) => any;
  newRect: (_0?: any) => any;
  captureBounds: (_0?: any) => any;
  isRightHalfOfOrFurtherThan: (_0?: any, _1?: any, _2?: any) => any;
  newPrepared: (_0?: any, _1?: any) => any;
  version: number;
  newSprite: (_0?: any) => any;
  synchronizeProperties: (_0?: any, _1?: any, _2?: any) => any;
  __metatableOrig: {
    super: any;
    name: string;
    class: any;
    __index: any;
    __metatableOrig: any;
  };
  getParentParam: (...args: any[]) => any;
  name: string;
  setVisible: (_0?: any) => any;
  save: (_0?: any) => any;
  isLeftHalfOfOrFurtherThan: (_0?: any, _1?: any, _2?: any) => any;
  publisherId: string;
  msPerFrame: number;
  isFullyRendered: (_0?: any, _1?: any) => any;
  isOrWasDisplayGroup: (_0?: any, _1?: any) => any;
  newImageRect: (_0?: any) => any;
  findMaxHeight: (_0?: any) => any;
  isColliding: (_0?: any, _1?: any, _2?: any) => any;
  getDefault: (_0?: any) => any;
  getWidth: (_0?: any) => any;
  getContentBounds: (_0?: any, _1?: any) => any;
  isBottomHalfOf: (_0?: any, _1?: any, _2?: any) => any;
  setDefault: (_0?: any) => any;
  revision: number;
  removeAll: (...args: any[]) => any;
  newGroup: (_0?: any) => any;
  newContainer: (_0?: any) => any;
  isDisplayGroup: (_0?: any, _1?: any) => any;
  spawnPrepared: (_0?: any, _1?: any, _2?: any) => any;
  addPropertyChangeListener: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  colorSample: (_0?: any) => any;
  useLinearFilter: (_0?: any, _1?: any) => any;
  __index: {
    isAtLeastPartiallyRendered: (_0?: any, _1?: any) => any;
    class: any;
    timeScale: number;
    findMaxWidth: (_0?: any) => any;
    yToRow: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    applyDisplayObjectMutations: (_0?: any, _1?: any, _2?: any) => any;
    newSnapshot: (_0?: any) => any;
    isLeftHalfOf: (_0?: any, _1?: any, _2?: any) => any;
    getSafeAreaInsets: (_0?: any) => any;
    xToColumn: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    verticallyRepeatWithin: (_0?: any, _1?: any, _2?: any) => any;
    isWithin: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    isSpriteObject: (_0?: any, _1?: any) => any;
    isActuallyVisible: (_0?: any) => any;
    setInvisible: (_0?: any) => any;
    newCircle: (_0?: any) => any;
    clear: (_0?: any) => any;
    swap: (_0?: any, _1?: any, _2?: any) => any;
    getCurrentStage: (_0?: any) => any;
    getChildrenRecursive: (_0?: any, _1?: any) => any;
    getChildrenIncludingParentRecursive: (_0?: any, _1?: any) => any;
    saveToFile: (_0?: any, _1?: any) => any;
    applyRectMutations: (_0?: any, _1?: any, _2?: any) => any;
    getHeight: (_0?: any) => any;
    getObjectAtLocation: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    isAt: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isRightHalfOf: (_0?: any, _1?: any, _2?: any) => any;
    isTopHalfOf: (_0?: any, _1?: any, _2?: any) => any;
    drawBounds: (_0?: any, _1?: any) => any;
    remove: (_0?: any) => any;
    captureScreen: (_0?: any) => any;
    translateAll: (_0?: any, _1?: any, _2?: any) => any;
    newImage: (_0?: any) => any;
    capture: (_0?: any) => any;
    setTimeScale: (_0?: any, _1?: any) => any;
    isDisplayObject: (_0?: any, _1?: any) => any;
    newRect: (_0?: any) => any;
    captureBounds: (_0?: any) => any;
    isRightHalfOfOrFurtherThan: (_0?: any, _1?: any, _2?: any) => any;
    newPrepared: (_0?: any, _1?: any) => any;
    version: number;
    newSprite: (_0?: any) => any;
    synchronizeProperties: (_0?: any, _1?: any, _2?: any) => any;
    __metatableOrig: any;
    getParentParam: (...args: any[]) => any;
    name: string;
    setVisible: (_0?: any) => any;
    save: (_0?: any) => any;
    isLeftHalfOfOrFurtherThan: (_0?: any, _1?: any, _2?: any) => any;
    publisherId: string;
    msPerFrame: number;
    isFullyRendered: (_0?: any, _1?: any) => any;
    isOrWasDisplayGroup: (_0?: any, _1?: any) => any;
    newImageRect: (_0?: any) => any;
    findMaxHeight: (_0?: any) => any;
    isColliding: (_0?: any, _1?: any, _2?: any) => any;
    getDefault: (_0?: any) => any;
    getWidth: (_0?: any) => any;
    getContentBounds: (_0?: any, _1?: any) => any;
    isBottomHalfOf: (_0?: any, _1?: any, _2?: any) => any;
    setDefault: (_0?: any) => any;
    revision: number;
    removeAll: (...args: any[]) => any;
    newGroup: (_0?: any) => any;
    newContainer: (_0?: any) => any;
    isDisplayGroup: (_0?: any, _1?: any) => any;
    spawnPrepared: (_0?: any, _1?: any, _2?: any) => any;
    addPropertyChangeListener: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    colorSample: (_0?: any) => any;
    useLinearFilter: (_0?: any, _1?: any) => any;
    __index: any;
    horizontallyRepeatWithin: (_0?: any, _1?: any, _2?: any) => any;
    handleWeirdReloadingBug: (_0?: any, _1?: any) => any;
    setDebugTimeScale: (_0?: any, _1?: any) => any;
    repeatWithin: (_0?: any, _1?: any, _2?: any) => any;
  };
  horizontallyRepeatWithin: (_0?: any, _1?: any, _2?: any) => any;
  handleWeirdReloadingBug: (_0?: any, _1?: any) => any;
  setDebugTimeScale: (_0?: any, _1?: any) => any;
  repeatWithin: (_0?: any, _1?: any, _2?: any) => any;
};
declare const localise: (_0?: any, _1?: any) => any;
declare const monsterDataUtility: {
  getTotalAmountOfMonsters: (_0?: any) => any;
  getSpeakerHeadForRandomizableTitan: (_0?: any, _1?: any, _2?: any) => any;
  getSpeakerForDarkMagicTitan: (_0?: any) => any;
  getSpeakerForRandomizableTitan: (_0?: any, _1?: any) => any;
  getSpeakerNameForRandomizableTitan: (_0?: any, _1?: any) => any;
  resolveDefaultSpriteSkinForDarkMagicCoromon: (_0?: any, _1?: any) => any;
  getMonsterDatabase: (_0?: any) => any;
  getSpeakerTypeForRandomizableTitan: (_0?: any) => any;
  resolveDefaultSpriteSkinForRandomizableTitan: (_0?: any, _1?: any) => any;
};
declare const StyleCrystalShopScreen: {
  getScreenForMonsterSpriteSkin: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  getScreenForOnlineStyle: (_0?: any) => any;
  ensurePromotionsAndStyleCrystalsAndOnlineInventoryOrShowError: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  getScreenForCharacterWearables: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const pieChartBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
};
declare const debugSettings: {
  allowWorldDebug: boolean;
  disableSomeFeaturesUntilNextUpdate: boolean;
  hideWorldInterface: boolean;
  skipSplashScreen: boolean;
  getInitialItems: (_0?: any) => any;
  alwaysCatchSuccessfully: boolean;
  battle: {
    playerHasAI: boolean;
    isNoSkillDamage: boolean;
    skipTrainerSpawnAnimation: boolean;
    isNoSkillEnergyCost: boolean;
    skipEncounterOverlay: boolean;
    skipOnEnterBattle: boolean;
  };
  invalidateOpenGLEveryFrame: boolean;
  hasAllItemExceptions: {
    LUX_GOLD_MAGNET: boolean;
  };
  hasAllItems: boolean;
  noClipMode: boolean;
  showStyleCrystals: boolean;
  skipWildBattles: boolean;
  disableSomeFeaturesUntilSkinUpdate: boolean;
  logMapExtends: boolean;
  showMonsterSpriteSkin: boolean;
  skipTrainerBattles: boolean;
  logAnalytics: boolean;
  showPremiumLuxSolisBenefits: boolean;
  logAI: boolean;
  getInitialSquad: (_0?: any) => any;
  hasDebugSquad: boolean;
  MTE: {
    showObjects: boolean;
    enableDebugStats: boolean;
    showCullables: boolean;
  };
};
declare const playerOnlineCasualCustomPreferences: {
  destroy: (_0?: any) => any;
  getAsQueuePreferences: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  get: (_0?: any) => any;
};
declare const gridMoveDataUtility: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const localiseDialogAnswers: (_0?: any, _1?: any) => any;
declare const skillMoveUtility: {
  doMediumShake: (_0?: any, _1?: any) => any;
  tryRecoverHealth: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getTransitionableBattleObjects: (_0?: any) => any;
  doSkillDamages: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  doDefaultHitWithoutBlinkWithDamage: (_0?: any, _1?: any, _2?: any) => any;
  tryDrainEnergy: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  doDefaultInterrupt: (_0?: any, _1?: any, _2?: any) => any;
  tryDoRecoilDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createSkillMovePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  doConfusionAnimation: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  calculateDamageForPower: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  doDefaultHitWithBlinkWithoutDamage: (_0?: any, _1?: any, _2?: any) => any;
  doInfectionAnimation: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  tryDepleteEnergyIfNotFaintedOfflineEnemy: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  doSingleBlinkWithoutDamage: (_0?: any, _1?: any, _2?: any) => any;
  getTransitionableBattleObjectsIncludingSkills: (_0?: any) => any;
  tryDoSpecialRecoilDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  doBigShake: (_0?: any, _1?: any) => any;
  calculateDamageForPowerInBattle: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  rollMissedMonsterSprites: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  tryRecoverDrainedEnergy: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  doDefaultHitWithoutBlinkWithoutDamage: (_0?: any, _1?: any) => any;
  tryDepleteEnergyIfNotFaintedOfflineEnemyWithDefaultDepletionText: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  isConsecutiveSkillUse: (_0?: any, _1?: any, _2?: any) => any;
  doTinyShake: (_0?: any, _1?: any) => any;
  tryDepleteEnergyWithDefaultDepletionText: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  doDefaultHitWithBlinkWithDamage: (_0?: any, _1?: any, _2?: any) => any;
  doMultipleDefaultHitWithBlinkWithDamage: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  clampDamageIfNotAtOneHp: (_0?: any, _1?: any, _2?: any) => any;
  doRecoverHealthAnimation: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  canDepleteEnergy: (_0?: any, _1?: any) => any;
  setNextHitSound: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  tryDepleteEnergy: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  doSmallShake: (_0?: any, _1?: any) => any;
  tryRecoverEnergy: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const percentages: (_0?: any) => any;
declare const outerTopBarRandomButtonBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const worldDesertShadow: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const monsterUtility: {
  showMonsterReleaseConfirmPopup: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  showMonsterReleaseConfirmPopupWithByeByeMessage: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getPotentialCategoryForPotential: (_0?: any, _1?: any) => any;
  getLevelOfUpcomingTitan: (_0?: any) => any;
  showMonsterNicknameKeyboardOverlay: (_0?: any, _1?: any, _2?: any) => any;
  getMaxLevel: (_0?: any) => any;
  getMonsterByeByeMessage: (_0?: any, _1?: any) => any;
  MAX_MONSTER_NAME_WIDTH_PLAIN_8: number;
  rollPotential: (_0?: any) => any;
  rollPotentialCategory: (_0?: any) => any;
  tryRollHoldItemUID: (_0?: any, _1?: any) => any;
};
declare const OnlineInventoryData: {
  getAmountOfStyleCrystals: (_0?: any) => any;
  findPromotionForMonsterSpriteSkin: (_0?: any, _1?: any) => any;
  purchaseProductAndRedeemShopReceiptOrShowMessage: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  getAndSetInventory: (_0?: any, _1?: any, _2?: any) => any;
  getOnlineStyleProductUIDForCharacterWearable: (_0?: any, _1?: any) => any;
  increaseAmountOfStyleCrystals: (_0?: any, _1?: any) => any;
  findPromotionForCharacterWearable: (_0?: any, _1?: any) => any;
  resolveOptionallyDiscountedStyleCrystalCostForPromotionProductIfNotAlreadyOwned: (
    _0?: any,
    _1?: any,
  ) => any;
  getPromotions: (_0?: any) => any;
  hasProduct: (_0?: any, _1?: any) => any;
  setPromotions: (_0?: any, _1?: any) => any;
  getAndCachePromotions: (_0?: any, _1?: any, _2?: any) => any;
  getOnlineStyleProductUIDForMonsterSpriteSkin: (_0?: any, _1?: any) => any;
  setAmountOfStyleCrystals: (_0?: any, _1?: any) => any;
  resolveOptionallyDiscountedStyleCrystalCostForPromotionIfNotAlreadyOwned: (
    _0?: any,
    _1?: any,
  ) => any;
  redeemShopReceiptOrShowMessage: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  isOnlineAvatarStyleForOnlineStyleProduct: (_0?: any, _1?: any) => any;
  getOnlineStyleProductUIDForOnlineAvatar: (_0?: any, _1?: any) => any;
  resolveCharacterWearableForOnlineStyleProduct: (_0?: any, _1?: any) => any;
  findPromotionForOnlineAvatar: (_0?: any, _1?: any) => any;
  set: (_0?: any, _1?: any) => any;
  resolveMonsterSpriteSkinForOnlineStyleProduct: (_0?: any, _1?: any) => any;
  getAndCacheAmountOfStyleCrystals: (_0?: any, _1?: any, _2?: any) => any;
  purchasePromotionAndRedeemShopReceiptOrShowMessage: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  get: (_0?: any) => any;
};
declare const afterSkillMoveEffectiveAttack: {
  classes: any;
  onAfterSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  onAfterSkillMovePriority: (_0?: any) => any;
  mutateSkillDamageModifier: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  instanceOf: (_0?: any, _1?: any) => any;
};
declare const UISeparatorBuilder: {
  newColumnGridBuilder: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newVertical: (_0?: any, _1?: any, _2?: any) => any;
  newHorizontal: (_0?: any, _1?: any, _2?: any) => any;
};
declare const QuestMonsterList: {
  getRandomizedTitanUIDByTitanUID: (_0?: any) => any;
  getRandomizableTitanEssenceUID: (_0?: any, _1?: any) => any;
  getRandomizedMonsterUIDByQuestMonsterUID: (_0?: any) => any;
  populateRandomizedMonsters: (_0?: any) => any;
  getRandomizedTitanEssenceUIDByTitanEssenceUID: (_0?: any) => any;
  getRandomizableAntiStarterUID: (_0?: any, _1?: any) => any;
  getRandomizedStarterUIDByStarterUID: (_0?: any) => any;
  getRandomizableTitanUID: (_0?: any, _1?: any) => any;
  getRandomizedAntiStarterUID: (_0?: any) => any;
  getRandomizableStarterUID: (_0?: any, _1?: any) => any;
  getRandomizableQuestMonsterUID: (_0?: any, _1?: any) => any;
};
declare const parabola: (_0?: any, _1?: any) => any;
declare const monsterOutlineSpriteList: any;
declare const AjaxLoader: {
  newPlaying: (_0?: any, _1?: any, _2?: any) => any;
};
declare const offlineOpponentTrainerParticipant: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const EncounterZoneList: {
  populatedRandomizedZones: (_0?: any) => any;
  hasZonesForMapFile: (_0?: any, _1?: any) => any;
  rollRandomizableMonstersForMapFile: (_0?: any, _1?: any, _2?: any) => any;
  getCatchableMonsterUIDs: (_0?: any) => any;
  getCatchableMonsterUIDsBySummedBaseStatsGroup: (_0?: any) => any;
  rollRandomizableMonstersForZone: (_0?: any, _1?: any, _2?: any) => any;
  getMapFilesWithMonsterUID: (_0?: any, _1?: any) => any;
  getChanceByMonsterUIDInMapFiles: (_0?: any, _1?: any) => any;
  get: (_0?: any) => any;
};
declare const monsterMaskDimensionList: {
  TITAN_FIRE_front: any;
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: any;
  FIRE_PHOENIX_2_back: any;
  GHOST_CHERUBIM_2_back: any;
  SAND_CRAB_2_back: any;
  ELECTRIC_FIREFLY_3_front: any;
  ICE_MOTH_1_back: any;
  SAND_MOLE_3_back: any;
  NORMAL_CROW_1_front: any;
  NORMAL_BEE_3_back: any;
  SAND_WORM_2_front: any;
  GHOST_SLIME_2_front: any;
  WATER_CRAB_2_darkMagic_front: any;
  NORMAL_BEE_1_TITAN_WATER_back: any;
  SAND_SKELETON_2_front: any;
  GHOST_OROCHI_1_back: any;
  FIRE_BULL_2_front: any;
  ICE_TOUCAN_1_back: any;
  SAND_MOLE_1_front: any;
  ELECTRIC_FIREFLY_1_darkMagic_front: any;
  ELECTRIC_BEETLE_3_back: any;
  WATER_FISH_1_front: any;
  WATER_FROG_2_back: any;
  FUSEBOX_front: any;
  GHOST_OCTO_2_back: any;
  ELECTRIC_TIGER_1_back: any;
  SAND_WORM_1_back: any;
  ICE_BEAR_2_front: any;
  GHOST_SLIME_2_back: any;
  GHOST_CAT_2_back: any;
  NORMAL_BEE_1_TITAN_WATER_front: any;
  ICE_BEAR_3_back: any;
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: any;
  GHOST_WOLF_1_back: any;
  GHOST_WOLF_1_front: any;
  GHOST_WOLF_2_front: any;
  SAND_BEAST_2_front: any;
  GHOST_CAT_1_front: any;
  FIRE_TURTLE_3_front: any;
  GHOST_OCTO_1_front: any;
  GHOST_WOLF_2_back: any;
  SAND_CHIMAERA_1_back: any;
  NORMAL_CROW_2_back: any;
  WATER_TURTLE_1_front: any;
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: any;
  ICE_SNOWBALL_2_front: any;
  ICE_MOTH_2_back: any;
  WATER_SWAMP_2_front: any;
  ELECTRIC_BEETLE_2_back: any;
  WATER_FROG_2_front: any;
  WATER_FISH_2_front: any;
  NORMAL_ADDER_1_back: any;
  ICE_SNOWBALL_2_back: any;
  WATER_SHARK_3_front: any;
  FIRE_PHOENIX_3_front: any;
  SAND_GOLEM_2_front: any;
  FIRE_TURTLE_2_back: any;
  SAND_MOLE_2_back: any;
  ELECTRIC_CERBERUS_2_front: any;
  FIRE_MAGMA_1_front: any;
  TITAN_ICE_front: any;
  ELECTRIC_FIREFLY_1_front: any;
  ICE_MOTH_1_front: any;
  NORMAL_BEE_1_TITAN_ELECTRIC_back: any;
  FIRE_KRAKEN_2_back: any;
  NORMAL_BEE_3_front: any;
  ELECTRIC_CERBERUS_2_back: any;
  NORMAL_BEE_1_TITAN_FIRE_front: any;
  ELECTRIC_CLOUD_1_front: any;
  SAND_WORM_2_darkMagic_back: any;
  ICE_SNOWBALL_2_darkMagic_back: any;
  FIRE_TURTLE_1_front: any;
  ELECTRIC_FIREFLY_3_darkMagic_back: any;
  ICE_TOUCAN_1_front: any;
  WATER_FROG_1_back: any;
  SAND_CHIMAERA_2_back: any;
  ICE_CREATURE_2_back: any;
  ELECTRIC_OOZE_1_front: any;
  ICE_TOUCAN_2_front: any;
  GHOST_CHERUBIM_1_front: any;
  SAND_MOLE_2_front: any;
  FIRE_MAGMA_3_back: any;
  ICE_CREATURE_2_front: any;
  GHOST_CHERUBIM_2_front: any;
  GHOST_SLIME_1_back: any;
  FIRE_PHOENIX_2_front: any;
  ICE_BEAR_3_front: any;
  FIRE_MAGMA_2_front: any;
  SAND_SKELETON_2_back: any;
  ICE_CREATURE_1_back: any;
  SAND_BEAST_1_back: any;
  GHOST_CAT_1_back: any;
  ELECTRIC_BEETLE_3_front: any;
  GHOST_CAT_3_back: any;
  ICE_CREATURE_1_front: any;
  SAND_SKELETON_1_back: any;
  SAND_WORM_3_back: any;
  FIRE_PHOENIX_3_back: any;
  NORMAL_RODENT_2_back: any;
  GHOST_CAT_2_front: any;
  WATER_FROG_3_front: any;
  ELECTRIC_BEETLE_1_front: any;
  FIRE_MAGMA_3_front: any;
  FIRE_KRAKEN_1_front: any;
  SAND_CRAB_3_back: any;
  WATER_JELLYFISH_1_back: any;
  FIRE_BULL_2_back: any;
  SAND_CHIMAERA_2_front: any;
  GHOST_OCTO_1_back: any;
  NORMAL_BEE_1_TITAN_GHOST_front: any;
  GHOST_CAT_3_front: any;
  ICE_SNOWBALL_1_darkMagic_front: any;
  WATER_JELLYFISH_2_front: any;
  ELECTRIC_BEETLE_2_front: any;
  NORMAL_RODENT_1_back: any;
  FIRE_MAGMA_2_back: any;
  WATER_TURTLE_2_back: any;
  FIRE_GOLEM_2_front: any;
  SAND_WORM_3_darkMagic_back: any;
  FIRE_GOLEM_2_back: any;
  FIRE_TURTLE_2_front: any;
  ELECTRIC_OOZE_1_back: any;
  ELECTRIC_FIREFLY_2_darkMagic_front: any;
  TITAN_SAND_front: any;
  NORMAL_BEE_1_TITAN_GHOST_back: any;
  NORMAL_BEE_1_back: any;
  FIRE_KRAKEN_2_front: any;
  ELECTRIC_FIREFLY_1_darkMagic_back: any;
  FIRE_PHOENIX_1_front: any;
  TITAN_ICE_darkMagic_front: any;
  WATER_SHARK_3_back: any;
  SAND_CRAB_2_front: any;
  GHOST_OCTO_2_front: any;
  FIRE_TURTLE_3_back: any;
  NORMAL_CROW_3_back: any;
  GHOST_CHERUBIM_1_back: any;
  ELECTRIC_OOZE_2_back: any;
  ELECTRIC_CLOUD_2_back: any;
  ICE_SNOWBALL_2_darkMagic_front: any;
  ICE_MOTH_2_front: any;
  NORMAL_BEE_1_TITAN_ICE_front: any;
  SAND_GOLEM_1_front: any;
  ELECTRIC_FIREFLY_3_darkMagic_front: any;
  SAND_WORM_1_front: any;
  GHOST_OROCHI_1_front: any;
  ELECTRIC_CLOUD_1_back: any;
  NORMAL_BEE_1_TITAN_FIRE_back: any;
  WATER_CRAB_2_front: any;
  SAND_WORM_2_back: any;
  WATER_SWAMP_1_front: any;
  ICE_BEAR_1_front: any;
  ELECTRIC_FIREFLY_2_front: any;
  NORMAL_BEE_1_TITAN_SAND_front: any;
  FIRE_GOLEM_1_front: any;
  FIRE_BULL_1_back: any;
  WATER_SHARK_1_back: any;
  WATER_JELLYFISH_2_back: any;
  FIRE_GOLEM_1_back: any;
  NORMAL_BEE_2_back: any;
  NORMAL_BEE_2_front: any;
  NORMAL_BEE_1_TITAN_ICE_back: any;
  ICE_CREATURE_3_back: any;
  ELECTRIC_CERBERUS_1_front: any;
  NORMAL_CROW_2_front: any;
  TITAN_GHOST_front: any;
  ELECTRIC_TIGER_2_back: any;
  WATER_FISH_1_back: any;
  GHOST_SLIME_1_front: any;
  NORMAL_CROW_1_back: any;
  NORMAL_BEE_1_front: any;
  ICE_SNOWBALL_1_front: any;
  ELECTRIC_FIREFLY_1_back: any;
  SAND_MOLE_3_front: any;
  SAND_GOLEM_2_back: any;
  GHOST_WOLF_3_front: any;
  ELECTRIC_FIREFLY_2_back: any;
  NORMAL_CYBORG_1_back: any;
  WATER_TURTLE_2_front: any;
  GHOST_OROCHI_2_front: any;
  SAND_WORM_3_front: any;
  NORMAL_BEE_1_TITAN_ELECTRIC_front: any;
  SAND_GOLEM_3_back: any;
  GHOST_OROCHI_2_back: any;
  ELECTRIC_BEETLE_1_back: any;
  WATER_SWAMP_1_back: any;
  TITAN_ELECTRIC_front: any;
  WATER_TURTLE_1_back: any;
  FIRE_BULL_1_front: any;
  NORMAL_CYBORG_1_front: any;
  WATER_CRAB_1_back: any;
  WATER_CRAB_2_back: any;
  FIRE_KRAKEN_1_back: any;
  ICE_BEAR_2_back: any;
  TITAN_WATER_front: any;
  ELECTRIC_CERBERUS_1_back: any;
  SAND_CRAB_3_front: any;
  ICE_MOTH_3_back: any;
  SAND_WORM_3_darkMagic_front: any;
  NORMAL_ADDER_2_front: any;
  NORMAL_ADDER_1_front: any;
  NORMAL_CYBORG_2_back: any;
  SAND_BEAST_2_back: any;
  SAND_CRAB_1_back: any;
  SAND_CHIMAERA_1_front: any;
  SAND_MOLE_1_back: any;
  ICE_TOUCAN_2_back: any;
  SAND_GOLEM_3_front: any;
  ELECTRIC_TIGER_1_front: any;
  NORMAL_RODENT_1_front: any;
  ICE_SNOWBALL_1_darkMagic_back: any;
  ELECTRIC_FIREFLY_2_darkMagic_back: any;
  SAND_SKELETON_1_front: any;
  GHOST_WOLF_3_back: any;
  NORMAL_CROW_3_front: any;
  WATER_SWAMP_2_back: any;
  NORMAL_RODENT_3_back: any;
  NORMAL_RODENT_3_front: any;
  NORMAL_CYBORG_3_front: any;
  WATER_JELLYFISH_1_front: any;
  NORMAL_CYBORG_2_front: any;
  FIRE_MAGMA_1_back: any;
  ICE_CREATURE_3_front: any;
  SAND_SKELETON_3_back: any;
  ICE_MOTH_3_front: any;
  WATER_FROG_3_back: any;
  ELECTRIC_OOZE_2_front: any;
  SAND_GOLEM_1_back: any;
  SAND_BEAST_1_front: any;
  WATER_CRAB_1_front: any;
  WATER_JELLYFISH_3_back: any;
  ELECTRIC_FIREFLY_3_back: any;
  WATER_CRAB_2_darkMagic_back: any;
  NORMAL_ADDER_2_back: any;
  WATER_FISH_2_back: any;
  WATER_SHARK_1_front: any;
  ICE_BEAR_1_back: any;
  ELECTRIC_TIGER_2_front: any;
  ICE_SNOWBALL_1_back: any;
  WATER_SHARK_2_front: any;
  SAND_CRAB_1_front: any;
  ELECTRIC_CLOUD_2_front: any;
  NORMAL_RODENT_2_front: any;
  WATER_SHARK_2_back: any;
  WATER_JELLYFISH_3_front: any;
  NORMAL_CYBORG_3_back: any;
  SAND_WORM_2_darkMagic_front: any;
  NORMAL_BEE_1_TITAN_SAND_back: any;
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: any;
  FIRE_TURTLE_1_back: any;
  SAND_SKELETON_3_front: any;
  WATER_FROG_1_front: any;
};
declare const OnlineTier: {
  intern: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  values: any;
  titan: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  master: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  rankedValues: any;
  casual: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  researcher: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  champion: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  unknown: {
    createBadge: (_0?: any, _1?: any) => any;
    isRanked: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    createGauntlet: (_0?: any, _1?: any) => any;
    createButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createProgressBarWithBackground: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    isUnknown: (_0?: any) => any;
  };
};
declare const unrequire: (_0?: any) => any;
declare const icyNailsEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const orderedPairs: (_0?: any) => any;
declare const titanEncounterOverlayBuilder: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const inBack: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
  _5?: any,
) => any;
declare const battlePriorities: {
  mutateMovePriority: {
    freezeOrShockConditionStatus: number;
    knockdownStatus: number;
  };
  onAfterMonsterSpriteSpawned: {
    entryHazard: number;
    applyExistingConditionStatus: number;
    trait: number;
    immediate: number;
  };
  mutateSkillDamage: {
    skill: number;
    trait: number;
  };
  onAfterPartialSkillMove: {
    reducedDamageText: number;
    reflectDamage: number;
    criticalHitText: number;
    reflectStatus: number;
    immunityIndicator: number;
    NIMBLE: number;
    skipRemainingIfActiveFainted: number;
    applyStatus: number;
  };
  mutateEnergyCost: {
    hazyCondition: number;
    default: number;
  };
  onAfterTurn: {
    earlyEvolve: number;
  };
  onAfterSkillMove: {
    effectiveText: number;
    multiStrikeText: number;
    skillMove: number;
    afterSkillMove: number;
    sideEffectImmunityIndicator: number;
    achieveMilestones: number;
    missText: number;
    skipRemainingIfAllMissed: number;
  };
  onAfterApplyMonsterSpriteStatus: {
    trait: number;
    abstractCureConditionStatusFruit: number;
  };
  onBeforeTurn: {
    rockWallStatus: number;
    twilightWeatherEffect: number;
    abstractIncreaseStatButLockSkillHoldItem: number;
    traitIndicator: number;
    knockdownStatus: number;
    conditionStatus: number;
    FRUIT_SKIP_CHARGE: number;
  };
  onAfterMonsterSpritesRemovedFromBattle: {
    XP: number;
    achieveMilestones: number;
    trait: number;
    REBIRTH: number;
  };
  onEnterBattle: {
    opponentParticipant: number;
    achieveMilestones: number;
    playerParticipant: number;
    environment: number;
  };
  onBeforeRound: {
    onlinePlayerTrainerParticipant: number;
    slowTrait: number;
    holdItem: number;
    trait: number;
    shockConditionStatus: number;
  };
  onAfterParticipantWon: {
    opponentParticipant: number;
    playerParticipant: number;
    achieveMilestones: number;
    trait: number;
    abstractCondition: number;
  };
  onBeforeEscapeMoveSuccess: {
    TRAIT: number;
    abstractPlayerTrainerParticipant: number;
  };
  move: {
    other: number;
    slowDamage: number;
    quickHeal: number;
    guaranteedFirst: number;
    slowHeal: number;
    guaranteedFirstAfterEscapeOrForfeit: number;
    slowStatus: number;
    quickDamage: number;
    quickStatus: number;
    specialMove: number;
  };
  shouldCriticalHit: {
    shouldNeverCriticalHit: number;
    shouldCriticalHitIfNotImmune: number;
    guaranteedImmune: number;
  };
  mutateStatBoostStatus: {
    trait: number;
    curseCondition: number;
  };
  mutateXpEarned: {
    HOLD_LAZY_XP: number;
    OVERRIDE: number;
  };
  mutateDamage: {
    other: number;
    fruit: number;
  };
  onSkillMove: {
    SLIPPERY: number;
    FULLY_RESTED: number;
  };
  getDamageRandomizer: {
    AI: number;
    default: number;
  };
  onAfterRound: {
    requestNewMonstersSecond: number;
    statusDamage: number;
    decreaseRounds: number;
    requestNewMonstersFirst: number;
    weatherDamage: number;
    requestNewMonstersLast: number;
    applyStatus: number;
  };
  onAfterAfterRound: {
    sendOutMonster: number;
  };
  mutateSkillPower: {
    initialSkillPower: number;
    default: number;
  };
  onAfterApplyWeatherEffect: {
    entryHazardRemove: number;
    trait: number;
  };
  mutateStat: {
    overrideStat: number;
  };
  mutateStatBoostStage: {
    override: number;
  };
  getMainActionButtonReplacementPriority: {
    freezeOrShockConditionStatus: number;
    knockdownStatus: number;
  };
};
declare const monsterPortraitConfigList: {
  GHOST_CAT_1: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_SNOWBALL_2: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_3: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_1: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_2: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_1: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_FIREFLY_2: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_ELECTRIC: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_1: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_CRAB_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_3: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_2: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_WORM_2: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_3: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_2: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_2: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_3: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_1: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_SNOWBALL_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_1: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_1: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_1: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_2: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_FIREFLY_3: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_3: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_GHOST: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_3: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_3: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_3: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_1: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_3: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_1: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_3: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_1: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_FIRE: {
    xOffset: number;
    yOffset: number;
  };
  FUSEBOX: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_1: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_2: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_3: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_FIREFLY_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_2: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_2: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_1: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_1: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_SPINNER: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_2: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_1: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_2: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_1: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_3: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_3: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_1: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_2: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_1: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_2: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_1: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_1: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_2: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_SAND: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_2: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_WATER: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_3: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_2: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_3: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_1: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_2: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_2: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_3: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_2: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_ICE: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_2: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_1: {
    xOffset: number;
    yOffset: number;
  };
  DARKMAGIC_WORM_3: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_3: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_1: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_2: {
    xOffset: number;
    yOffset: number;
  };
};
declare const heatwaveWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const colors: {
  TEXT_BURN: () => any;
  SEPARATOR_GREY_LIGHT: () => any;
  GRIDBOX_STYLE_CRYSTAL_BORDER: () => any;
  RED: () => any;
  TEXT_DROWSY: () => any;
  BLACK: () => any;
  TEXT_GREEN_SUBTLE: () => any;
  TEXT_ENVIRONMENTAL_amishTown: () => any;
  GRIDBOX_DISABLED_BORDER_SELECTED: () => any;
  UICONTAINER_GREY_BLUEHEADER: () => any;
  SEPARATOR_GREY_VERY_LIGHT: () => any;
  TEXT_ENVIRONMENTAL_desertRoute: () => any;
  GRIDBOX_BORDER_SELECTED: () => any;
  rgbTable: (_0?: any, _1?: any, _2?: any) => any;
  GRIDBOX_STYLE_CRYSTAL_BORDER_SELECTED: () => any;
  TEXT_NEGATIVE_HIGHLIGHT_2: () => any;
  TEXT_ENVIRONMENTAL_dojo: () => any;
  TEXT_SUBTLE_HIGHLIGHT: () => any;
  GRIDBOX_STYLE_CRYSTAL_BACKGROUND: () => any;
  UITABLEVIEW_BACKGROUND_GREY: () => any;
  DEFAULT_BACKGROUND: () => any;
  SEPARATOR_GREY_DARK: () => any;
  TEXT_NEGATIVE_HIGHLIGHT: () => any;
  ORANGE: () => any;
  BACKGROUND_BLACK: () => any;
  grey: (_0?: any) => any;
  GRIDBOX_GOLD_BACKGROUND_SELECTED: () => any;
  TEXT_GREYFANCY: () => any;
  WHITE: () => any;
  GREY: () => any;
  TEXT_ENVIRONMENTAL_volcano: () => any;
  GREEN: () => any;
  GRIDBOX_DISABLED_BACKGROUND_SELECTED: () => any;
  HOLD_INDICATOR_GREEN: () => any;
  TEXT_ENVIRONMENTAL_ghostTitanArea: () => any;
  MILESTONE_DARKBLUE: () => any;
  TEXT_ENVIRONMENTAL_graveyard: () => any;
  TEXT_LUX_SOLIS_RANK: () => any;
  TRANSPARENT: () => any;
  GRIDBOX_GOLD_BACKGROUND: () => any;
  LINE_LIGHTBLUE: () => any;
  GRIDBOX_GOLD_BORDER: () => any;
  TEXT_ENVIRONMENTAL_graveyardDimension: () => any;
  rgbaTable: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  SEPARATOR_GREY_LIGHT_SOFT: () => any;
  rgba: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  GRIDBOX_BACKGROUND: () => any;
  greyTable: (_0?: any) => any;
  GRIDBOX_BACKGROUND_SELECTED: () => any;
  TEXT_STUN: () => any;
  rgb: (_0?: any, _1?: any, _2?: any) => any;
  TEXT_ENVIRONMENTAL_electricTitanArea: () => any;
  TEXT_RED: () => any;
  TEXT_POTENTIAL: () => any;
  TEXT_ENVIRONMENTAL_iceTown: () => any;
  TEXT_POSITIVE_HIGHLIGHT: () => any;
  GRIDBOX_BORDER: () => any;
  TEXT_GREEN: () => any;
  TEXT_ORANGE: () => any;
  TEXT_YELLOW: () => any;
  TEXT_LIGHTBLUE: () => any;
  TEXT_DISABLED: () => any;
  RANDOM: () => any;
  TEXT_BLUE: () => any;
  GRIDBOX_STYLE_CRYSTAL_BACKGROUND_SELECTED: () => any;
  TEXT_HAZY: () => any;
  TEXT_POISON: () => any;
  TEXT_ENVIRONMENTAL_fireRoute: () => any;
  BLUE: () => any;
  TEXT_SHOCK: () => any;
  TEXT_POSITIVE_HIGHLIGHT_2: () => any;
  TEXT_SP: () => any;
  TEXT_ENVIRONMENTAL_luxSolisTown: () => any;
  TEXT_STYLE_CRYSTAL: () => any;
  TEXT_DISABLED_LIGHT: () => any;
  TEXT_GOLD: () => any;
  TEXT_FROZEN: () => any;
  TEXT_SUBTLE_TITLE_HIGHLIGHT: () => any;
  TEXT_CURSE: () => any;
  TEXT_HP: () => any;
  SHADOW_GREYFANCY: () => any;
  MILESTONE_BLUE: () => any;
  TEXT_FLINCH: () => any;
  GRIDBOX_GOLD_BORDER_SELECTED: () => any;
  TEXT_ENVIRONMENTAL_desertTown: () => any;
  TEXT_ENVIRONMENTAL_luxSolisRoute: () => any;
  TEXT_ENVIRONMENTAL_templeDungeon: () => any;
  HOLD_INDICATOR_BLUE: () => any;
  GRIDBOX_DISABLED_BACKGROUND: () => any;
  GRIDBOX_DISABLED_BORDER: () => any;
  TEXT_ENVIRONMENTAL_electricCave: () => any;
  TEXT_ENVIRONMENTAL_powerTower: () => any;
  TEXT_XP: () => any;
  TEXT_ENVIRONMENTAL_electricTown: () => any;
};
declare const worldSaveBlocker: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const _network_pathForFile: (_0?: any, _1?: any) => any;
declare const inQuart: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const drowsyCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const iceTownUtility: {
  isVorstCorruptedByDarkMagic: (_0?: any) => any;
  progressFestivalActivities: (_0?: any, _1?: any, _2?: any) => any;
};
declare const steamHelper: {
  showAchievementsScreen: (_0?: any) => any;
  unlockAchievement: (_0?: any, _1?: any) => any;
  isEnabled: (_0?: any) => any;
  getAuthSessionTicket: (_0?: any, _1?: any, _2?: any) => any;
  resetAchievements: (_0?: any) => any;
};
declare const deviceSettings: any;
declare const logbookScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const inOutBackCustom: (_0?: any) => any;
declare const gameSettings: {
  getSafeHorizontalInset: (_0?: any) => any;
  hasExplainedOrUsedRestButton: (_0?: any) => any;
  setReduceFlashesSetting: (_0?: any, _1?: any) => any;
  setRememberedDebugMapIndex: (_0?: any, _1?: any) => any;
  getEasyTrainerEncounters: (_0?: any) => any;
  setHideDirectionalInputSetting: (_0?: any, _1?: any) => any;
  getRememberedDebugMapIndex: (_0?: any) => any;
  getLastTipsAndTricksSaveslotDataVersion: (_0?: any) => any;
  shouldShowWeatherAnimations: (_0?: any) => any;
  setShowEncounterAnimations: (_0?: any, _1?: any) => any;
  shouldExplainSeasonRewards: (_0?: any, _1?: any) => any;
  setEnglishJargonSetting: (_0?: any, _1?: any) => any;
  mayShareOnlineInformation: (_0?: any) => any;
  getDpadSpriteOffsetY: (_0?: any) => any;
  setRememberedDebugMapTabIndex: (_0?: any, _1?: any) => any;
  getHideDirectionalInputSetting: (_0?: any) => any;
  saveSettings: (_0?: any) => any;
  getPreventGlitchesSetting: (_0?: any) => any;
  setInteractAndGauntletButtonContainerOffsetY: (_0?: any, _1?: any) => any;
  setCustomInputDeviceConfigByProductName: (_0?: any, _1?: any) => any;
  getSoundVolume: (_0?: any) => any;
  getShowMilestoneAchievedPopupSetting: (_0?: any) => any;
  getLanguageCode: (_0?: any) => any;
  getShowStylizedSpinnersSetting: (_0?: any) => any;
  setEnableOnlineSavesSetting: (_0?: any, _1?: any) => any;
  setExplainedOrUsedRestButton: (_0?: any, _1?: any) => any;
  setSafeHorizontalInset: (_0?: any, _1?: any) => any;
  optionallyShowKeyboardControls: (_0?: any, _1?: any) => any;
  hasRatedApp: (_0?: any) => any;
  getInteractAndGauntletButtonContainerOffsetY: (_0?: any) => any;
  setDpadSpriteOffsetX: (_0?: any, _1?: any) => any;
  setAfterCatchAskToKeepOrReleaseMonster: (_0?: any, _1?: any) => any;
  setPauseButtonHoldAction: (_0?: any, _1?: any) => any;
  getVibrationsSetting: (_0?: any) => any;
  setLanguageCode: (_0?: any, _1?: any) => any;
  getDpadSpriteOffsetX: (_0?: any) => any;
  getEnableOnlineSavesSetting: (_0?: any) => any;
  setShowTypeEffectivenessIndicatorsSetting: (_0?: any, _1?: any) => any;
  getInteractAndGauntletButtonContainerOffsetX: (_0?: any) => any;
  optionallyShowWorldInterfaceConfigExplanation: (_0?: any) => any;
  setDpadSpriteOffsetY: (_0?: any, _1?: any) => any;
  setTimescaleForBattle: (_0?: any, _1?: any) => any;
  shouldUseFasterBattleDialog: (_0?: any) => any;
  setShowStylizedSpinnersSetting: (_0?: any, _1?: any) => any;
  getPauseButtonHoldAction: (_0?: any) => any;
  getTimescaleForBattle: (_0?: any) => any;
  hasConfiguredOffsets: (_0?: any) => any;
  getEnglishJargonSetting: (_0?: any) => any;
  setSoundVolume: (_0?: any, _1?: any) => any;
  getTypeWriterSpeedFactorSetting: (_0?: any) => any;
  setEasyWildEncounters: (_0?: any, _1?: any) => any;
  getSettings: (_0?: any) => any;
  setEasyTrainerBattles: (_0?: any, _1?: any) => any;
  setExplainedReducedRandomnessInOnlineBattles: (_0?: any, _1?: any) => any;
  setEnabledStatStagePercentages: (_0?: any, _1?: any) => any;
  hasConfiguredSafeHorizontalInset: (_0?: any) => any;
  getTimescaleForOverworld: (_0?: any) => any;
  getShowAchievementAchievedPopupSetting: (_0?: any) => any;
  setAfterCatchMonsterNicknameMode: (_0?: any, _1?: any) => any;
  getOptionalFileSuffixForTimescaleForBattle: (_0?: any) => any;
  setTypeWriterSpeedFactorSetting: (_0?: any, _1?: any) => any;
  shouldShowSideEffectTurnIndicator: (_0?: any, _1?: any) => any;
  setShowWeatherAnimations: (_0?: any, _1?: any) => any;
  getReduceFlashesSetting: (_0?: any) => any;
  setShowEvolutionLevelsSetting: (_0?: any, _1?: any) => any;
  shouldShowEncounterAnimations: (_0?: any) => any;
  isBattleCreatedAsOnlineOrReducedRandomnessInBattles: (_0?: any) => any;
  setMayShareOnlineInformation: (_0?: any, _1?: any, _2?: any) => any;
  getSafeWidth: (_0?: any) => any;
  setExplainedStyleCrystalShopScreen: (_0?: any, _1?: any) => any;
  getAutomaticallyRunSetting: (_0?: any) => any;
  shouldReduceTransparency: (_0?: any) => any;
  getEasyWildEncounters: (_0?: any) => any;
  calculateMaxSafeAreaInset: (_0?: any) => any;
  setDirectionalInputMethod: (_0?: any, _1?: any) => any;
  hasBoughtIAP: (_0?: any) => any;
  getShowEvolutionLevelsSetting: (_0?: any) => any;
  setShowPotentialSparklesOnTrainerMonsters: (_0?: any, _1?: any) => any;
  setMusicVolume: (_0?: any, _1?: any) => any;
  setVibrationsSetting: (_0?: any, _1?: any) => any;
  setFasterBattleDialog: (_0?: any, _1?: any) => any;
  getColorBlindnessSetting: (_0?: any) => any;
  setColorBlindnessSetting: (_0?: any, _1?: any) => any;
  setReducedRandomnessInBattles: (_0?: any, _1?: any) => any;
  optionallyShowScreenshotModeInterfaceConfigExplanation: (
    _0?: any,
    _1?: any,
  ) => any;
  getSafeHorizontalInsetOrAtleast: (_0?: any, _1?: any) => any;
  getDirectionalInputMethod: (_0?: any) => any;
  shouldReduceMotion: (_0?: any) => any;
  shouldShowPotentialSparklesOnTrainerMonsters: (_0?: any) => any;
  setPreventGlitchesSetting: (_0?: any, _1?: any) => any;
  getEasyTrainerBattles: (_0?: any) => any;
  getReducedRandomnessInBattles: (_0?: any) => any;
  setExplainedSeasonRewards: (_0?: any, _1?: any) => any;
  setAutomaticallyRunSetting: (_0?: any, _1?: any) => any;
  addBoughtIAP: (_0?: any, _1?: any) => any;
  getAfterCatchMonsterSummaryMode: (_0?: any) => any;
  setTimescaleForOverworld: (_0?: any, _1?: any) => any;
  hasExplainedStyleCrystalShopScreen: (_0?: any) => any;
  getMusicVolume: (_0?: any) => any;
  setAfterCatchMonsterSummaryMode: (_0?: any, _1?: any) => any;
  hasExplainedReducedRandomnessInOnlineBattles: (_0?: any) => any;
  getTypeWriteSpeedFactor: (_0?: any) => any;
  getMayShareOnlineInformationSetting: (_0?: any) => any;
  getAfterCatchMonsterNicknameMode: (_0?: any) => any;
  setLastTipsAndTricksSaveslotDataVersion: (_0?: any, _1?: any) => any;
  setRatedApp: (_0?: any, _1?: any) => any;
  setEasyTrainerEncounters: (_0?: any, _1?: any) => any;
  setShowAchievementAchievedPopupSetting: (_0?: any, _1?: any) => any;
  getRememberedDebugMapTabIndex: (_0?: any) => any;
  getAfterCatchAskToKeepOrReleaseMonster: (_0?: any) => any;
  getCustomInputDeviceConfigByProductName: (_0?: any) => any;
  setInteractAndGauntletButtonContainerOffsetX: (_0?: any, _1?: any) => any;
  setShowMilestoneAchievedPopupSetting: (_0?: any, _1?: any) => any;
  hasEnabledStatStagePercentages: (_0?: any) => any;
  getShowTypeEffectivenessIndicatorsSetting: (_0?: any) => any;
};
declare const getfenv: (_0?: any) => any;
declare const monsterShadowSpriteList: {
  TITAN_FIRE_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_CRAB_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_MOTH_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_FISH_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FUSEBOX_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_SLIME_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_BEAR_3_back: {
    path: string;
    width: number;
    timePerFrame: any;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_WOLF_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_WOLF_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_BEAST_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_FISH_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FIRE_TURTLE_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_TOUCAN_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: any;
    amount_frames: number;
  };
  ICE_TOUCAN_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_MOLE_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FIRE_MAGMA_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_SLIME_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_BEAST_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_CAT_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_SKELETON_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_CRAB_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  FIRE_BULL_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  GHOST_CAT_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_SAND_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_MOTH_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_WORM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_GHOST_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FISH_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_GOLEM_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_front: {
    path: string;
    width: number;
    timePerFrame: any;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_TURTLE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ELECTRIC_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_TURTLE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_CRAB_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_BEAR_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_WATER_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_ADDER_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_BEAST_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_RODENT_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ICE_MOTH_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_BEAST_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_CRAB_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_FISH_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_1_back: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
  WATER_FROG_1_front: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: number;
    amount_frames: number;
  };
};
declare const statUtility: {
  getLocalised: (_0?: any, _1?: any) => any;
  getOrderedBaseStats: (_0?: any) => any;
  getColorForStat: (_0?: any, _1?: any) => any;
  getOppositeStatForDefenseOrAttackStat: (_0?: any, _1?: any) => any;
  getOrderedBaseStatsWithoutEnergy: (_0?: any) => any;
  getMaxPotentialStat: (_0?: any, _1?: any) => any;
  getStatBoostableBaseStats: (_0?: any) => any;
  getOrderedStatBoostableStats: (_0?: any) => any;
};
declare const soundDurationList: any;
declare const RandomizableObtainableItemList: {
  new: (_0?: any, _1?: any) => any;
};
declare const GameCenter: {
  loadAchievements: (_0?: any, _1?: any) => any;
  init: (_0?: any, _1?: any) => any;
  isPlayerMultiplayerGamingRestricted: (_0?: any) => any;
  showAccessPoint: (_0?: any, _1?: any, _2?: any) => any;
  isPlayerUnderage: (_0?: any) => any;
  setAccessPointFocused: (_0?: any, _1?: any) => any;
  submitScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isEnabled: (_0?: any) => any;
  setAchievementProgress: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  hideAccessPoint: (_0?: any) => any;
  resetAchievements: (_0?: any, _1?: any) => any;
};
declare const bn: {
  gcd: (_0?: any) => any;
  invmod: (_0?: any) => any;
  tostring: (_0?: any) => any;
  __tostring: (_0?: any) => any;
  bits: (_0?: any) => any;
  __pow: (_0?: any) => any;
  random: (_0?: any) => any;
  powmod: (_0?: any) => any;
  __mod: (_0?: any) => any;
  __unm: (_0?: any) => any;
  isodd: (_0?: any) => any;
  aprime: (_0?: any) => any;
  text: (_0?: any) => any;
  submod: (_0?: any) => any;
  __lt: (_0?: any) => any;
  __div: (_0?: any) => any;
  addmod: (_0?: any) => any;
  pow: (_0?: any) => any;
  totext: (_0?: any) => any;
  isprime: (_0?: any) => any;
  sqrtmod: (_0?: any) => any;
  __eq: (_0?: any) => any;
  __gc: (_0?: any) => any;
  add: (_0?: any) => any;
  div: (_0?: any) => any;
  compare: (_0?: any) => any;
  sqrmod: (_0?: any) => any;
  sqr: (_0?: any) => any;
  tohex: (_0?: any) => any;
  __index: {
    gcd: (_0?: any) => any;
    invmod: (_0?: any) => any;
    tostring: (_0?: any) => any;
    __tostring: (_0?: any) => any;
    bits: (_0?: any) => any;
    __pow: (_0?: any) => any;
    random: (_0?: any) => any;
    powmod: (_0?: any) => any;
    __mod: (_0?: any) => any;
    __unm: (_0?: any) => any;
    isodd: (_0?: any) => any;
    aprime: (_0?: any) => any;
    text: (_0?: any) => any;
    submod: (_0?: any) => any;
    __lt: (_0?: any) => any;
    __div: (_0?: any) => any;
    addmod: (_0?: any) => any;
    pow: (_0?: any) => any;
    totext: (_0?: any) => any;
    isprime: (_0?: any) => any;
    sqrtmod: (_0?: any) => any;
    __eq: (_0?: any) => any;
    __gc: (_0?: any) => any;
    add: (_0?: any) => any;
    div: (_0?: any) => any;
    compare: (_0?: any) => any;
    sqrmod: (_0?: any) => any;
    sqr: (_0?: any) => any;
    tohex: (_0?: any) => any;
    __index: any;
    divmod: (_0?: any) => any;
    sub: (_0?: any) => any;
    version: string;
    __mul: (_0?: any) => any;
    iszero: (_0?: any) => any;
    abs: (_0?: any) => any;
    mulmod: (_0?: any) => any;
    mod: (_0?: any) => any;
    mul: (_0?: any) => any;
    __add: (_0?: any) => any;
    number: (_0?: any) => any;
    isneg: (_0?: any) => any;
    rmod: (_0?: any) => any;
    neg: (_0?: any) => any;
    tonumber: (_0?: any) => any;
    __sub: (_0?: any) => any;
    isone: (_0?: any) => any;
  };
  divmod: (_0?: any) => any;
  sub: (_0?: any) => any;
  version: string;
  __mul: (_0?: any) => any;
  iszero: (_0?: any) => any;
  abs: (_0?: any) => any;
  mulmod: (_0?: any) => any;
  mod: (_0?: any) => any;
  mul: (_0?: any) => any;
  __add: (_0?: any) => any;
  number: (_0?: any) => any;
  isneg: (_0?: any) => any;
  rmod: (_0?: any) => any;
  neg: (_0?: any) => any;
  tonumber: (_0?: any) => any;
  __sub: (_0?: any) => any;
  isone: (_0?: any) => any;
};
declare const skillDataList: {
  GEYSER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SMACKDOWN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillPowerPriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DISTORT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  COIN_SNATCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FADE_ATTACK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TOXIC_CLOUD: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FRIGID_BARRIER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POISON_STING: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DESERT_WINDS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CINDER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HAUNTED_GROUNDS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPARK_WALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TOUGHEN_UP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CONSTRICT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUPER_DRAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CUTE_POSE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BOLT_BOMB: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillPowerPriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPECTRAL_TIDE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MAGMA_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SNOWBURST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POWER_SLAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  WHIRLPOOL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  LOOSE_CANNON: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  THUNDER_SALVO: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ARTIFICIAL_NIGHT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ELECTRIFY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BALL_OF_DARKNESS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MONSOON: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STAT_COPYCAT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FURY_PINCER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CLAW: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FEINT_SPURTS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FROST_WEB: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHADEWALKER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TAIL_SWEEP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ILLUSION_SLICE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FURY_FIST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DISABLE_SKILL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHELL_DRILL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    getRecoilDamagePercentage: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getPowerMin: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STING: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POCKET_SAND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRUSHING_WATERFALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEATED_HORNS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TRANSCENDING: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FACE_SLAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SCARY_VISION: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SURGE_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PARCHED_JAWS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHADOW_REND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  EPIPHANY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FIRE_UP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ENVELOPING_DARKNESS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRUMBLE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CONSTRICTING_FLAMES: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TAIL_SPIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CLOUDBURST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CAT_SCRATCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SACRIFICE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUPER_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  INVERSAL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TASER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BURROW: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FLAMING_TACKLE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  GLACIER_DROP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BLIZZARD: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  VOODOO: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  WITHDRAW: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPLASH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HYPNO_WAVE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STICKY_SALIVA: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  AVALANCHE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MOON_DISC: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillPowerPriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SOUL_CRUSH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  GLASS_CANNON: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUPER_ENERGY_DRAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  EMPATHY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DEATH_GRIP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POWER_TALONS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  WIND_BLAST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CORRUPT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HORROR_MASK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  REVENGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillPowerPriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  IGNITE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TIME_WARP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PINION_SLICE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FEELERS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FROST_FEATHERS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  RAGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEAT_BEAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ELECTRIC_POUND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FRANTIC_MASK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  GHASTLY_NAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SWARM_DIVERSION: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PERMAFROST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HOWL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SLUSH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ENERGY_DRAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HYDRO_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FEATHER_FURY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DISABLE_HEAL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SLAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHADOWRUNNER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEALTH_LINK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TRICKY_CLAWS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TRAIT_SCENT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BERSERK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SAND_SKEWERS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUFFOCATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FIERY_BREATH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STATIC_FUR: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BUBBLE_BLOWER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  RECONSTRUCT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  AGILITY_TRAINING: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ICY_FLURRY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRYSTAL_SHOT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DISRUPTION: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  IGNORE_PAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FACTORY_RESET: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHARED_FATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPLATTER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SAND_DEVILS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CURSED_GROUNDS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  IMMITATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PECK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  INNER_PEACE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  LACERATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  KITTY_CLAWS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SMOKESCREEN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PREMONITION: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SWARM_SHOCKER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FIRESTORM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  VENOMOUS_BEES: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DISTRACT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CORRUPTED_STORM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MIST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  LAST_STAND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BEAT_UP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    mutateSkillStrikes: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  WATER_CLONE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  LAVA_BOULDER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FROST_CHOMP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  UPSHIFT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRACKLE_HORN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  LIGHTNING_STRIKE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SNOWFALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STONE_FIST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEATWAVE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  QUAD_VOLT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  OOZE_ARMOR: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  METEOR_SHOWER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getRecoilPercentageOfMaxHealth: (_0?: any) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ICY_NAILS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  QUICKSAND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MIGHTY_ROAR: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHATTERING_CLAW: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    shouldCriticalHitPriority: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    shouldCriticalHit: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    loadSounds: (_0?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SANDBALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FAST_STRIKE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POWER_NAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ALL_IN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MUTILATION_BEAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SEISMIC_WAVE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getRolledMagnitude: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BLAZE_FEATHERS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  OVERDRIVE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getDamageHealthPercentage: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MUD_BALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BACKSTAB: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TEMPEST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PROPELLOR_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BUBBLE_BURST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ACID_BITE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TACTICAL_SLAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    mutateSkillDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillDamagePriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PUMMEL_OUT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BOULDER_BARRAGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPIKE_TRAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FLYING_KICK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PRECISION_EYE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CLEARING_WIND: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CHOMP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POISON_CHOMP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DOUBLE_STING: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BALL_OF_LIGHT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SANDMAN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DIRTY_SNOW: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CONFUSION: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FINAL_GIFT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PIERCING_HORNS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STAMPEDE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    mutateSkillStrikes: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRYSTAL_SURPRISE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ICE_GRENADE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BODY_BLAST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PRECISION_PUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TAIL_SPLASH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ROCK_WALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  QUICK_CHARGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PHANTOM_SPIKE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  PYRE_PECK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  INSPECT_SCENT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STREAMLINE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DESERT_HURRICANE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  REPLENISH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEADCRASH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DEEP_CUT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ELECTRO_MINES: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DRAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  EMP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SCRATCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BUBBLE_WRAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ICE_WALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHADOW_FURY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUMO_STANCE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DOUBLE_SLASH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SNOWBALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STALAGMITES: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEADCRAB: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DUST_STORM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SCREAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  POLTER_CRUSH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MULTI_LIGHTNING_BOLT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TURN_TAIL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TOXIC_SKULL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  VOLT_LICK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CONCENTRATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ICEBERG_SWEEP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  GLACIER: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRUNCH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ILLUSION_BURST: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SUPERCHARGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HEADBASH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    getRecoilDamagePercentage: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getPowerMin: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HOCUS_POCUS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ZEN_CURE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  HYPNOTIZE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  TRICKY_BONE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  BLAZING_COALS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SAND_PISTON: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SHARP_SNOWBALL: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  CRYSTAL_BARRAGE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  STAY_FROSTY: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FEINT_BURSTS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  FROZEN_SPIKES: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPARK_DISC: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SOUL_SWAP: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  REVENGE_JAWS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  WHOOSH: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    mutateSkillPowerPriority: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SANDSPOUT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  DETONATE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  ACID_RAIN: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SAND_COLUMNS: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SPARKLE_SLAM: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  INTENSIFICE: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  SANDSTORM_SMACK: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
  MOONLIGHT: {
    getPriority: (_0?: any) => any;
    isSkillFlash: (_0?: any) => any;
    requiresCharge: (_0?: any) => any;
    unloadSounds: (_0?: any) => any;
    rollMutatedAndClampedDamage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSkillFlashMonsterSkillPropertyRequirements: (_0?: any) => any;
    shouldTriggerSideEffect: (_0?: any, _1?: any) => any;
    getMutatedEnergyCost: (_0?: any, _1?: any) => any;
    isBlockedForAI: (_0?: any) => any;
    calculateMaxTurnsUntilSideEffect: (_0?: any) => any;
    isDisabledInRandomizer: (_0?: any) => any;
    getPowerMinWithOptionallyReducedRandomness: (_0?: any) => any;
    isStatus: (_0?: any) => any;
    getPriorityInBattle: (_0?: any, _1?: any) => any;
    getPowerMaxWithOptionallyReducedRandomness: (_0?: any) => any;
    getEnergyCost: (_0?: any) => any;
    willMakeContact: (_0?: any, _1?: any, _2?: any) => any;
    clampPowerWithOptionallyReducedRandomness: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    normaliseWithAccuracyIfReducedRandomness: (_0?: any, _1?: any) => any;
    isPhysicalDamage: (_0?: any) => any;
    makesContact: (_0?: any) => any;
    canBeInstalledAsSkillFlashOn: (_0?: any, _1?: any, _2?: any) => any;
    shouldTargetFaintedMonster: (_0?: any) => any;
    getPowerMin: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getAccuracyWithOptionallyReducedRNG: (_0?: any) => any;
    getStrikes: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getRequiredSounds: (_0?: any) => any;
    calculateCriticalHitCharge: (_0?: any, _1?: any) => any;
    onAIScorePerTarget: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isValidTargetMonsterSprite: (_0?: any, _1?: any) => any;
    getPowerWithOptionallyReducedRandomness: (_0?: any) => any;
    getAccuracy: (_0?: any) => any;
    onAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    getStrikesWithOptionallyReducedRNG: (_0?: any) => any;
    rollDamage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRestoreHealthPercentage: (_0?: any) => any;
    getPower: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    canGetAffectedByTypeEffectiveness: (_0?: any) => any;
    getPowerMax: (_0?: any) => any;
    getSkillFlashMonsterTypeRequirements: (_0?: any) => any;
    getStrikesWithReducedRNG: (_0?: any) => any;
    getShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    calculateCriticalHitChance: (_0?: any, _1?: any, _2?: any) => any;
    canBeInstalledAsSkillFlashOnMonster: (_0?: any, _1?: any) => any;
    getMutatedStrikes: (_0?: any, _1?: any) => any;
    canCriticalHit: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    mutateStatBoostStagePriority: (_0?: any) => any;
    getMutatedPower: (_0?: any, _1?: any, _2?: any) => any;
    getSideEffectChance: (_0?: any) => any;
    loadSounds: (_0?: any) => any;
    isAtMaxSideEffectTurn: (_0?: any, _1?: any) => any;
    isSpecialDamage: (_0?: any) => any;
    getMutatedShouldMissChance: (_0?: any, _1?: any, _2?: any) => any;
    getAIScore: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getType: (_0?: any) => any;
    mutateStatBoostStage: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createSkillMoveObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isDamage: (_0?: any, _1?: any) => any;
    getSkillFlashRestrictedMonsterFamilies: (_0?: any) => any;
  };
};
declare const xml: {
  decode: (_0?: any, _1?: any) => any;
};
declare const json: {
  prettify: (_0?: any) => any;
  encode: (_0?: any, _1?: any) => any;
  addnewline: (_0?: any) => any;
  quotestring: (_0?: any) => any;
  decode: (...args: any[]) => any;
  version: string;
  encodeexception: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  using_lpeg: boolean;
  use_lpeg: () => any;
  null: any;
  decodeFile: (...args: any[]) => any;
};
declare const abstractInventoryBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const inQuint: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const outInQuart: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const darkMagicWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const focusArrowBuilder: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const DailyMilestone: {
  getDailyMilestoneObjectIndexForCurrentDay: (_0?: any, _1?: any) => any;
  rerollPotential: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  getCurrentDay: (_0?: any) => any;
  catchMonster: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  pauseCurrentDay: (_0?: any) => any;
  useSkillTypes: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  values: any;
  instanceOf: (_0?: any, _1?: any) => any;
  swapSpinner: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  playSwurmyRush: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  evolve: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  valuesWithoutPlayCoromon: any;
  useRepelGauntletPower: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  winOnline: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  playFlappySwurmy: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  rerollTrait: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  winMastermind: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  getDailyMilestoneObjectForCurrentDay: (_0?: any, _1?: any) => any;
  earnGold: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  unpauseCurrentDay: (_0?: any) => any;
  useSkillFlash: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  consumeFruits: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  burnObjects: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  classes: {
    Enum: boolean;
  };
  playCoromon: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  useResetinator: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  brewScents: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  getDailyMilestoneObjectsForCurrentDay: (_0?: any) => any;
  harvestFruits: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  bakeCakes: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
  useAttractGauntletPower: {
    isAchievable: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    generateRequirementForDifficulty: (_0?: any, _1?: any) => any;
    claimRewardForCurrentDay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getRequirementForCurrentDay: (_0?: any) => any;
    setProgressionForCurrentDayIfHigher: (_0?: any, _1?: any) => any;
    getRewardForCurrentDay: (_0?: any) => any;
    getProgressionForCurrentDay: (_0?: any) => any;
    increaseProgressionForCurrentDay: (_0?: any, _1?: any) => any;
  };
};
declare const robbedStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const trappedStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const saveslotDataVersionHelper: {
  removeWorldEffectIf: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  movePlayerToAndInvalidateOtherSpawnableLocations: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  removeWorldEffect: (_0?: any, _1?: any, _2?: any) => any;
  placePlayerInMapAt: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  removeSupportedGlyph: (_0?: any, _1?: any, _2?: any) => any;
  changeTraitUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  changeItemUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  findMaxCastedMonsterValue: (_0?: any, _1?: any, _2?: any) => any;
  forEachWorldEffectWithClassPath: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  isQuestStarted: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  changeMapName: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  moveSpawnables: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  findCastedMonster: (_0?: any, _1?: any, _2?: any) => any;
  forEachCastedMonster: (_0?: any, _1?: any, _2?: any) => any;
  forEachWorldEffect: (_0?: any, _1?: any, _2?: any) => any;
  changeAndMoveTiledSpawnableName: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
  ) => any;
  changeQuestChapterUID: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  addSaveslotChangedNotificationMessage: (_0?: any, _1?: any, _2?: any) => any;
  changeQuestUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getAllSavedMonsters: (_0?: any, _1?: any) => any;
  forEachOnlineSquadEntry: (_0?: any, _1?: any, _2?: any) => any;
  changeSkillUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isQuestCompleted: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  findSavedMonster: (_0?: any, _1?: any, _2?: any) => any;
  setMaxAmountOfItemUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  movePlayerTo: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  changeSkillObjectUID: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getPlayerTile: (_0?: any, _1?: any) => any;
  changeTiledSpawnableSaveableName: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  anySavedMonsterMatches: (_0?: any, _1?: any, _2?: any) => any;
  changeWorldEffectClassPath: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isQuestInProgress: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  removeQuestChapterUID: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getAmountOfHoldItemUID: (_0?: any, _1?: any, _2?: any) => any;
  changeTiledSpawnableName: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  forEachSavedMonster: (_0?: any, _1?: any, _2?: any) => any;
  removeTemporaryProperties: (_0?: any, _1?: any) => any;
  removeItem: (_0?: any, _1?: any, _2?: any) => any;
  changePlayerWorldDataPropertyUID: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  isPlayerInMap: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const InputDeviceRegistry: {
  registerDefaultConfigForProductNameFunction: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  registerDefaultConfigForProductName: (_0?: any, _1?: any, _2?: any) => any;
  getCustomConfigByProductName: (_0?: any) => any;
  init: (_0?: any, _1?: any) => any;
  resolveConfigFor: (_0?: any, _1?: any) => any;
  registerCustomConfigForProductName: (_0?: any, _1?: any, _2?: any) => any;
  registerDefaultConfigForMFiProfile: (_0?: any, _1?: any, _2?: any) => any;
};
declare const UIScrollIndicatorBuilder: {
  newVertical: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newHorizontal: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  newHorizontalBig: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
};
declare const UIFillBarBackgroundBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const waterTownUtility: {
  isChalchiuOvertakenByRhaan: (_0?: any) => any;
};
declare const monsterSpriteList: any;
declare const outerTopBarStyleCrystalInfoButtonBuilder: {
  STYLE_CRYSTAL_INFO_TOPICS: any;
  newStyleCrystalInfoTopicPopup: (_0?: any, _1?: any) => any;
  new: (_0?: any) => any;
};
declare const localiseComplex: (_0?: any, _1?: any) => any;
declare const repeatSkillStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const mod: {
  __name: string;
};
declare const timer: {
  isPaused: (_0?: any) => any;
  cancel: (_0?: any) => any;
  performWithDelayArray: (...args: any[]) => any;
  blockingDelay: (_0?: any, _1?: any) => any;
  timeScale: number;
  atleast: (_0?: any, _1?: any) => any;
  performWithDelayAndNow: (...args: any[]) => any;
  toggle: (...args: any[]) => any;
  toggleWithOnComplete: (...args: any[]) => any;
  performWithRandomDelayAndNow: (...args: any[]) => any;
  cancelAll: () => any;
  enterFrame: (_0?: any, _1?: any) => any;
  performWithRepeatingDelayArray: (...args: any[]) => any;
  performWithDelay: (...args: any[]) => any;
  pause: (_0?: any) => any;
  performWithRandomDelay: (...args: any[]) => any;
  resume: (_0?: any) => any;
  complete: (_0?: any) => any;
  untilObjectDestroyed: (_0?: any, _1?: any) => any;
  delay: (_0?: any, _1?: any, _2?: any) => any;
  toggleVisibility: (_0?: any, _1?: any) => any;
};
declare const newproxy: (_0?: any) => any;
declare const iceSkillUtility: any;
declare const pwarn: (_0?: any, _1?: any) => any;
declare const desertRouteUtility: {
  createOptionalReturnToCheckpointQuestionCutscene: (_0?: any) => any;
};
declare const al: {
  GetEnumValue: (_0?: any) => any;
  BITS: number;
  VENDOR: number;
  DIRECTION: number;
  DISTANCE_MODEL: number;
  FALSE: number;
  GetError: (_0?: any) => any;
  TRUE: number;
  INVERSE_DISTANCE: number;
  BUFFERS_PROCESSED: number;
  SOURCE_TYPE: number;
  IsEnabled: (_0?: any) => any;
  FORMAT_MONO16: number;
  GetSource: (_0?: any) => any;
  PLAYING: number;
  FORMAT_STEREO8: number;
  INVALID_OPERATION: number;
  CONE_OUTER_ANGLE: number;
  EXPONENT_DISTANCE: number;
  FORMAT_MONO8: number;
  MAX_DISTANCE: number;
  DistanceModel: (_0?: any) => any;
  DOPPLER_FACTOR: number;
  SIZE: number;
  Source: (_0?: any) => any;
  SOURCE_STATE: number;
  Enable: (_0?: any) => any;
  FREQUENCY: number;
  _VERSION: string;
  EXPONENT_DISTANCE_CLAMPED: number;
  MAX_GAIN: number;
  UNDETERMINED: number;
  VERSION: number;
  DopplerVelocity: (_0?: any) => any;
  SpeedOfSound: (_0?: any) => any;
  PAUSED: number;
  Get: (_0?: any) => any;
  IsExtensionPresent: (_0?: any) => any;
  VELOCITY: number;
  SPEED_OF_SOUND: number;
  MIN_GAIN: number;
  GAIN: number;
  CHANNELS: number;
  DopplerFactor: (_0?: any) => any;
  ILLEGAL_COMMAND: number;
  INVALID_VALUE: number;
  LINEAR_DISTANCE: number;
  SEC_OFFSET: number;
  NONE: number;
  FORMAT_STEREO16: number;
  REFERENCE_DISTANCE: number;
  SOURCE_RELATIVE: number;
  CONE_OUTER_GAIN: number;
  ILLEGAL_ENUM: number;
  SAMPLE_OFFSET: number;
  STOPPED: number;
  OUT_OF_MEMORY: number;
  ROLLOFF_FACTOR: number;
  BUFFERS_QUEUED: number;
  Disable: (_0?: any) => any;
  DOPPLER_VELOCITY: number;
  INVALID: number;
  Listener: (_0?: any) => any;
  BYTE_OFFSET: number;
  LOOPING: number;
  POSITION: number;
  STATIC: number;
  INVERSE_DISTANCE_CLAMPED: number;
  GetListener: (_0?: any) => any;
  CONE_INNER_ANGLE: number;
  BUFFER: number;
  NO_ERROR: number;
  INVALID_NAME: number;
  RENDERER: number;
  STREAMING: number;
  EXTENSIONS: number;
  INITIAL: number;
  PITCH: number;
  LINEAR_DISTANCE_CLAMPED: number;
  ORIENTATION: number;
};
declare const fillEffectHelper: {
  clear: (_0?: any, _1?: any) => any;
  setSaturation: (_0?: any, _1?: any, _2?: any) => any;
  setBrightness: (_0?: any, _1?: any, _2?: any) => any;
  setMonotone: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  setDuotone: (_0?: any, _1?: any, _2?: any) => any;
  changeSaturation: (_0?: any, _1?: any, _2?: any) => any;
};
declare const inputNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const cloneArray: (_0?: any) => any;
declare const electricSkillMoveUtility: {
  createShockOverlay: (_0?: any, _1?: any, _2?: any) => any;
};
declare const inOutBounce: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const setfenv: (_0?: any) => any;
declare const OnlineSquad: {
  newWithPlayerOnlineLoanSquad: (_0?: any) => any;
  uncast: (_0?: any, _1?: any) => any;
  new: (_0?: any, _1?: any) => any;
  cast: (_0?: any, _1?: any) => any;
  newWithPlayerSquad: (_0?: any) => any;
  resolveOptionallyModifiedMonsterForEntry: (_0?: any, _1?: any) => any;
};
declare const MonsterSpriteSkin: any;
declare const EOSHelper: {
  getAuthIdToken: (_0?: any, _1?: any, _2?: any) => any;
  isLoggedOn: (_0?: any) => any;
};
declare const coronabaselib: {
  print: (_0?: any) => any;
};
declare const monsterHitboxConfigList: any;
declare const monsterOnlineAvatarConfigList: any;
declare const fileHelper: {
  saveToSystemResources: (_0?: any, _1?: any, _2?: any) => any;
  getFiles: (_0?: any, _1?: any, _2?: any) => any;
  getFilesInResourcesRecursive: (_0?: any, _1?: any) => any;
  saveLuaToUserResources: (_0?: any, _1?: any, _2?: any) => any;
  remove: (_0?: any, _1?: any, _2?: any) => any;
  getFilesInResources: (_0?: any, _1?: any) => any;
  loadFromTemporaryResources: (_0?: any, _1?: any) => any;
  saveToUserResources: (_0?: any, _1?: any, _2?: any) => any;
  loadFromResources: (_0?: any, _1?: any) => any;
  removeFromTemporaryResources: (_0?: any, _1?: any) => any;
  loadJsonFromResources: (_0?: any, _1?: any) => any;
  saveLuaToTemporaryResources: (_0?: any, _1?: any, _2?: any) => any;
  saveTo: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  loadXmlFromUserResources: (_0?: any, _1?: any) => any;
  saveJsonToUserResources: (_0?: any, _1?: any, _2?: any) => any;
  loadXmlFromResources: (_0?: any, _1?: any) => any;
  loadJsonFromUserResources: (_0?: any, _1?: any) => any;
  getFilesRecursive: (_0?: any, _1?: any, _2?: any) => any;
  loadFromUserResources: (_0?: any, _1?: any) => any;
  createFolder: (_0?: any, _1?: any) => any;
  exists: (_0?: any, _1?: any, _2?: any) => any;
  saveToTemporaryResources: (_0?: any, _1?: any, _2?: any) => any;
};
declare const eventManager: {
  listenOnce: (...args: any[]) => any;
  listenWithWrapper: (...args: any[]) => any;
  dispatch: (...args: any[]) => any;
  listen: (...args: any[]) => any;
  stopListening: (...args: any[]) => any;
  listenUntilObjectDestroyed: (...args: any[]) => any;
};
declare const OnlineInventoryServer: {
  getInventory: (_0?: any, _1?: any, _2?: any) => any;
  redeemShopReceipt: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const worldRain: {
  createInstance: (_0?: any, _1?: any, _2?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const inOutQuint: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const OnlineRankingData: {
  ensureSeason: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  ensureActiveSeasonAndRankFor: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getKnownSeasonTierAndDivisionForCumulativeDivision: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  getMinimumRatingForTier: (_0?: any, _1?: any, _2?: any) => any;
  debugSetActiveSeasonRank: (_0?: any, _1?: any, _2?: any) => any;
  debugSetKnownSeason: (_0?: any) => any;
  ensureActiveSeasonAndRankForOpponent: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getQueueTypeForMatchmakingMode: (_0?: any, _1?: any) => any;
  debugSetActiveSeasonRanks: (_0?: any) => any;
  getActiveSeasonRank: (_0?: any, _1?: any) => any;
  setKnownSeasonAndStoreInCache: (_0?: any, _1?: any, _2?: any) => any;
  createDebugRankForRating: (_0?: any, _1?: any) => any;
  setActiveSeasonRank: (_0?: any, _1?: any, _2?: any) => any;
  clearKnownSeasonCache: (_0?: any) => any;
  getActiveSeasonRankForLastSelectedOnlineRankedMatchmakingMode: (
    _0?: any,
  ) => any;
  getKnownSeason: (_0?: any, _1?: any) => any;
  ensureActiveSeasonAndRank: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const soundHelper: {
  playStream: (...args: any[]) => any;
  loadSound: (_0?: any, _1?: any, _2?: any) => any;
  getMusicVolumeModifier: (_0?: any) => any;
  stopMusic: (_0?: any, _1?: any, _2?: any) => any;
  playIntro: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  stopSound: (_0?: any, _1?: any, _2?: any) => any;
  unloadSound: (_0?: any, _1?: any) => any;
  pauseMusic: (_0?: any, _1?: any) => any;
  fadeMusicVolumeModifier: (_0?: any, _1?: any, _2?: any) => any;
  playLoopingStream: (...args: any[]) => any;
  destroySounds: (_0?: any, _1?: any) => any;
  loadStream: (_0?: any, _1?: any) => any;
  init: (_0?: any, _1?: any) => any;
  stopMusicIfPlaying: (_0?: any, _1?: any, _2?: any) => any;
  resumeSounds: (_0?: any, _1?: any) => any;
  unloadStream: (_0?: any, _1?: any) => any;
  playSound: (...args: any[]) => any;
  setChannelVolume: (_0?: any, _1?: any, _2?: any) => any;
  getCurrentMusicPath: (_0?: any) => any;
  setMusicVolumeModifier: (_0?: any, _1?: any) => any;
  setMusicVolume: (_0?: any, _1?: any) => any;
  resumeMusic: (_0?: any, _1?: any) => any;
  setSoundVolume: (_0?: any, _1?: any) => any;
  playMusic: (_0?: any, _1?: any, _2?: any) => any;
  pauseSounds: (_0?: any, _1?: any) => any;
};
declare const iceCaveUtility: {
  createOptionalFloorQuestionCutscene: (_0?: any, _1?: any) => any;
};
declare const worldHelper: {
  createInstance: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const Type: {
  electric: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  values: any;
  ghost: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  poison: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  magic: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  cut: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  water: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  darkMagic: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  normal: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  valuesForMonsters: any;
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  heavy: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  foul: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  air: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  fire: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  sand: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
  ice: {
    getLocalisedValue: (_0?: any) => any;
    isVeryEffectiveAgainst: (_0?: any, _1?: any) => any;
    isVulnerableTo: (_0?: any, _1?: any) => any;
    isResistantTo: (_0?: any, _1?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    getTypeEffectivenessTypes: (_0?: any, _1?: any) => any;
    veryEffectiveAgainstTypes: (_0?: any) => any;
    notEffectiveAgainstTypes: (_0?: any) => any;
    vulnerableToTypes: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isSkillOnly: (_0?: any) => any;
    isDarkMagic: (_0?: any) => any;
    getTypeMultiplierAgainst: (_0?: any, _1?: any) => any;
    isNotEffectiveAgainst: (_0?: any, _1?: any) => any;
    getTypeEffectivenessAgainst: (_0?: any, _1?: any) => any;
    createCornerIcon: (_0?: any, _1?: any) => any;
    resistantToTypes: (_0?: any) => any;
  };
};
declare const lpeg: {
  C: (_0?: any) => any;
  B: (_0?: any) => any;
  print: (_0?: any) => any;
  match: (_0?: any) => any;
  locale: (_0?: any) => any;
  Cg: (_0?: any) => any;
  Cc: (_0?: any) => any;
  Cb: (_0?: any) => any;
  Cmt: (_0?: any) => any;
  Carg: (_0?: any) => any;
  type: (_0?: any) => any;
  S: (_0?: any) => any;
  R: (_0?: any) => any;
  V: (_0?: any) => any;
  Cf: (_0?: any) => any;
  version: (_0?: any) => any;
  P: (_0?: any) => any;
  Ct: (_0?: any) => any;
  Cp: (_0?: any) => any;
  Cs: (_0?: any) => any;
  setmaxstack: (_0?: any) => any;
};
declare const spinnerSwapWorldEffect: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const textureCacheHelper: {
  releaseTextures: (_0?: any, _1?: any) => any;
  getOrCreateImageTexture: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const monsterGlowSpriteList: {
  TITAN_FIRE_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CRAB_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FISH_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FUSEBOX_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_SLIME_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_BEAR_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: any;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_WOLF_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_WOLF_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FISH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_TURTLE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_TOUCAN_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_front: {
    path: string;
    width: number;
    timePerFrame: any;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_TOUCAN_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_MOLE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_MAGMA_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_SLIME_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CRAB_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_BULL_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_SAND_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_GHOST_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FISH_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_GOLEM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: any;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_TURTLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ELECTRIC_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_TURTLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_BEAR_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_WATER_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_ADDER_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_BEAST_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_RODENT_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FISH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FROG_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
};
declare const milestoneList: any;
declare const systemHelper: {
  getPathForResourceDirectory: (_0?: any) => any;
  getPathForTemporaryDirectory: (_0?: any) => any;
  getPathForBaseDir: (_0?: any, _1?: any) => any;
};
declare const easing: {
  outBounce: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inQuart: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutElastic: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  outInExpo: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInBack: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  outBack: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  inOutCubic: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutQuint: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outQuad: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutCirc: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutQuart: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outSine: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outQuint: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInBounce: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inQuad: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outExpo: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outCubic: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inCubic: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutBack: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  inQuint: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outCirc: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInQuart: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inExpo: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outQuart: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inCirc: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutExpo: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInCirc: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inElastic: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  outElastic: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  outInSine: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInQuint: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutSine: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inBack: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  inOutBounce: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInElastic: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  linear: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inSine: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inOutQuad: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  outInCubic: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  continuousLoop: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  inBounce: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const inCubic: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const outInBackCustom: (_0?: any) => any;
declare const RandomizeTrainerMonstersMode: {
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  replaceWithSameType: {
    isDisabled: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithSameType: (_0?: any) => any;
    isReplaceWithSimilarStats: (_0?: any) => any;
  };
  replaceWithSimilarStats: {
    isDisabled: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithSameType: (_0?: any) => any;
    isReplaceWithSimilarStats: (_0?: any) => any;
  };
  values: any;
  replaceWithAny: {
    isDisabled: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isReplaceWithAny: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isReplaceWithSameType: (_0?: any) => any;
    isReplaceWithSimilarStats: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  instanceOf: (_0?: any, _1?: any) => any;
};
declare const array: {
  previousOrLast: (_0?: any, _1?: any) => any;
  last: (_0?: any) => any;
  getIndexByFunction: (_0?: any, _1?: any) => any;
  groupBy: (_0?: any, _1?: any) => any;
  contains: (_0?: any, _1?: any) => any;
  count: (_0?: any, _1?: any) => any;
  average: (_0?: any, _1?: any) => any;
  filterToMissing: (_0?: any, _1?: any) => any;
  filter: (_0?: any, _1?: any) => any;
  without: (_0?: any, _1?: any) => any;
  roll: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mapToTableWithKey: (_0?: any, _1?: any) => any;
  removeOneFromStart: (_0?: any) => any;
  previousOrCurrent: (_0?: any, _1?: any) => any;
  sum: (_0?: any, _1?: any) => any;
  removeOneFromEnd: (_0?: any) => any;
  removeMultipleFromStart: (_0?: any, _1?: any) => any;
  getValueByFunction: (_0?: any, _1?: any) => any;
  flatMapDistinct: (_0?: any, _1?: any) => any;
  insert: (_0?: any, _1?: any, _2?: any) => any;
  findByFunctionReversed: (_0?: any, _1?: any) => any;
  forEachReversed: (_0?: any, _1?: any) => any;
  anyMatches: (_0?: any, _1?: any) => any;
  getByFunction: (_0?: any, _1?: any) => any;
  union: (...args: any[]) => any;
  findByFunctionWithIndex: (_0?: any, _1?: any) => any;
  concat: (_0?: any) => any;
  constructSequence: (_0?: any) => any;
  containsAll: (_0?: any, _1?: any) => any;
  removeSortedIndices: (_0?: any, _1?: any) => any;
  construct: (_0?: any, _1?: any) => any;
  removeUnsortedIndices: (_0?: any, _1?: any) => any;
  flattenRecursive: (_0?: any, _1?: any) => any;
  sortIncreasing: (_0?: any, _1?: any) => any;
  sortChildren: (_0?: any, _1?: any) => any;
  removeMultipleByFunction: (_0?: any, _1?: any) => any;
  tryGetRandom: (_0?: any) => any;
  constructByInLoop: (...args: any[]) => any;
  range: (_0?: any, _1?: any, _2?: any) => any;
  sortDecreasing: (_0?: any, _1?: any) => any;
  flatten: (_0?: any, _1?: any) => any;
  getByFunctionReversed: (_0?: any, _1?: any) => any;
  removeMultipleFromEnd: (_0?: any, _1?: any) => any;
  flattenDisplayGroupRecursive: (_0?: any, _1?: any) => any;
  countToTable: (_0?: any, _1?: any) => any;
  rangeFromEnd: (_0?: any, _1?: any) => any;
  map: (_0?: any, _1?: any) => any;
  flatMap: (_0?: any, _1?: any) => any;
  clear: (_0?: any) => any;
  swap: (_0?: any, _1?: any, _2?: any) => any;
  split: (_0?: any, _1?: any) => any;
  removeRandoms: (_0?: any, _1?: any) => any;
  filterIfNot: (_0?: any, _1?: any) => any;
  swapByIndex: (_0?: any, _1?: any, _2?: any) => any;
  processed: (_0?: any, _1?: any) => any;
  randomExcept: (_0?: any, _1?: any) => any;
  countByFunction: (_0?: any, _1?: any) => any;
  nextOrCurrent: (_0?: any, _1?: any) => any;
  findMaxIndex: (_0?: any, _1?: any) => any;
  constructByFunction: (_0?: any, _1?: any) => any;
  convertToSet: (_0?: any) => any;
  rangeUntilEnd: (_0?: any, _1?: any) => any;
  findIndexByFunction: (_0?: any, _1?: any) => any;
  add: (...args: any[]) => any;
  hardShuffled: (_0?: any) => any;
  mapToTableWithValue: (_0?: any, _1?: any) => any;
  addIfNotExists: (...args: any[]) => any;
  findMin: (_0?: any, _1?: any) => any;
  rollFromTotalWithNegatives: (_0?: any, _1?: any) => any;
  findValueByFunction: (_0?: any, _1?: any) => any;
  mapDistinct: (_0?: any, _1?: any) => any;
  reversed: (_0?: any) => any;
  toRandomizationTable: (_0?: any) => any;
  remove: (_0?: any, _1?: any) => any;
  findMaxInGroup: (_0?: any, _1?: any) => any;
  findMinValueInGroup: (_0?: any, _1?: any) => any;
  containsDuplicate: (_0?: any, _1?: any) => any;
  mapToTable: (_0?: any, _1?: any) => any;
  random: (_0?: any) => any;
  replaceByFunction: (_0?: any, _1?: any) => any;
  findMinIndex: (_0?: any, _1?: any) => any;
  mapWithNils: (_0?: any, _1?: any) => any;
  findByFunction: (_0?: any, _1?: any) => any;
  next: (_0?: any, _1?: any) => any;
  traverseUntilTrue: (_0?: any, _1?: any, _2?: any) => any;
  mapReversed: (_0?: any, _1?: any) => any;
  getByFunctionWithIndex: (_0?: any, _1?: any) => any;
  groupByChildren: (_0?: any, _1?: any) => any;
  maxn: (_0?: any) => any;
  findMaxValue: (_0?: any, _1?: any) => any;
  filterToMatching: (_0?: any, _1?: any) => any;
  sorted: (_0?: any, _1?: any) => any;
  noneMatches: (_0?: any, _1?: any) => any;
  indexOf: (_0?: any, _1?: any) => any;
  indexFromEnd: (_0?: any, _1?: any) => any;
  rollFromTotal: (_0?: any, _1?: any) => any;
  findValueByFunctionWithIndex: (_0?: any, _1?: any) => any;
  equals: (_0?: any, _1?: any) => any;
  findMinInGroup: (_0?: any, _1?: any) => any;
  equalValues: (_0?: any, _1?: any) => any;
  findIndexByFunctionReversed: (_0?: any, _1?: any) => any;
  rep: (_0?: any, _1?: any) => any;
  constructRange: (_0?: any, _1?: any) => any;
  removeByFunction: (_0?: any, _1?: any) => any;
  getIndexByFunctionReversed: (_0?: any, _1?: any) => any;
  shuffle: (_0?: any) => any;
  reduceStartingWithFirst: (_0?: any, _1?: any) => any;
  findMaxValueInGroup: (_0?: any, _1?: any) => any;
  shuffled: (_0?: any) => any;
  nextOrFirst: (_0?: any, _1?: any) => any;
  containsAny: (_0?: any, _1?: any) => any;
  removeMultiple: (_0?: any, _1?: any) => any;
  findMaxWithValue: (_0?: any, _1?: any) => any;
  sort: (_0?: any, _1?: any) => any;
  distinct: (_0?: any) => any;
  constructByFunctionWithNils: (_0?: any, _1?: any) => any;
  copy: (_0?: any) => any;
  findMax: (_0?: any, _1?: any) => any;
  flattenIncludingParentRecursive: (_0?: any, _1?: any) => any;
  forEach: (_0?: any, _1?: any) => any;
  mapToSet: (_0?: any, _1?: any) => any;
  indexOfChild: (_0?: any, _1?: any) => any;
  hardShuffle: (_0?: any) => any;
  allMatches: (_0?: any, _1?: any) => any;
  findMinValue: (_0?: any, _1?: any) => any;
  removeMultipleByFunctionRecursive: (_0?: any, _1?: any, _2?: any) => any;
  reduce: (_0?: any, _1?: any, _2?: any) => any;
  removeRandom: (_0?: any) => any;
};
declare const FruitGrowingPotList: any;
declare const catchableTrainerMonsterParticipant: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const innerTopBarMonstersStoredCounter: {
  new: (_0?: any) => any;
};
declare const Class: {
  new: (_0?: any) => any;
};
declare const orderedPairsNext: (_0?: any, _1?: any) => any;
declare const BattleEnvironment: {
  luxSolisRoute: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  electricTown: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  iceTown: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  oasisCave: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  powerTower: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  luxSolisTown: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  electricCave: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  dojo: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  pyramid: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  volcano: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  mescherRealm: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  values: any;
  amishTown: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  fireRoute: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  electricTitanArea: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  graveyardDimension: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  palace: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  graveyard: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  desertRoute: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  equilibrium: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  swampRoute: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  waterTitanTemple: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  waterTown: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  templeDungeon: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  iceCave: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
  ghostTitanArea: {
    createPreview: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getEncounterOverlayType: (_0?: any) => any;
    isUnlockedOnline: (_0?: any) => any;
    getEnvironment: (_0?: any) => any;
  };
};
declare const OnlineAuthenticationProvider: {
  iOSDevice: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  values: any;
  nintendo: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  gog: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  classes: {
    Enum: boolean;
  };
  none: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  androidDevice: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  epic: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  dev: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  steam: {
    getValue: (_0?: any) => any;
    getRequestData: (_0?: any, _1?: any) => any;
    getAvailableIdentityProviders: (_0?: any) => any;
    getEndpoint: (_0?: any) => any;
  };
};
declare const inExpo: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
declare const croppedDisplayObjectBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const debugSkillButtonConfigScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const languageHelper: {
  setSelectedLanguageCode: (_0?: any, _1?: any) => any;
  getTranslationsForSelectedLanguageCode: (_0?: any) => any;
  getTranslationInSelectedLanguageCode: (_0?: any, _1?: any) => any;
  isGlobalPlaceholderCharacter: (_0?: any, _1?: any) => any;
  getGuessedKeyboardLayout: (_0?: any) => any;
  tryGetAutoSelectedLanguage: (_0?: any) => any;
  addEnglishJargonKeyFunction: (_0?: any, _1?: any) => any;
  isPropertyFileAdded: (_0?: any, _1?: any) => any;
  insertParams: (_0?: any, _1?: any, _2?: any) => any;
  setIsEnglishJargonEnabled: (_0?: any, _1?: any) => any;
  addPropertyFiles: (...args: any[]) => any;
  init: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  removePropertyFiles: (...args: any[]) => any;
  addPlaceholderFunction: (_0?: any, _1?: any, _2?: any) => any;
  addEnglishJargonKey: (_0?: any, _1?: any) => any;
  forEachLanguageCode: (_0?: any, _1?: any) => any;
  getLanguageCodes: (_0?: any) => any;
  getTranslation: (_0?: any, _1?: any, _2?: any) => any;
  selectedLanguageCodeUsesPronouns: (_0?: any) => any;
  replacePlaceholders: (_0?: any, _1?: any, _2?: any) => any;
  isParameterCharacter: (_0?: any, _1?: any) => any;
  getTranslations: (_0?: any, _1?: any) => any;
  selectedLanguageCodeHasNoSpaces: (_0?: any) => any;
  getSelectedLanguageCode: (_0?: any) => any;
};
declare const bit: {
  band: (_0?: any) => any;
  rshift: (_0?: any) => any;
  bor: (_0?: any) => any;
  bnot: (_0?: any) => any;
  bswap: (_0?: any) => any;
  bxor: (_0?: any) => any;
  tobit: (_0?: any) => any;
  arshift: (_0?: any) => any;
  lshift: (_0?: any) => any;
  tohex: (_0?: any) => any;
  rol: (_0?: any) => any;
  ror: (_0?: any) => any;
};
declare const battleEffectUtility: {
  shouldBlockCondition: (_0?: any, _1?: any, _2?: any) => any;
  shouldBlockFruitConsumption: (_0?: any, _1?: any, _2?: any) => any;
  onBeforeMonsterSpriteFainted: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mutateSkillAccuracy: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  shouldShowOpponentHoldItem: (_0?: any) => any;
  shouldBlockSkill: (_0?: any, _1?: any, _2?: any) => any;
  onAfterFruitConsumed: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  shouldShowHiddenItemSparkle: (_0?: any) => any;
  onBeforePlayerFightButtonMessage: (_0?: any) => any;
  mutateXpEarned: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  shouldBlockRecoilDamage: (_0?: any, _1?: any, _2?: any) => any;
  onPlayerStepped: (_0?: any) => any;
  mutateRecoverEnergyConsumableEffect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  shouldAdaptToPositiveWeatherEffect: (_0?: any, _1?: any, _2?: any) => any;
  onAfterRecoverHealthInBattle: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onAfterSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
  ) => any;
  mutateRecoverHealthConsumableEffect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  shouldBlockWeatherEffectRemoval: (_0?: any, _1?: any) => any;
  mutateAIScore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onAfterApplyEntryHazard: (_0?: any, _1?: any, _2?: any) => any;
  onBeforeRound: (_0?: any, _1?: any) => any;
  onAfterParticipantWon: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  shouldBlockWeatherEffectEffect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  onAfterPartialSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  mutateAmountOfMonsterRolls: (_0?: any) => any;
  shouldBlockWeatherEffect: (_0?: any, _1?: any) => any;
  onEnterBattle: (_0?: any, _1?: any) => any;
  shouldBlockEntryHazard: (_0?: any, _1?: any) => any;
  mutateStat: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mutateAmountOfPotentialRolls: (_0?: any) => any;
  onBeforeApplyEntryHazardEffect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  shouldBlockTrainerParticipantStatus: (_0?: any, _1?: any, _2?: any) => any;
  mutateEnergyCost: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onAfterAfterRound: (_0?: any, _1?: any) => any;
  shouldForceCatch: (_0?: any, _1?: any) => any;
  onAfterMonsterSpriteSpawned: (_0?: any, _1?: any, _2?: any) => any;
  onAfterDamageInBattle: (_0?: any, _1?: any, _2?: any) => any;
  shouldPreventMakingContact: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onBeforeApplyWeatherEffect: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  registerBattleEffect: (_0?: any, _1?: any) => any;
  getBattleEffects: (...args: any[]) => any;
  onAfterMonsterSpriteUnspawned: (_0?: any, _1?: any, _2?: any) => any;
  onBeforeApplyMonsterSpriteStatus: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  mutateRecoilDamage: (_0?: any, _1?: any, _2?: any) => any;
  mutateHeal: (_0?: any, _1?: any, _2?: any) => any;
  onAfterRound: (_0?: any, _1?: any) => any;
  onAfterUsableItemUsed: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  shouldBlockMonsterSpriteStatus: (_0?: any, _1?: any, _2?: any) => any;
  mutateStatBoostStage: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setMainBattleEffects: (_0?: any, _1?: any) => any;
  getDamageRandomizer: (_0?: any) => any;
  shouldShowBigWorldDarknessFlashlight: (_0?: any) => any;
  onAfterApplyBattleStatus: (_0?: any, _1?: any, _2?: any) => any;
  mutateShouldMissChance: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  onSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  mutateSkillDamage: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  onAfterParticipantEscaped: (_0?: any, _1?: any, _2?: any) => any;
  shouldCriticalHit: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mutateDamage: (_0?: any, _1?: any, _2?: any) => any;
  mutateBaseStat: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onBeforePlayerInventoryButtonMessage: (_0?: any) => any;
  onBeforePrepareMonsterSprite: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  onAfterApplyWeatherEffect: (_0?: any, _1?: any, _2?: any) => any;
  onBeforePlayerEscapeButtonMessage: (_0?: any) => any;
  getMainActionButtonReplacement: (_0?: any, _1?: any) => any;
  onBeforeSpawnTrainerMonsterSprite: (_0?: any, _1?: any, _2?: any) => any;
  onBeforeEscapeMoveSuccess: (_0?: any, _1?: any, _2?: any) => any;
  shouldBlockForceRemove: (_0?: any, _1?: any) => any;
  onAfterApplyMonsterSpriteStatus: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  onAfterMonsterSpritesRemovedFromBattle: (_0?: any, _1?: any, _2?: any) => any;
  onAfterTurn: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onBeforeUseItemMessage: (_0?: any, _1?: any, _2?: any) => any;
  onBeforePlayerRestButtonMessage: (_0?: any) => any;
  speedPriority: (_0?: any, _1?: any, _2?: any) => any;
  unregisterBattleEffect: (_0?: any, _1?: any) => any;
  mutateTrainerBattleGoldBounty: (_0?: any, _1?: any, _2?: any) => any;
  mutateWeatherEffectTurns: (_0?: any, _1?: any, _2?: any) => any;
  onAfterApplyTrainerParticipantStatus: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  mutateStatBoostStatus: (_0?: any, _1?: any) => any;
  mutateZoneEncounter: (_0?: any, _1?: any) => any;
  shouldShowWorldDarknessFlashlight: (_0?: any) => any;
  mutateMovePriority: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  shouldMiss: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mutateSkillStrikes: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mutateRelativeDamage: (_0?: any, _1?: any, _2?: any) => any;
  shouldBlockSpawn: (_0?: any, _1?: any) => any;
  mutateSkillDamageModifier: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  onBeforePlayerSwitchMonsterButtonMessage: (_0?: any) => any;
  mutateTraitEnhancementStage: (_0?: any, _1?: any, _2?: any) => any;
  onAfterMonsterUsableItemUsed: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  mutateGoldCost: (_0?: any, _1?: any) => any;
  onBeforePlayerSquadButtonMessage: (_0?: any) => any;
  mutateAfterParticipantWonEnergy: (_0?: any, _1?: any, _2?: any) => any;
  mutateSkillPower: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  onBeforeTurn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  shouldAlwaysSucceedEscape: (_0?: any, _1?: any) => any;
  shouldBlockBattleStatus: (_0?: any, _1?: any) => any;
  shouldBlockZoneEncounter: (_0?: any, _1?: any) => any;
};
declare const UIBottomBar: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const rectHelper: {
  newMultiColorLineRectWithoutCorners: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newLineRectWithoutCorners: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newRectWithoutCorners: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newRectObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newDot: (_0?: any, _1?: any, _2?: any) => any;
  newMultiColorLineRect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newFullScreenRect: (_0?: any, _1?: any, _2?: any) => any;
  newLineRectWithoutDoubleCorners: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newBigDot: (_0?: any, _1?: any, _2?: any) => any;
  newStrikethroughForOutlinedText: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  newFullScreenContainerObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newContainer: (_0?: any, _1?: any, _2?: any) => any;
  newFullScreenRectObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newContainerObject: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newRectWithoutDoubleCorners: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
  ) => any;
  newRect: (_0?: any, _1?: any, _2?: any) => any;
  newLineRectProgressBar: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  newFullScreenContainer: (_0?: any, _1?: any, _2?: any) => any;
  newLineRect: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  newLine: (_0?: any, _1?: any, _2?: any) => any;
};
declare const timeHelper: {
  startOfCurrentHour: (_0?: any) => any;
  startOfCurrentDay: (_0?: any) => any;
  startOfMinuteInterval: (_0?: any, _1?: any) => any;
  isBefore: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  isAfter: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  startOfCurrentMinute: (_0?: any) => any;
};
declare const inCirc: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
declare const monsterBorderSpriteList: {
  TITAN_FIRE_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CRAB_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FISH_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FUSEBOX_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_SLIME_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_BEAR_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: any;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_WOLF_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_WOLF_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FISH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_TURTLE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_TOUCAN_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_front: {
    path: string;
    width: number;
    timePerFrame: any;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_TOUCAN_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_MOLE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_MAGMA_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CHERUBIM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_SLIME_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_PHOENIX_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CAT_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_CRAB_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  FIRE_BULL_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  GHOST_CAT_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_TURTLE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_SAND_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_PHOENIX_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ICE_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OCTO_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_CHERUBIM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_2_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_GOLEM_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ICE_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_GHOST_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FISH_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_SLIME_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CROW_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_GOLEM_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: any;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_TURTLE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_OROCHI_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_BEETLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_ELECTRIC_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_TURTLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_BULL_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_CRAB_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_KRAKEN_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_BEAR_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  TITAN_WATER_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_CERBERUS_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_MOTH_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_WORM_3_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_ADDER_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_BEAST_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CHIMAERA_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_MOLE_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_TOUCAN_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_TIGER_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_darkMagic_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_SKELETON_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  GHOST_WOLF_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CROW_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SWAMP_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_RODENT_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_MAGMA_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_CREATURE_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ICE_MOTH_3_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_FROG_3_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_OOZE_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_GOLEM_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_BEAST_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_FIREFLY_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_CRAB_2_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_ADDER_2_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FISH_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_BEAR_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  ELECTRIC_TIGER_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ICE_SNOWBALL_1_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  SAND_CRAB_1_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  ELECTRIC_CLOUD_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_RODENT_2_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_SHARK_2_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  WATER_JELLYFISH_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  NORMAL_CYBORG_3_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_WORM_2_darkMagic_front: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_SAND_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: {
    width: number;
    path: string;
    border: number;
    height: number;
    timePerFrame: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  FIRE_TURTLE_1_back: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  SAND_SKELETON_3_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
  WATER_FROG_1_front: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    border: number;
    amount_frames: number;
  };
};
declare const TitanRushDifficulty: {
  hard: {
    getTitanLevel: (_0?: any) => any;
    mayHaveDuplicateHoldItems: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getGoldMultiplier: (_0?: any) => any;
    mayHaveDuplicateSpecies: (_0?: any) => any;
    mayUseItemsBetweenBattles: (_0?: any) => any;
  };
  values: any;
  instanceOf: (_0?: any, _1?: any) => any;
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  normal: {
    getTitanLevel: (_0?: any) => any;
    mayHaveDuplicateHoldItems: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getGoldMultiplier: (_0?: any) => any;
    mayHaveDuplicateSpecies: (_0?: any) => any;
    mayUseItemsBetweenBattles: (_0?: any) => any;
  };
  insane: {
    getTitanLevel: (_0?: any) => any;
    mayHaveDuplicateHoldItems: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getGoldMultiplier: (_0?: any) => any;
    mayHaveDuplicateSpecies: (_0?: any) => any;
    mayUseItemsBetweenBattles: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  easy: {
    getTitanLevel: (_0?: any) => any;
    mayHaveDuplicateHoldItems: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    getGoldMultiplier: (_0?: any) => any;
    mayHaveDuplicateSpecies: (_0?: any) => any;
    mayUseItemsBetweenBattles: (_0?: any) => any;
  };
};
declare const OnlineIdentityProvider: {
  Dev: {
    requiresWebViewSignIn: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    executeNativeSignIn: (_0?: any, _1?: any, _2?: any) => any;
    getEndpoint: (_0?: any) => any;
    requiresNativeSignIn: (_0?: any) => any;
  };
  values: any;
  Nintendo: {
    requiresWebViewSignIn: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    executeNativeSignIn: (_0?: any, _1?: any, _2?: any) => any;
    getEndpoint: (_0?: any) => any;
    requiresNativeSignIn: (_0?: any) => any;
  };
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  Google: {
    requiresWebViewSignIn: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    executeNativeSignIn: (_0?: any, _1?: any, _2?: any) => any;
    getEndpoint: (_0?: any) => any;
    requiresNativeSignIn: (_0?: any) => any;
  };
  Apple: {
    requiresWebViewSignIn: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    executeNativeSignIn: (_0?: any, _1?: any, _2?: any) => any;
    getEndpoint: (_0?: any) => any;
    requiresNativeSignIn: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  Steam: {
    requiresWebViewSignIn: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    executeNativeSignIn: (_0?: any, _1?: any, _2?: any) => any;
    getEndpoint: (_0?: any) => any;
    requiresNativeSignIn: (_0?: any) => any;
  };
};
declare const OnlineBattleSocket: {
  sendSubmitRoundActionCommand: (_0?: any, _1?: any) => any;
  getWebsocket: (_0?: any) => any;
  sendJoinMatchRequest: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  setOnRoundActionProposedEvent: (_0?: any, _1?: any) => any;
  sendReadyToStartNextRoundSignal: (_0?: any, _1?: any, _2?: any) => any;
  sendRoundPreparationReadySignal: (_0?: any, _1?: any) => any;
  sendRoundReadySignal: (_0?: any, _1?: any) => any;
  sendReconnectToMatchRequest: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  matchStateStringTraitMap: any;
  sendReadyToStartMatchSignal: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setOnMatchEndedEvent: (_0?: any, _1?: any) => any;
  disconnect: (_0?: any) => any;
  sendSyncTimeRequest: (_0?: any, _1?: any, _2?: any) => any;
  sendReadySignal: (_0?: any) => any;
  matchStateStringSkillMap: any;
  matchStateStringHoldItemMap: any;
  connect: (_0?: any, _1?: any, _2?: any) => any;
};
declare const gridNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const innerTopBarMonstersOwnedCounter: {
  new: (_0?: any) => any;
};
declare const inOutCirc: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const displayGroups: {
  overlay: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  battle: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  titleScreen: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  aboveOverlay: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  menu: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  world: {
    map: any;
    _class: any;
    interface: any;
    worldOverlay: any;
    _proxy: any;
    isDisplayGroup: boolean;
    betweenMapAndInterface: any;
    aboveInterface: any;
  };
};
declare const innerTopBarTitle: {
  getOrCreateInstance: (_0?: any, _1?: any) => any;
  createInstance: (_0?: any, _1?: any) => any;
};
declare const SilenceableMessagePopup: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const shockConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const inQuad: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
declare const outerTopBarQuitButtonBuilder: {
  new: (_0?: any) => any;
};
declare const sleepable: {
  wrap: (_0?: any, _1?: any) => any;
  runner: (...args: any[]) => any;
  run: (_0?: any, _1?: any) => any;
  new: (_0?: any, _1?: any) => any;
};
declare const KeyboardKey: {
  newLocalised: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const hazyConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const newClass: (_0?: any, _1?: any) => any;
declare const execute: (_0?: any) => any;
declare const steps: (_0?: any) => any;
declare const playerInventory: {
  removePersistedItem: (_0?: any, _1?: any) => any;
  removeAllOfItem: (_0?: any, _1?: any) => any;
  getAmount: (_0?: any, _1?: any) => any;
  destroy: (_0?: any) => any;
  getItemArrayByFilter: (_0?: any, _1?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  getItems: (_0?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getPersistedItem: (_0?: any, _1?: any) => any;
  getRestrictedAmount: (_0?: any, _1?: any) => any;
  addItem: (_0?: any, _1?: any, _2?: any) => any;
  getItemArray: (_0?: any) => any;
  getItemArrayByInstanceOf: (_0?: any, _1?: any) => any;
  removeItem: (_0?: any, _1?: any, _2?: any) => any;
  persistItem: (_0?: any, _1?: any, _2?: any) => any;
  get: (_0?: any) => any;
};
declare const spikeTrapEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const outStr: (_0?: any) => any;
declare const playerQuests: {
  isCompleted: (_0?: any, _1?: any, _2?: any) => any;
  getAmountOfChaptersCompleted: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  complete: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  debugSetInProgress: (_0?: any, _1?: any, _2?: any) => any;
  uncomplete: (_0?: any, _1?: any, _2?: any) => any;
  isInProgress: (_0?: any, _1?: any, _2?: any) => any;
  createQuestCharacterSprite: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  debugSetCompleted: (_0?: any, _1?: any, _2?: any) => any;
  destroy: (_0?: any) => any;
  isStarted: (_0?: any, _1?: any, _2?: any) => any;
  getQuestDescription: (_0?: any, _1?: any, _2?: any) => any;
  getCompletedQuests: (_0?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  unstart: (_0?: any, _1?: any, _2?: any) => any;
  start: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getQuestName: (_0?: any, _1?: any) => any;
  getCurrentChapter: (_0?: any, _1?: any) => any;
  getActiveQuests: (_0?: any) => any;
};
declare const abc: () => any;
declare const battleHelper: {
  getBattleCenterOffset: (_0?: any) => any;
  getIndexFromLeft: (_0?: any, _1?: any) => any;
};
declare const lastStandStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const blockSkillStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const darkCoatStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const specialEventHelper: {
  isAprilFoolsDay: (_0?: any) => any;
  isNewYear: (_0?: any) => any;
  isThanksgivingDay: (_0?: any) => any;
  isEaster: (_0?: any) => any;
  isValentinesDay: (_0?: any) => any;
  isHalloween: (_0?: any) => any;
  isChristmas: (_0?: any) => any;
  isSaintPatricksDay: (_0?: any) => any;
};
declare const bleedingStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const slideViewOverlayBuilder: {
  new: (_0?: any) => any;
};
declare const potentialRerollWorldEffect: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const cutsceneHelper: {
  addGlobalCutscene: (_0?: any, _1?: any, _2?: any) => any;
  initCutscenesForMap: (_0?: any, _1?: any) => any;
  loadCutscene: (...args: any[]) => any;
  loadOptionalCutsceneWithOnComplete: (...args: any[]) => any;
  initFunctionsForMap: (_0?: any, _1?: any) => any;
  loadFunction: (...args: any[]) => any;
  loadCutsceneWithOnComplete: (...args: any[]) => any;
  hasCutscene: (_0?: any, _1?: any) => any;
  runCutscene: (...args: any[]) => any;
  loadCutsceneWithOnSkipOrContinue: (...args: any[]) => any;
  loadOptionalCutsceneWithSkipOrContinue: (...args: any[]) => any;
};
declare const characterList: {
  getCharacters: (_0?: any) => any;
  getCharacterConfigFor: (_0?: any, _1?: any) => any;
  getSpeakerFor: (_0?: any, _1?: any) => any;
  getNameFor: (_0?: any, _1?: any) => any;
};
declare const offlinePlayerTrainerParticipant: {
  new: (_0?: any) => any;
};
declare const chargingStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const onlinePlayerTrainerParticipant: {
  new: (_0?: any, _1?: any) => any;
};
declare const battleAI: {
  getStrengthAgainstOpponents: (_0?: any, _1?: any) => any;
};
declare const serverSettings: {
  server_userblob: string;
  socket_match_state_mediator: string;
  server_ranking: string;
  server_inventory: string;
  server_dailyMilestone: string;
  server_profile: string;
  server_authentication: string;
  socket_matchmaking: string;
  server_shop: string;
};
declare const debugHelper: {
  disableDebugStats: (_0?: any) => any;
  makeDraggable: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getOverrideObjectWithEmptyFunctions: (_0?: any) => any;
  getHugeMemoryObject: (_0?: any) => any;
  compareExecutionTime: (...args: any[]) => any;
  enableDebugStats: (_0?: any) => any;
  measureExcutionTime: (_0?: any, _1?: any, _2?: any) => any;
  showAlert: (_0?: any, _1?: any) => any;
  printTextureMemoryUsage: (_0?: any) => any;
  printMemoryUsage: (_0?: any) => any;
  tryBlendModes: (_0?: any, _1?: any, _2?: any) => any;
  sleep: (_0?: any, _1?: any) => any;
  sleepOnceEvery: (_0?: any, _1?: any, _2?: any) => any;
};
declare const rateAppHelper: {
  init: (_0?: any) => any;
  tryShowPopup: (_0?: any) => any;
};
declare const fireSkillUtility: {
  spawnExplosionSprite: (_0?: any, _1?: any) => any;
};
declare const rechargeMove: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const vibrateHelper: {
  vibrate: (_0?: any) => any;
};
declare const OnlineSelectMonsterOrderScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const tiledLayers: {
  highest: (_0?: any) => any;
  highestLevel: (_0?: any, _1?: any) => any;
  highestFloor: (_0?: any, _1?: any) => any;
  highestAbovePlayer: (_0?: any, _1?: any) => any;
  highestName: (_0?: any) => any;
  highestNonStickToScreenName: (_0?: any, _1?: any) => any;
  highestAboveFloor: (_0?: any, _1?: any) => any;
  highestNonStickToScreen: (_0?: any, _1?: any) => any;
  highestFloorName: (_0?: any, _1?: any) => any;
  highestAboveFloorName: (_0?: any, _1?: any) => any;
  highestAbovePlayerName: (_0?: any, _1?: any) => any;
  highestLevelName: (_0?: any, _1?: any) => any;
};
declare const twoFrameImageBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newObject: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const nextFrameFunction: (_0?: any) => any;
declare const SaveslotFacade: {
  delete: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  getCachedSaveslotClustersForDeviceId: (_0?: any) => any;
  save: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  getSaveslotClustersByDeviceId: (_0?: any, _1?: any) => any;
  setCachedSaveslotClustersForDeviceId: (_0?: any, _1?: any) => any;
};
declare const negate: (_0?: any) => any;
declare const mescherRealmUtility: {
  enableExtensionsForInbetweenRealm: (_0?: any, _1?: any) => any;
  enableExtensionsForMaze: (_0?: any, _1?: any, _2?: any) => any;
  enableExtensionsForFIND_MESCHER_REALM_SOULS: (_0?: any, _1?: any) => any;
  startHallucination: (_0?: any, _1?: any, _2?: any) => any;
};
declare const usableItemMove: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const monsterShadowOffsetList: {
  TITAN_FIRE_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_2_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_1_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_1_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_2_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_WATER_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_3_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_2_back: {
    xOffset: number;
    yOffset: number;
  };
  FUSEBOX_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_WATER_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_1_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_1_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_1_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_3_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_1_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_1_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_2_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_2_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_3_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_3_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_2_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_2_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_1_front: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_ICE_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_1_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_2_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_1_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_1_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_3_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_1_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_3_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_3_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_2_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_2_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_3_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_1_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_3_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_1_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CAT_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_1_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_3_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_2_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_SAND_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_GHOST_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_1_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_PHOENIX_1_front: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_ICE_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_3_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OCTO_2_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_3_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_CHERUBIM_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_2_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ICE_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_3_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_1_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_1_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_FIRE_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_SAND_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_1_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_1_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_2_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_2_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_GOLEM_1_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ICE_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_2_front: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_GHOST_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_1_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_SLIME_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_1_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_3_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_2_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_1_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_3_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_ELECTRIC_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_3_back: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_OROCHI_2_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_BEETLE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_1_back: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_ELECTRIC_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_BULL_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_1_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_1_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_2_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_KRAKEN_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_2_back: {
    xOffset: number;
    yOffset: number;
  };
  TITAN_WATER_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CERBERUS_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_3_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_3_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_2_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CHIMAERA_1_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_MOLE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_TOUCAN_2_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_3_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_1_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_2_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_1_front: {
    xOffset: number;
    yOffset: number;
  };
  GHOST_WOLF_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CROW_3_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SWAMP_2_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_3_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_3_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_3_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_2_front: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_MAGMA_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_CREATURE_3_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ICE_MOTH_3_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_OOZE_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_GOLEM_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_BEAST_1_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_1_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_3_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_FIREFLY_3_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_CRAB_2_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_ADDER_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FISH_2_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_BEAR_1_back: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_TIGER_2_front: {
    xOffset: number;
    yOffset: number;
  };
  ICE_SNOWBALL_1_back: {
    xOffset: number;
    yOffset: number;
  };
  WATER_SHARK_2_front: {
    xOffset: number;
    yOffset: number;
  };
  SAND_CRAB_1_front: {
    xOffset: number;
    yOffset: number;
  };
  ELECTRIC_CLOUD_2_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_TURTLE_1_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_RODENT_2_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_JELLYFISH_3_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_CYBORG_3_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_WORM_2_darkMagic_front: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_SAND_back: {
    xOffset: number;
    yOffset: number;
  };
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: {
    xOffset: number;
    yOffset: number;
  };
  FIRE_TURTLE_1_back: {
    xOffset: number;
    yOffset: number;
  };
  SAND_SKELETON_3_front: {
    xOffset: number;
    yOffset: number;
  };
  WATER_FROG_1_front: {
    xOffset: number;
    yOffset: number;
  };
};
declare const LocalisableEnum: {
  new: (_0?: any, _1?: any) => any;
};
declare const blockHealStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const plugin_luasec_ssl: {
  core: {
    setmethod: (_0?: any) => any;
    info: (_0?: any) => any;
    invalidfd: number;
    copyright: (_0?: any) => any;
    setfd: (_0?: any) => any;
    create: (_0?: any) => any;
    compression: (_0?: any) => any;
  };
  context: {
    checkkey: (_0?: any) => any;
    locations: (_0?: any) => any;
    setcurve: (_0?: any) => any;
    setverify: (_0?: any) => any;
    create: (_0?: any) => any;
    loadcert: (_0?: any) => any;
    loadkey: (_0?: any) => any;
    setcipher: (_0?: any) => any;
    setdepth: (_0?: any) => any;
    setdhparam: (_0?: any) => any;
    setoptions: (_0?: any) => any;
    setmode: (_0?: any) => any;
  };
  x509: {
    load: (_0?: any) => any;
  };
};
declare const nineFrameImageBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const inOutBack: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
  _5?: any,
) => any;
declare const emojiBuilder: {
  sleep: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  dizzy: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  smile: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  angry1: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  chuckle: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  angel: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  disappointed: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  blush: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  shocked: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  sad: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  haha: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  devil: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  eyebrow: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  wtf: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  love: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  angry2: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  newInfiniteLoop: (_0?: any, _1?: any, _2?: any) => any;
  angry3: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  newInfiniteLoopPaused: (_0?: any, _1?: any, _2?: any) => any;
  cry: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  content: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  cool: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
};
declare const forfeitMove: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const SaveslotPreferences: {
  delete: (_0?: any, _1?: any, _2?: any) => any;
  getCachedOnlineSaveslot: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  save: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  setHasCreatedSaveslot: (_0?: any) => any;
  hasNeverCreatedSaveslot: (_0?: any) => any;
  setCachedOnlineSaveslot: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getSaveslotsClustersByDeviceIds: (_0?: any, _1?: any) => any;
  get: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const verticalNavigationBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const __dep_corona: {
  dep_corona: any;
  dep_sockets: any;
  dep_websockets: any;
};
declare const frigidBarrierStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const lua: {
  encode: (_0?: any, _1?: any) => any;
};
declare const outerTopBarMonsterSortButtonBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const focusBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const directionHelper: {
  toHorizontalNumber: (_0?: any, _1?: any) => any;
  toNumbers: (_0?: any, _1?: any) => any;
  getRandomDirection: (_0?: any) => any;
  toHorizontalNumberOrNil: (_0?: any, _1?: any) => any;
  toNumber: (_0?: any, _1?: any) => any;
  rotateRight: (_0?: any, _1?: any) => any;
  toRotation: (_0?: any, _1?: any) => any;
  isHorizontal: (_0?: any, _1?: any) => any;
  isSameDimension: (_0?: any, _1?: any, _2?: any) => any;
  toDimension: (_0?: any, _1?: any) => any;
  rotateLeft: (_0?: any, _1?: any) => any;
  getRandomHorizontalDirection: (_0?: any) => any;
  toVerticalNumber: (_0?: any, _1?: any) => any;
  oppositeDimension: (_0?: any, _1?: any) => any;
  isVerticalEdge: (_0?: any, _1?: any) => any;
  toEdge: (_0?: any, _1?: any) => any;
  isInDimension: (_0?: any, _1?: any, _2?: any) => any;
  toVerticalNumberOrNil: (_0?: any, _1?: any) => any;
  opposite: (_0?: any, _1?: any) => any;
  isVertical: (_0?: any, _1?: any) => any;
  getRandomVerticalDirection: (_0?: any) => any;
  getDirections: (_0?: any) => any;
  isHorizontalEdge: (_0?: any, _1?: any) => any;
  toAtlas: (_0?: any, _1?: any) => any;
};
declare const SpawnLocation: {
  westOf: (_0?: any, _1?: any, _2?: any) => any;
  southOf: (_0?: any, _1?: any, _2?: any) => any;
  northOf: (_0?: any, _1?: any, _2?: any) => any;
  eastOf: (_0?: any, _1?: any, _2?: any) => any;
  atTile: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const CatchingRule: {
  alwaysAllowTrainer: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  values: any;
  requireLuxLure: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  neverAllow: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  alwaysAllowWild: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  requireLuxLureButNotForPerfects: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  alwaysAllowWildAndTrainer: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  requireLuxLureButNotForPerfectsAndPotents: {
    allowsWild: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isNeverAllow: (_0?: any) => any;
    requiresLuxLure: (_0?: any) => any;
    allowsTrainer: (_0?: any) => any;
    isAlwaysAllowTrainer: (_0?: any) => any;
    isRequireLuxLureButNotForPerfectsAndPotents: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isAlwaysAllowWildAndTrainers: (_0?: any) => any;
    isRequireLuxLure: (_0?: any) => any;
    isAlwaysAllowWild: (_0?: any) => any;
    isRequireLuxLureButNotForPerfects: (_0?: any) => any;
  };
};
declare const Runtime: {
  removeEventListener: (_0?: any, _1?: any, _2?: any) => any;
  getFrameStartTime: () => any;
  _functionListeners: {
    touch: any;
    unhandledError: any;
    system: any;
    enterFrame: any;
    notification: any;
    key: any;
    inputDeviceStatus: any;
    axis: any;
    mouse: any;
    resize: any;
    unknownControllerKey: any;
  };
  _stage: {
    isDisplayGroup: boolean;
    _proxy: any;
    _class: any;
  };
  _proxy: {
    __index: (_0?: any) => any;
    __newindex: (_0?: any) => any;
  };
  hasEventSource: (_0?: any, _1?: any) => any;
  getFrameID: () => any;
  didRemoveListener: (_0?: any, _1?: any) => any;
  _super: {
    respondsToEvent: (_0?: any, _1?: any) => any;
    getOrCreateTable: (_0?: any, _1?: any, _2?: any) => any;
    _indexForType: any;
    hasEventListener: (_0?: any, _1?: any, _2?: any) => any;
    addEventListener: (_0?: any, _1?: any, _2?: any) => any;
    removeEventListener: (_0?: any, _1?: any, _2?: any) => any;
    didRemoveListener: (_0?: any, _1?: any) => any;
    dispatchEvent: (_0?: any, _1?: any) => any;
    __index: any;
    _super: any;
  };
  addEventListener: (_0?: any, _1?: any, _2?: any) => any;
  _tableListeners: {
    enterFrame: any;
  };
};
declare const skillMove: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
};
declare const linear: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
declare const monsterParticipant: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const outInBounce: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const spriteList: {
  coromonConnectifier_scanner: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  doubleBed: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  singleBed: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  hiddenItemSparkle: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  coromonLab_monitor1: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  programming_monitor: {
    width: number;
    path: string;
    timePerFrame: any;
    height: number;
    loopCount: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  monsterSpawn_fire: {
    width: number;
    path: string;
    timePerFrame: number;
    height: number;
    loopCount: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  fallingBridge: {
    path: string;
    width: number;
    height: number;
    timePerFrame: any;
    file: string;
    loopCount: number;
    amount_frames: number;
  };
  coromonConnectifier_monitor: {
    width: number;
    path: string;
    timePerFrame: number;
    height: number;
    loopCount: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  iceTownBed: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  coromonLab_monitor2: {
    path: string;
    width: number;
    timePerFrame: number;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  umbrella: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  perrinHammer: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
  coromonConnectifier_securityFootage: {
    path: string;
    width: number;
    height: number;
    file: string;
    timePerFrame: any;
    amount_frames: number;
  };
  alon_captured: {
    path: string;
    width: number;
    timePerFrame: any;
    height: number;
    file: string;
    frames: any;
    amount_frames: number;
  };
  bed: {
    path: string;
    sequences: any;
    height: number;
    file: string;
    width: number;
    amount_frames: number;
  };
};
declare const titanParticipant: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const electricTownUtility: {
  createOptionalElevatorQuestionCutscene: (_0?: any, _1?: any) => any;
  giveFuseItemsBasedOnDifficulty: (_0?: any) => any;
};
declare const worldLocationUtility: {
  getLocalised: (_0?: any, _1?: any) => any;
  createIcon: (_0?: any, _1?: any, _2?: any) => any;
  createAnimatedIcon: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const pollutedStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const createCharacterScreen: {
  getScreenForCharacterInitialisationInWorldDebug: (_0?: any) => any;
  getScreenForCharacterInitialisation: (_0?: any, _1?: any) => any;
  getScreenForHairstyle: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenForClothing: (_0?: any) => any;
  getScreenForGauntlet: (_0?: any) => any;
};
declare const iceWallStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const playerCurrency: {
  destroy: (_0?: any) => any;
  getGold: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  addGold: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getRestrictedGold: (_0?: any) => any;
  spendGold: (_0?: any, _1?: any) => any;
};
declare const BattleEnvironmentPreviewOffsetList: {
  luxSolisRoute: {
    y: number;
    x: number;
  };
  electricTown: {
    y: number;
    x: number;
  };
  iceTown: {
    y: number;
    x: number;
  };
  oasisCave: {
    y: number;
    x: number;
  };
  swampRoute: {
    y: number;
    x: number;
  };
  luxSolisTown: {
    y: number;
    x: number;
  };
  volcano: {
    y: number;
    x: number;
  };
  desertRoute: {
    y: number;
    x: number;
  };
  electricCave: {
    y: number;
    x: number;
  };
  amishTown: {
    y: number;
    x: number;
  };
  mescherRealm: {
    y: number;
    x: number;
  };
  electricTitanArea: {
    y: number;
    x: number;
  };
  iceCave: {
    y: number;
    x: number;
  };
  pyramid: {
    y: number;
    x: number;
  };
  palace: {
    y: number;
    x: number;
  };
  graveyard: {
    y: number;
    x: number;
  };
  powerTower: {
    y: number;
    x: number;
  };
  equilibrium: {
    y: number;
    x: number;
  };
  fireRoute: {
    y: number;
    x: number;
  };
  waterTitanTemple: {
    y: number;
    x: number;
  };
  dojo: {
    y: number;
    x: number;
  };
  waterTown: {
    y: number;
    x: number;
  };
  templeDungeon: {
    y: number;
    x: number;
  };
  graveyardDimension: {
    y: number;
    x: number;
  };
  ghostTitanArea: {
    y: number;
    x: number;
  };
};
declare const ObtainableDrillShovelItems: {
  getRandomizable: (_0?: any, _1?: any) => any;
  populateRandomizedObtainableItems: (_0?: any) => any;
  getRandomizedObtainableItems: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const debugBurnConditionConfigScreen: {
  getScreenForMonster: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const transition: {
  fadeOut: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toBottom: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  timeScale: number;
  setVisible: (_0?: any) => any;
  toTopOrFadeOut: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  to: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  onBeforeSetPropertySetOneMinusValue: (_0?: any, _1?: any, _2?: any) => any;
  wiggle: (_0?: any, _1?: any) => any;
  fromTop: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  smallPress: (_0?: any, _1?: any) => any;
  numberAndNow: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  zRotate: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
  fromDelta: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  toRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toRightOrFadeOut: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  shrink: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  withDelayByNumber: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  cancelRecursive: (_0?: any) => any;
  setInvisible: (_0?: any) => any;
  doSetVisible: (_0?: any) => any;
  toDelta: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  cancelAll: () => any;
  enterFrame: (_0?: any, _1?: any) => any;
  toLeftOrFadeOut: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  show: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  withReversedDelay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  shrinkMask: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  pause: (_0?: any) => any;
  fromTopOrFadeIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  grow: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  resume: (_0?: any) => any;
  doSetInvisible: (_0?: any) => any;
  color: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  rightPress: (_0?: any, _1?: any) => any;
  isTransitioning: (_0?: any) => any;
  fromRightOrFadeIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  removeSelf: (_0?: any) => any;
  growMask: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  fromEdge: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  fromBottomOrFadeIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  withDelay: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  fromBottom: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  from: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  toMagnetX: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  doRemoveSelf: (_0?: any) => any;
  number: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  path: (_0?: any, _1?: any, _2?: any) => any;
  press: (_0?: any, _1?: any) => any;
  createWiggleSynchronizer: (_0?: any) => any;
  toOriginalY: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  frameShake: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  toDeltaArray: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  gravityMove: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toBottomOrFadeOut: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toArray: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  cancel: (_0?: any) => any;
  withReversedDelayOrImmediate: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  toEdge: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  leftPress: (_0?: any, _1?: any) => any;
  fromLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  fromLeftOrFadeIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  withDelayOrImmediate: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  toLeft: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  onBeforeSetPropertySetValue: (_0?: any, _1?: any, _2?: any) => any;
  removeSelfAnd: (...args: any[]) => any;
  toOriginalX: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  fromRight: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toTop: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  toMagnetY: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  fadeIn: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  timeShake: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const rockWallStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const HttpResponseCodes: {
  NOT_MODIFIED: number;
  CONFLICT: number;
  NOT_IMPLEMENTED: number;
  NON_AUTHORITATIVE_INFORMATION: number;
  ACCEPTED: number;
  IM_USED: number;
  VARIANT_ALSO_NEGOTIATES: number;
  METHOD_NOT_ALLOWED: number;
  INSUFFICIENT_STORAGE: number;
  RESET_CONTENT: number;
  NOT_ACCEPTABLE: number;
  PARTIAL_CONTENT: number;
  UNAUTHORIZED: number;
  HTTP_VERSION_NOT_SUPPORTED: number;
  MOVED_PERMANENTLY: number;
  SERVICE_UNAVAILABLE: number;
  PAYMENT_REQUIRED: number;
  PROXY_AUTHENTICATION_REQUIRED: number;
  ALREADY_REPORTED: number;
  BAD_REQUEST: number;
  REQUEST_HEADER_FIELDS_TOO_LARGE: number;
  NETWORK_CONNECT_TIMEOUT_ERROR: number;
  SWITCHING_PROTOCOLS: number;
  OK: number;
  FOUND: number;
  CONTINUE: number;
  REQUESTED_RANGE_NOT_SATISFIABLE: number;
  UNSUPPORTED_MEDIA_TYPE: number;
  NO_CONTENT: number;
  REQUEST_TIMEOUT: number;
  PAYLOAD_TOO_LARGE: number;
  PROCESSING: number;
  UNAVAILABLE_FOR_LEGAL_REASONS: number;
  EXPECTATION_FAILED: number;
  LENGTH_REQUIRED: number;
  PRECONDITION_FAILED: number;
  SEE_OTHER: number;
  MISDIRECTED_REQUEST: number;
  REQUEST_URI_TOO_LONG: number;
  PRECONDITION_REQUIRED: number;
  UNPROCESSABLE_ENTITY: number;
  MULTI_STATUS: number;
  CREATED: number;
  GATEWAY_TIMEOUT: number;
  FAILED_DEPENDENCY: number;
  LOCKED: number;
  PERMANENT_REDIRECT: number;
  NOT_FOUND: number;
  UPGRADE_REQUIRED: number;
  CLIENT_CLOSED_REQUEST: number;
  TOO_MANY_REQUESTS: number;
  I_M_A_TEAPOT: number;
  MULTIPLE_CHOICES: number;
  BAD_GATEWAY: number;
  USE_PROXY: number;
  NETWORK_AUTHENTICATION_REQUIRED: number;
  GONE: number;
  INTERNAL_SERVER_ERROR: number;
  CONNECTION_CLOSED_WITHOUT_RESPONSE: number;
  FORBIDDEN: number;
  LOOP_DETECTED: number;
  NOT_EXTENDED: number;
  TEMPORARY_REDIRECT: number;
};
declare const Analytics: {
  sendConfiguredInputDeviceEvent: (_0?: any, _1?: any, _2?: any) => any;
  sendApplicationOpenEvent: (_0?: any) => any;
  sendErrorEvent: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  sendBattleLostEvent: (_0?: any, _1?: any) => any;
  sendWarningEvent: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  sendConfiguredSafeInsetEvent: (_0?: any, _1?: any, _2?: any) => any;
  sendApplicationHeartbeatEvent: (_0?: any) => any;
  init: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const worldMapScreen: {
  getScreenForLuxRecallPremium: (_0?: any, _1?: any) => any;
  getScreenForPauseMenu: (_0?: any) => any;
  getScreenForLuxTeleporter: (_0?: any, _1?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const RecoverEnergyAction: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const hauntedGroundsEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const skipMove: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const inOutCubic: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const ObtainableGiftItems: {
  getRandomizable: (_0?: any, _1?: any) => any;
  populateRandomizedObtainableItems: (_0?: any) => any;
  getRandomizedObtainableItems: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const OnlineSelectSquadScreen: {
  getScreenForSelecting: (_0?: any, _1?: any, _2?: any) => any;
  getScreenForEditing: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const worldDarkness: {
  isCreated: (_0?: any) => any;
  createInstance: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const maskHelper: {
  setLocationForFrame: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
};
declare const app: {
  isDevelopBuild: (_0?: any) => any;
  identifier: string;
  saveslotDataVersion: number;
  name: string;
  isBetaBuild: (_0?: any) => any;
  saveslotDataVersionToStore: number;
  usesEpicDesktopPlugin: (_0?: any) => any;
  isDemoBuild: (_0?: any) => any;
  usesSteamDesktopPlugin: (_0?: any) => any;
  usesGogDesktopPlugin: (_0?: any) => any;
  battleVersion: string;
  gameSettingsVersion: number;
  useOptimizedMaps: boolean;
  version: string;
  encryptionSalt: string;
  solar2DVersion: string;
};
declare const fillHelper: {
  translateY: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  setWidthForRepeatingFill: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  useRepeatingFill: (_0?: any, _1?: any) => any;
  translateX: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  alignToLeftEdge: (_0?: any, _1?: any, _2?: any) => any;
  setHeightForRepeatingFill: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  alignToTopEdge: (_0?: any, _1?: any, _2?: any) => any;
  setImageSheetFill: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  alignToBottomEdge: (_0?: any, _1?: any, _2?: any) => any;
  setImageFill: (_0?: any, _1?: any, _2?: any) => any;
  alignToRightEdge: (_0?: any, _1?: any, _2?: any) => any;
};
declare const traitRerollWorldEffect: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const playerOnlineStyle: {
  destroy: (_0?: any) => any;
  setBattleMusic: (_0?: any, _1?: any) => any;
  getOnlineBattleEnvironment: (_0?: any) => any;
  getCharacterConfig: (_0?: any) => any;
  setOnlineBattleEnvironment: (_0?: any, _1?: any) => any;
  setWinBattleTaunt: (_0?: any, _1?: any) => any;
  getBattleMusic: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  getWinBattleTaunt: (_0?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getCharacterConfigUID: (_0?: any) => any;
};
declare const pnotice: (_0?: any, _1?: any) => any;
declare const encryptionHelper: {
  encrypt: (_0?: any, _1?: any) => any;
  base64Encode: (_0?: any, _1?: any) => any;
  createMd5Hash: (_0?: any, _1?: any) => any;
  decrypt: (_0?: any, _1?: any) => any;
  encryptOld: (_0?: any, _1?: any) => any;
  decryptOld: (_0?: any, _1?: any) => any;
  base64Decode: (_0?: any, _1?: any) => any;
};
declare const milestoneScreen: {
  getScreenName: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const Enum: {
  new: (_0?: any) => any;
};
declare const playerWorldData: {
  setTempProperty: (_0?: any, _1?: any, _2?: any) => any;
  setProperty: (_0?: any, _1?: any, _2?: any) => any;
  removeSpawnableConstructorForMap: (_0?: any, _1?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  clearTempProperties: (_0?: any) => any;
  resolveConsistentSavePropertiesFromSpawnableOrProperty: (
    _0?: any,
    _1?: any,
  ) => any;
  setSpawnableConstructorForMap: (_0?: any, _1?: any, _2?: any) => any;
  destroy: (_0?: any) => any;
  getTempProperty: (_0?: any, _1?: any) => any;
  getProperty: (_0?: any, _1?: any) => any;
  unsetTempProperty: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getSpawnableConstructorsForMap: (_0?: any, _1?: any, _2?: any) => any;
  unsetProperty: (_0?: any, _1?: any) => any;
};
declare const UIScrollBarBackgroundBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const inOutQuad: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const IAPShopProductScreen: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreen: (_0?: any, _1?: any) => any;
};
declare const playerOnlineSquads: {
  resolveOnlineLoanSquadEntries: (_0?: any) => any;
  getOnlineSquadsIncludingPlayerOnlineLoanSquad: (_0?: any) => any;
  setLastSelectedOnlineRankedMatchmakingMode: (_0?: any, _1?: any) => any;
  getOnlineSquadsIncludingPlayerSquads: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  setLastSelectedOnlineCasualMatchmakingMode: (_0?: any, _1?: any) => any;
  increaseAmountIfOnlineSquadsIfAllInUse: (_0?: any) => any;
  getOnlineSquads: (_0?: any) => any;
  getLastSelectedOnlineCasualMatchmakingMode: (_0?: any) => any;
  getLastSelectedSquad: (_0?: any, _1?: any) => any;
  setLastSelectedOnlineSquadIndex: (_0?: any, _1?: any, _2?: any) => any;
  populateOnlineLoanSquadEntries: (_0?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  destroy: (_0?: any) => any;
  getLastSelectedOnlineRankedMatchmakingMode: (_0?: any) => any;
};
declare const itemList: {
  FRUIT_CURE_CONDITION_FREEZE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_6_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SCENT_APPLY_CONDITION_DROWSY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  GLASSES_SLIM_RED: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GAUNTLET_GOLD_RED: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_CAP: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_FILLET_1: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_CLIP: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_FEINT_SPURTS: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_6_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GAUNTLET_GOLD_BLUE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_STONE_FIST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_4_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  PAMPHLET_JOHN_CHALLENGE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_3_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  TEMPLE_GATE_KEY: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HOLD_REPEL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_6_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_FEINT_BURSTS: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_RECOVER_ENERGY_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    supportedTargetModes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SHORTCUT_TO_FRUIT_DRONE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_SPECIALDEFENSE_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_RECOVER_HEALTH_AND_APPLY_STATBOOST_DEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_LEAF: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  TITAN_ESSENCE_ELECTRIC: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_DEMO_STAR: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  POWERTOWER_FUSE_GREEN: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  SKILL_FLASH_ELECTRIFY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_INNER_PEACE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_SMACKDOWN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  POCKET_SNIPS: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SKILL_FLASH_CONCENTRATE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GEM_PYRAMID_GREEN: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  SKILL_FLASH_ZEN_CURE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_INCREASE_SPEED_BUT_LOCK_SKILL: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getStatUIDToBoost: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    supportedTargetModes: any;
    getIndex: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    category: string;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SCENT_ADD_POTENTIAL_ROLL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    mutateAmountOfMonsterRolls: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    mutateAmountOfPotentialRolls: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  CLOTHING_PLAYER_GIRL_3_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_ELECTRIC_TIGER_1_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GAUNTLET_LUXSOLIS_BLUE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_RECOVER_HEALTH_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SHOP_COUPON_ICE_COAT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SKILL_FLASH_BEAT_UP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_2_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_FLYING_KICK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_HAT_BOY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_EXTRA_XP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  ESSENCE_COLLECTOR_MODULE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_ELECTRIC_OOZE_1_A: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_ALL_IN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GEM_PYRAMID_YELLOW: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  SKILL_FLASH_DEEP_CUT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  REVIVE_STONE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getMonsterRevivedText: (_0?: any, _1?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SHOP_COUPON_PERCENT_75: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getCashbackAmount: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getCashbackDialogText: (_0?: any, _1?: any, _2?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  GEM_PYRAMID_ORANGE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  GAUNTLET_COUPON_LUXSOLIS: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getGauntletItemUID: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HANDBOOK_DIFFICULTY: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  CAKE_APPLY_STATBOOST_ATTACK_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_6_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  REVIVE_SHARD: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getMonsterRevivedText: (_0?: any, _1?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_SANDMAN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_NORMAL_CYBORG_2_A: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_DEFENSE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getStatUIDToIncrease: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_NORMAL_ADDER_1_A: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHORTCUT_TO_CHARACTER_WEARABLES: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  HEADGEAR_BANDANA: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_RECOVER_ENERGY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_3_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_RECOVER_HEALTH_RISK_CONDITION: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_BOW_BIG: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_BEE_1_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GAUNTLET_DARK_RED: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SCENT_RECIPE_BOOK: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  SKILL_FLASH_WHOOSH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKINTONE_3: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_5_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_ELECTRIC_OOZE_1_B: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHORTCUT_TO_PERFECTION_STONE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  HANDBOOK_TRAITS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  SKILL_FLASH_SUPER_DRAIN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_EXTEND_WEATHER_TWILIGHT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    isWeatherEffectToExtend: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CAKE_RECOVER_HEALTH_3: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_ELECTRIC_TIGER_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_SPEED_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_HAT_GIRL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_TOWEL_LOW: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_ELECTRIC_OOZE_1_C: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_4_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_SPECIALDEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_RECOVER_ENERGY_3: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    supportedTargetModes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  POWERTOWER_FUSE_RED: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_APPLY_STATBOOST_SPECIALATTACK_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKINTONE_WUBBONIAN: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_APPLY_STATBOOST_SPECIALDEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_AGILITY_TRAINING: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_FROG: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_SPEED: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getStatUIDToIncrease: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_5_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_INCREASE_TRAIT_ENHANCEMENT_STAGE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  ESSENCE_LOCATOR: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HOLD_INCREASE_DEFENSE_BUT_DISABLE_STATUS_SKILLS: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  GLASSES_SLIM_GREY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_BEE_1_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_4_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_PHANTOM_SPIKE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GEM_PYRAMID_PURPLE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_CROW_1_B: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_RECOVER_ENERGY_4: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    supportedTargetModes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_6_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  TITAN_ESSENCE_GHOST: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_2_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_QUICKSAND: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_DETONATE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_FIRE_TURTLE_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_ELEMENT_GHOST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_3_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  POTENTIAL_READER_PREMIUM: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SPINNER_ELEMENT_NORMAL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CAKE_APPLY_STATBOOST_DEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_NORMAL_ADDER_1_C: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_INCREASE_SKILL_DAMAGE_AND_ENERGY_COST: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  FRUIT_SKILL_POWER_BOOST_GHOST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKINTONE_4: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_BEE_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_ELEMENT_FIRE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HOLD_EXTEND_WEATHER_RAIN: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    isWeatherEffectToExtend: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_PREMONITION: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_GEYSER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_3_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  WHITE_PAINT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SPINNER_ELEMENT_ICE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_SCREAM: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_ICY_FLURRY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_1_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_ELECTRIC_OOZE_1_A: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_TROPHY_GOLD: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_GREEN_2: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  GAUNTLET_LUXSOLIS_GREEN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GAUNTLET_GOLD_GREEN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_TROPHY_BRONZE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_CURE_CONDITION_POISON: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_BEANIE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  DEVOLVE_PILL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    getGoldCost: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeBuy: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    classes: any;
    subcategory: string;
    getIndex: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  SKILL_FLASH_ARTIFICIAL_NIGHT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_REFLECT_DAMAGE_ON_CONTACT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_ELECTRIC_OOZE_1_C: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_CRUNCH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKINTONE_1: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_SPECIALDEFENSE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getStatUIDToIncrease: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_TENNISCAP: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_GOGGLES: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_PYRAMID_TURQUOISE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  HEADGEAR_COWBOY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_CURE_CONDITION_POISON: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SPINNER_REGULAR_3: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_DISABLE_SKILL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_VIKING: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_TOWEL_HIGH: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_SKILL_POWER_BOOST_NORMAL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CAKE_APPLY_STATBOOST_SPECIALATTACK_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  FRUIT_CURE_CONDITION_BURN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_INSPECT_SCENT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_EXTRA_GOLD: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  POTENTIAL_STONE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    supportedTargetModes: any;
    getIndex: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    category: string;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getUID: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  FRUIT_REDUCE_EFFECTIVE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SPINNER_ELEMENT_SAND: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_NORMAL_BEE_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_CURE_CONDITION_HAZY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CAKE_APPLY_STATBOOST_SPECIALATTACK_AND_SPECIALDEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_LAZY_XP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  FRUIT_APPLY_STATBOOST_ATTACK_AND_SPECIALATTACK_ON_EFFECTIVE_HIT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CAKE_CURE_CONDITION_SHOCK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_1_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_4_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  STYLE_CRYSTAL: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CAKE_APPLY_STATBOOST_ATTACK_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_DIRTY_SNOW: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_EXTEND_WEATHER_SNOW: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    isWeatherEffectToExtend: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  POTENTIAL_READER: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CAKE_CURE_CONDITION: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_HOOD_1: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_FRIGID_BARRIER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_KING: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_TOXIC_CLOUD: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_CUTE_POSE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SCENT_APPLY_CONDITION_POISON: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  FRUIT_SKILL_POWER_BOOST_ELECTRIC: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SPINNER_DREAM: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_PUMPKIN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_BUNNY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  DRILL_SHOVEL_SILVER: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    findDrillShovelItemsInRange: (_0?: any, _1?: any, _2?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    showDrillShovelItemRangeRect: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    getName: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getDrillShovelItemRadius: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    adjustAuctionPrice: (_0?: any, _1?: any) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getDrillShovelCommissionFeeFactor: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  HEADGEAR_NORMAL_CROW_1_C: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_CURE_CONDITION_CURSE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  FRUIT_XP_BOOST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_LAST_STAND: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  FRUIT_SKILL_POWER_BOOST_SAND: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SWAMP_MUSHROOM_BLUE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_SPECIALATTACK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getStatUIDToIncrease: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_1_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_WATER_SHARK_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_BLUE_2: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_1_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  OUTFIT_MONK: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    shouldDisableWearableItem: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKeys: (_0?: any) => any;
  };
  SHORTCUT_TO_HOLD_LAZY_XP_PREMIUM: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  TITAN_ESSENCE_WATER: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  OUTFIT_GUARD: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    shouldDisableWearableItem: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKeys: (_0?: any) => any;
  };
  SPINNER_REGULAR_4: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_RECONSTRUCT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKINTONE_5: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  LIBRARY_HANDBOOK: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_BOY_2_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  POWERTOWER_FUSE_ORANGE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_PANDA: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  OUTFIT_WALDO: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    shouldDisableWearableItem: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    tryActivate: (_0?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setCategory: (_0?: any, _1?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKeys: (_0?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_APPLY_STATBOOST_ATTACK_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_5_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_SPLATTER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HANDBOOK_TRAINERS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_SPEED_ON_EFFECTIVE_HIT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_3_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_5_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_SKILL_POWER_BOOST_FIRE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  PHONE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  FRUIT_SKILL_POWER_BOOST_ICE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_TACTICAL_SLAM: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_5_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_TROPHY_SILVER: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_FIRE_UP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SPINNER_ELEMENT_WATER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_CHEF: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_CURE_CONDITION_DROWSY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_CLEARING_WIND: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  FRUIT_SKIP_CHARGE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_2_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  TELEPORTER_PARCEL: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SMOKEBALL: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  CAKE_CURE_CONDITION_DROWSY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_BUBBLE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKINTONE_2: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_4_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_5_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_HEAL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  RECALL_PREMIUM: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getRecallLocationUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    closePauseMenuAndTeleport: (_0?: any, _1?: any, _2?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  SKILL_FLASH_SLUSH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  RECALL: {
    onUse: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getSubcategory: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getIconUID: (_0?: any) => any;
    hasDescription: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    classes: any;
    getGridBoxStyle: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    index: number;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getName: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    onBeforeBuy: (_0?: any) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    subcategory: string;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getRecallLocationUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    closePauseMenuAndTeleport: (_0?: any, _1?: any, _2?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getUID: (_0?: any) => any;
  };
  HEADGEAR_AMISH: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  TRAINER_HUB_ENTRY_PASS: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HANDBOOK_POTENTIAL: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  HEADGEAR_HEADPHONES: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_BLOCK_ENTRY_HAZARD_EFFECT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HOLD_DECREASE_HEALTH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_TASER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_4_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_GLASS_CANNON: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  POWERTOWER_FUSE_YELLOW: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_CROWN_SILVER: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_RECOVER_HEALTH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_1_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_SNOWBALL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_BERSERK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_SNOWFALL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_1_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_REDUCE_CRITICAL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_BALL_OF_DARKNESS: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SCENT_DECREASE_HEALTH: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    classes: any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMutatedGoldCost: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
  };
  SCENT_INCREASE_LEVEL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    classes: any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMutatedGoldCost: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
  };
  CAKE_CURE_CONDITION_BURN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_SMOKESCREEN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  FRUIT_SKILL_POWER_BOOST_WATER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isSkillToBoost: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  GEM_RED_1: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  SHORTCUT_TO_REMOTE_MONSTER_STORAGE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  SPINNER_REGULAR_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  PURRGY_NIBBLE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  OUTFIT_ICE_COAT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    shouldDisableWearableItem: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKeys: (_0?: any) => any;
  };
  SKILL_FLASH_SHARED_FATE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_EMP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  MONSTERREQUEST_1: {
    findRequestedMonsterInSquad: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    isRequestedMonster: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  CLOTHING_PLAYER_GIRL_4_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_SPECIALATTACK_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_6_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_CHINESE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_WORKER: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    tryActivate: (_0?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setCategory: (_0?: any, _1?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_HAT_BACKWARDS: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_ICE_BEAR_1_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_DEFENSE_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_1_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  POWERTOWER_FUSE_PURPLE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_1_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_INCREASE_SPECIALATTACK_BUT_LOCK_SKILL: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getStatUIDToBoost: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    supportedTargetModes: any;
    getIndex: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    category: string;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_SKULL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_4_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SCENT_REPEL_LOWER_LEVEL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMutatedGoldCost: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBlockZoneEncounter: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_NORMAL_CYBORG_2_B: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_SURPRISE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_DESERT_WINDS: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_SCARY_VISION: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GEM_GREEN_3: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  FRUIT_APPLY_STATBOOST_ATTACK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getStatUIDToIncrease: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  TITAN_ESSENCE_ICE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_ELECTRIC_OOZE_1_B: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GOLDEN_BUST: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  FRUIT_DRONE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  HANDBOOK_SKILLS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  GEM_RED_2: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  HOLD_BLOCK_WEATHER_EFFECT_EFFECT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_2_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  BEEHIVE: {
    onDidRollMonsters: (_0?: any) => any;
    index: number;
    onDidNotRollMonsters: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onBeforeDirectEncounter: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getIconUID: (_0?: any) => any;
    getName: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    classes: any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    subcategory: string;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    rollMonsters: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getIconPath: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_5_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHOP_COUPON_PERCENT_50: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getCashbackAmount: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getCashbackDialogText: (_0?: any, _1?: any, _2?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HANDBOOK_STATS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  SKILL_FLASH_EPIPHANY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_CURE_CONDITION_FREEZE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  PAMPHLET_SHROOMS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  SKILL_FLASH_RAGE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HOLD_EXTEND_WEATHER_SANDSTORM: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    isWeatherEffectToExtend: (_0?: any, _1?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_DISABLE_HEAL: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_SUNHAT: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SCENT_APPLY_CONDITION_BURN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  CAKE_RECOVER_HEALTH_AND_ENERGY_3: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    classes: any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_3_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SWAMP_MUSHROOM_RED: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SKILL_FLASH_FIERY_BREATH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_4_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_ENERGY_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    classes: any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  LUX_GOLD_MAGNET: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    shouldShowEnabledIndicator: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_CYBORG_2_C: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_2_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_2_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHORTCUT_TO_POTENTIAL_STONE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  SKINTONE_6: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSkintone: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_ADDER_1_B: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  LUX_KITCHEN: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  CAKE_APPLY_STATBOOST_ATTACK_AND_DEFENSE_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_BUBBLE_BLOWER: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  PERFECTION_STONE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    supportedTargetModes: any;
    getIndex: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    category: string;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getUID: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  TITAN_ESSENCE_FIRE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_2_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  OUTFIT_SANTA: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    shouldDisableWearableItem: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKeys: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_5_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHORTCUT_TO_POTENTIAL_READER_PREMIUM: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_5_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_HEATWAVE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_DOLPHIN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_2_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_INCREASE_ATTACK_BUT_LOCK_SKILL: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getStatUIDToBoost: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    supportedTargetModes: any;
    getIndex: (_0?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    category: string;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_BOLT_BOMB: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_RECOVER_HEALTH_4: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_2_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  XP_CHIP: {
    onUse: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getName: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getDuration: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
  };
  HEADGEAR_FLOWER: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_6_F: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  PAMPHLET_GEMS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  FRUIT_CLAMP_FATAL_DAMAGE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    supportedTargetModes: any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_BOY_2_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  REMOTE_MONSTER_STORAGE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  SWAMP_MUSHROOM_PINK: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_ENERGY_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    classes: any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_SANDSPOUT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  DRILL_SHOVEL_GOLD: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    findDrillShovelItemsInRange: (_0?: any, _1?: any, _2?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    showDrillShovelItemRangeRect: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    getName: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getDrillShovelItemRadius: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    adjustAuctionPrice: (_0?: any, _1?: any) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getDrillShovelCommissionFeeFactor: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  CLOTHING_PLAYER_BOY_3_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_MIST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GLASSES_SLIM_BLUE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SWAMP_MUSHROOM_GREEN: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_6_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_5_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SCENT_APPLY_CONDITION_HAZY: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  GEM_BLUE_1: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  TYPE_EFFECTIVENESS_MANUAL: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  FRUIT_CURE_CONDITION_SHOCK: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HANDBOOK_WEATHER: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  HEADGEAR_HIGH_HAT: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_FILLET_2: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_REGULAR_2: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_PLAYER_GIRL_6_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_INCREASE_SPECIALDEFENSE_BUT_DISABLE_STATUS_SKILLS: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  MESCHER_STONE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  GEM_RED_3: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  ROTTEN_APPLE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    classes: any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  CARROT: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  GLASSES_SLIM_PURPLE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_6_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SPINNER_INSANE: {
    index: number;
    isAffectedByDifficulty: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    supportedTargetModes: any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  POWERTOWER_FUSE_MAGENTA: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  SWAMP_MUSHROOM_YELLOW: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_WITCH: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SOL_SODA: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getNameUID: (_0?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getIconUID: (_0?: any) => any;
    getName: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    classes: any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    onBeforeBuy: (_0?: any) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_3_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_PYRAMID_BLUE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  GAUNTLET_LUXSOLIS_RED: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_DISTRACT: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SCENT_APPLY_CONDITION_CURSE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  SCENT_APPLY_CONDITION_FREEZE: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  SCENT_APPLY_CONDITION_SHOCK: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getDuration: (_0?: any) => any;
    category: string;
    getDescriptionUID: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getMutatedGoldCost: (_0?: any) => any;
    mutateZoneEncounter: (_0?: any, _1?: any) => any;
    classes: any;
    getUID: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeBuy: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createConditionToApply: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    index: number;
  };
  CLOTHING_NORMAL_BEE_1_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_5_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  LUX_LURE: {
    onDidRollMonsters: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onDidNotRollMonsters: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getSubcategory: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getName: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    classes: any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    shouldShowEnabledIndicator: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onBeforeDirectEncounter: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    index: number;
    subcategory: string;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    rollMonsters: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    UID: string;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
  };
  SKILL_FLASH_SUMO_STANCE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  TITAN_ESSENCE_SAND: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getType: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  POWERTOWER_FUSE_TURQUOISE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  RECALL_REMOTE_CONTROLLED: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  SPINNER_SENSEI: {
    index: number;
    isAffectedByDifficulty: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    supportedTargetModes: any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  DATA_CHIP: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_ELECTRIC_TIGER_1_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  POWERTOWER_FUSE_BLUE: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getColor: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
  };
  SHORTCUT_TO_XP_CHIP: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  SKILL_FLASH_PRECISION_PUNCH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_TEMPEST: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_3_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_CURE_CONDITION_HAZY: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getConditionUIDToCure: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onBeforeMonsterUseMessageForCureConditionConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SHOP_COUPON_MOST_EXPENSIVE_5: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getCashbackAmount: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getCashbackDialogText: (_0?: any, _1?: any, _2?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_BOY_1_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SWAMP_MUSHROOM_PURPLE: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CAKE_RECOVER_HEALTH_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  CLOTHING_NORMAL_BEE_1_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_RECOVER_HEALTH: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HEADGEAR_BOW_SMALL: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_BLUE_3: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  GEM_GREEN_1: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getAuctionPrice: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
  };
  SHORTCUT_TO_RECALL_PREMIUM: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getShortcutItem: (_0?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getShortcutItemUID: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getScreen: (_0?: any) => any;
  };
  HEADGEAR_PIRATESCARF: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_IGNITE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  HEADGEAR_BOOK: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HANDBOOK_COROMON: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  CLOTHING_PLAYER_BOY_3_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_POISON_CHOMP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CAKE_APPLY_STATBOOST_SPEED_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeMonsterUseMessageForApplyStatBoostsConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getStatBoostStatusesToApply: (_0?: any, _1?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getTargetMode: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    category: string;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUseCakeApplyStatBoostStatuses: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getApplyStatBoostStatusParamList: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_BOY_4_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  FRUIT_CURE_CONDITION_CURSE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    rollAmountOfFruitsGrown: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    isConditionStatusToCure: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getAmountOfStepsUntilFullyGrown: (_0?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getTargetMode: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    getIndex: (_0?: any) => any;
    category: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    supportedTargetModes: any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    doTriggerFruitIfNotBlocked: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  HOLD_LAZY_XP_PREMIUM: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_TIME_WARP: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_DRAIN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SKILL_FLASH_SPLASH: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_4_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_NORMAL_CROW_1_A: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getOnlineCharacterWearableUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setUID: (_0?: any, _1?: any) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryActivate: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_PYRAMID_RED: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  SPINNER_ELEMENT_ELECTRIC: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getCatchRateModifier: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    onAfterCatch: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    showSuccessTextAndOptionallyShowSummary: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    optionallyAskToKeepOrRelease: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getDescription: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getAmountOfShakes: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    optionallyGiveNickname: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    isAffectedByDifficulty: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    showAddedToSquadTextOrOptionallySwap: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    getType: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  GAUNTLET_COUPON_GOLD: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getGauntletItemUID: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HANDBOOK_CONDITIONS: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    onCreateSlideViewOverlay: (_0?: any, _1?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  };
  HEADGEAR_KARATEBAND: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GOLD: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    category: string;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  HEADGEAR_CAT: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_TURBAN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_CROWN_GOLD: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HEADGEAR_MAGNET: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    isSaveableWorldEffect: (_0?: any, _1?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    createSaveableItemWorldEffect: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    tryActivate: (_0?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getSavedItemWorldEffect: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    deactivateSavedWorldEffect: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    activateSaveableWorldEffect: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    category: string;
    setCategory: (_0?: any, _1?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_BOY_1_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  HOLD_REDUCE_ENERGY_COST: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createBattleEffect: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getSubcategory: (_0?: any) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    category: string;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    subcategory: string;
  };
  SKILL_FLASH_SUPER_ENERGY_DRAIN: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_LAB: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_6_D: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_3_C: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CLOTHING_PLAYER_GIRL_6_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_LIGHTNING_STRIKE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_4_A: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_MONSOON: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  SURFBOARD: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    getNameUID: (_0?: any) => any;
    category: string;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    getIconPath: (_0?: any) => any;
    subcategory: string;
    getItemRowRightSideText: (_0?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    classes: any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CLOTHING_PLAYER_BOY_2_E: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  GEM_PYRAMID_MAGENTA: {
    onUse: (_0?: any, _1?: any) => any;
    index: number;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    classes: any;
    getIndex: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    category: string;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
  };
  HEADGEAR_STAR: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SHOP_COUPON_PERCENT_25: {
    index: number;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    getCashbackAmount: (_0?: any, _1?: any) => any;
    UID: string;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getIconUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getSubcategory: (_0?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getNameUID: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    getName: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    classes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    getCashbackDialogText: (_0?: any, _1?: any, _2?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    getIndex: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    getMaxAmount: (_0?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
  };
  CAKE_RECOVER_ENERGY_1: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    supportedTargetModes: any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    category: string;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  GLASSES_SLIM_GREEN: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  SKILL_FLASH_PRECISION_EYE: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getFlashSkillUID: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    supportedTargetModes: any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    category: string;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    classes: any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
  CLOTHING_PLAYER_GIRL_5_B: {
    getItemRowRightSideText: (_0?: any) => any;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    onModifyCharacterConfig: (_0?: any, _1?: any) => any;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doActivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    onBeforeActivate: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onBeforeActivateMessage: (_0?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    onBeforeDeactivateMessage: (_0?: any, _1?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    isActivated: (_0?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getWearableItemType: (_0?: any) => any;
    onUse: (_0?: any, _1?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    onReactivatedByOtherWearable: (_0?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    onBeforeDeactivate: (_0?: any, _1?: any, _2?: any) => any;
    getIndex: (_0?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    canBeInitiallySelected: (_0?: any) => any;
    getDescription: (_0?: any) => any;
    getGridBoxStyle: (_0?: any) => any;
    onDeactivate: (_0?: any, _1?: any) => any;
    onDeactivatedByOtherWearable: (_0?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    index: number;
    category: string;
    shouldShowNewCharacterInDescription: (_0?: any) => any;
    setUID: (_0?: any, _1?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getUID: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    tryActivate: (_0?: any) => any;
    onActivate: (_0?: any, _1?: any) => any;
    tryDeactivate: (_0?: any, _1?: any) => any;
    classes: any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    doDeactivateInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    isAllowedToDeactivateInInventoryScreen: (_0?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    getPartKey: (_0?: any) => any;
  };
  CAKE_RECOVER_HEALTH_AND_ENERGY_4: {
    index: number;
    getMutatedGoldCost: (_0?: any) => any;
    hideItemIndicator: (_0?: any, _1?: any) => any;
    UID: string;
    createDescription: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    doRecoverEnergy: (_0?: any, _1?: any) => any;
    shouldBeUsedAsItemMove: (_0?: any) => any;
    getMonsterButtonPopupContextText: (_0?: any, _1?: any) => any;
    onConsume: (_0?: any, _1?: any) => any;
    getIconUID: (_0?: any) => any;
    getSubcategory: (_0?: any) => any;
    onBeforeMonsterUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    shouldDisableMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    useInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    shouldEnableCheckboxOnMonsterButtonPopupButton: (_0?: any, _1?: any) => any;
    getActionButtonState: (_0?: any, _1?: any) => any;
    getUseButtonState: (_0?: any, _1?: any) => any;
    getGoldCost: (_0?: any) => any;
    onMonsterUseInInventoryPopupRecoverHealth: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onBeforeUseMessage: (_0?: any, _1?: any, _2?: any) => any;
    subcategory: string;
    doRecoverHealth: (_0?: any, _1?: any) => any;
    shouldBeIncludedInInventory: (_0?: any) => any;
    onRemoveFromInventory: (_0?: any, _1?: any, _2?: any) => any;
    getName: (_0?: any) => any;
    canBeUsedOnMonster: (_0?: any, _1?: any, _2?: any) => any;
    showItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    hasDescription: (_0?: any) => any;
    tryUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getMaxAmount: (_0?: any) => any;
    getNameUID: (_0?: any) => any;
    getTargetMode: (_0?: any) => any;
    instanceOf: (_0?: any, _1?: any) => any;
    getRecoverHealthValue: (_0?: any, _1?: any) => any;
    setCategory: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverHealthConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    setUID: (_0?: any, _1?: any) => any;
    getCategory: (_0?: any) => any;
    createIcon: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonOnBottomButton: (_0?: any) => any;
    setIndex: (_0?: any, _1?: any) => any;
    getIconPath: (_0?: any) => any;
    canBeUsed: (_0?: any, _1?: any) => any;
    getDescriptionUID: (_0?: any) => any;
    getUID: (_0?: any) => any;
    onAddToInventory: (_0?: any, _1?: any, _2?: any) => any;
    getItemPopupContextText: (_0?: any) => any;
    onBeforeUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    canBeInitiallySelected: (_0?: any) => any;
    createItemRow: (_0?: any, _1?: any, _2?: any) => any;
    createDescriptionContent: (_0?: any, _1?: any) => any;
    showAndHideItemIndicator: (_0?: any, _1?: any, _2?: any) => any;
    getDescription: (_0?: any) => any;
    onBeforeMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getGridBoxStyle: (_0?: any) => any;
    classes: any;
    getRecoverEnergyValue: (_0?: any, _1?: any) => any;
    onBeforeMonsterUseMessageForRecoverEnergyConsumableEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    onUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    setSubcategory: (_0?: any, _1?: any) => any;
    onMonsterSpriteUseCake: (_0?: any, _1?: any, _2?: any) => any;
    getValidMonstersInSquad: (_0?: any, _1?: any) => any;
    onMonsterUseInInventoryPopup: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
    ) => any;
    shouldBeListedIfNotInInventory: (_0?: any) => any;
    onMonsterSpriteUseCakeRecoverHealth: (_0?: any, _1?: any, _2?: any) => any;
    getGoldSellPrice: (_0?: any) => any;
    onMonsterSpriteUse: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    createItemRowRightSide: (_0?: any, _1?: any, _2?: any) => any;
    category: string;
    onActionButton: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    getIndex: (_0?: any) => any;
    supportedTargetModes: any;
    onUse: (_0?: any, _1?: any) => any;
    tryMonsterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    getMonsterButtonPopupMode: (_0?: any, _1?: any) => any;
    onUseInInventoryScreen: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
    onMonsterUseInInventoryScreen: (_0?: any, _1?: any, _2?: any) => any;
    getMonsterButtonBottomButtonText: (_0?: any) => any;
    getItemRowRightSideText: (_0?: any) => any;
    onUseInBattleEffect: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
    ) => any;
    onAfterUseInInventoryScreen: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
    ) => any;
    shouldShowOnBeforeMonsterUseNotEffectiveMessage: (
      _0?: any,
      _1?: any,
      _2?: any,
    ) => any;
    getValidTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
    getValidTargetedMonsterSprites: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    getMaxEnergyOvercharge: (_0?: any) => any;
    getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
    onBeforeBuy: (_0?: any) => any;
    onMonsterUseInBattleText: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
    ) => any;
    onMonsterUseInBattle: (
      _0?: any,
      _1?: any,
      _2?: any,
      _3?: any,
      _4?: any,
      _5?: any,
      _6?: any,
      _7?: any,
      _8?: any,
    ) => any;
  };
};
declare const sandstormWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const worldLocationList: {
  luxSolisRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  electricTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  fireTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  oasisCave: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  swampRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    hasCloud: boolean;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  luxSolisTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  harbor: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  volcano: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  desertRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    hasCloud: boolean;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  amishTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  waterRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  desertTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  ghostTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  electricCave: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  amishRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  waterTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    hasCloud: boolean;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  iceRoute: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    hasCloud: boolean;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
  iceTown: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    worldMapLocation: any;
    locationIcon: string;
    teleporter: string;
    battleEnvironmentUID: string;
  };
  iceCave: {
    locationDotOffset: any;
    mapFilesWithEncounterZones: any;
    locationOrder: number;
    locationIcon: string;
    worldMapLocation: any;
    battleEnvironmentUID: string;
  };
};
declare const monsterBurnConditionConfigList: {
  TITAN_FIRE_front: any;
  FIRE_PHOENIX_2_back: any;
  GHOST_CHERUBIM_2_back: any;
  SAND_CRAB_2_back: any;
  ELECTRIC_FIREFLY_3_front: any;
  NORMAL_CROW_1_front: any;
  SAND_WORM_2_front: any;
  SAND_SKELETON_2_front: any;
  GHOST_OROCHI_1_back: any;
  SAND_MOLE_1_front: any;
  ELECTRIC_BEETLE_3_back: any;
  DARKMAGIC_SNOWBALL_1_front: any;
  TITAN_ICE_back: any;
  SAND_WORM_1_back: any;
  NORMAL_BEE_1_TITAN_WATER_front: any;
  NORMAL_RODENT_3_front: any;
  GHOST_WOLF_2_front: any;
  SAND_BEAST_2_front: any;
  FIRE_TURTLE_3_front: any;
  SAND_SKELETON_3_back: any;
  ELECTRIC_BEETLE_2_back: any;
  WATER_FISH_2_front: any;
  ICE_SNOWBALL_2_back: any;
  SAND_BEAST_2_back: any;
  DARKMAGIC_FIREFLY_1_back: any;
  FIRE_TURTLE_2_back: any;
  FIRE_MAGMA_1_front: any;
  ICE_MOTH_1_front: any;
  NORMAL_BEE_1_TITAN_ELECTRIC_back: any;
  ELECTRIC_CLOUD_1_front: any;
  WATER_FROG_1_back: any;
  TITAN_GHOST_back: any;
  ICE_BEAR_3_front: any;
  DARKMAGIC_CRAB_2_back: any;
  SAND_WORM_3_back: any;
  NORMAL_RODENT_2_back: any;
  ELECTRIC_BEETLE_1_front: any;
  FIRE_KRAKEN_1_front: any;
  SAND_CRAB_3_back: any;
  WATER_FISH_1_front: any;
  SAND_CHIMAERA_2_front: any;
  GHOST_OCTO_1_back: any;
  NORMAL_BEE_1_TITAN_GHOST_front: any;
  FIRE_MAGMA_2_back: any;
  FIRE_GOLEM_2_front: any;
  ICE_BEAR_1_back: any;
  DARKMAGIC_WORM_2_back: any;
  TITAN_SAND_front: any;
  ELECTRIC_OOZE_2_front: any;
  FIRE_PHOENIX_1_front: any;
  WATER_FROG_3_back: any;
  FIRE_TURTLE_3_back: any;
  NORMAL_CROW_3_back: any;
  GHOST_CHERUBIM_1_back: any;
  ELECTRIC_OOZE_2_back: any;
  DARKMAGIC_SNOWBALL_2_front: any;
  GHOST_SLIME_2_back: any;
  WATER_CRAB_2_front: any;
  GHOST_WOLF_3_front: any;
  FUSEBOX_back: any;
  WATER_JELLYFISH_2_back: any;
  WATER_SHARK_2_front: any;
  NORMAL_CROW_2_front: any;
  NORMAL_CROW_1_back: any;
  ICE_SNOWBALL_1_front: any;
  SAND_GOLEM_2_back: any;
  ELECTRIC_FIREFLY_2_back: any;
  GHOST_OROCHI_2_front: any;
  GHOST_SLIME_1_front: any;
  NORMAL_BEE_1_TITAN_ELECTRIC_front: any;
  ELECTRIC_BEETLE_1_back: any;
  TITAN_ELECTRIC_front: any;
  FIRE_BULL_1_front: any;
  SAND_GOLEM_3_back: any;
  SAND_MOLE_3_front: any;
  ELECTRIC_CERBERUS_1_back: any;
  SAND_CRAB_3_front: any;
  FIRE_GOLEM_1_back: any;
  SAND_MOLE_1_back: any;
  ICE_TOUCAN_2_back: any;
  NORMAL_RODENT_1_front: any;
  GHOST_WOLF_3_back: any;
  WATER_SWAMP_2_back: any;
  ELECTRIC_BEETLE_3_front: any;
  WATER_JELLYFISH_1_front: any;
  DARKMAGIC_CRAB_2_front: any;
  SAND_GOLEM_1_back: any;
  SAND_BEAST_1_front: any;
  WATER_CRAB_1_front: any;
  NORMAL_BEE_3_front: any;
  ELECTRIC_FIREFLY_3_back: any;
  NORMAL_ADDER_2_back: any;
  WATER_FISH_2_back: any;
  ICE_MOTH_2_back: any;
  NORMAL_CYBORG_3_back: any;
  NORMAL_SPINNER_front: any;
  GHOST_SLIME_2_front: any;
  FIRE_TURTLE_1_back: any;
  SAND_SKELETON_3_front: any;
  DARKMAGIC_WORM_3_back: any;
  NORMAL_BEE_1_TITAN_WATER_darkMagic_front: any;
  NORMAL_BEE_1_TITAN_FIRE_front: any;
  ELECTRIC_FIREFLY_1_front: any;
  NORMAL_BEE_1_TITAN_WATER_back: any;
  DARKMAGIC_FIREFLY_3_back: any;
  DARKMAGIC_FIREFLY_3_front: any;
  NORMAL_BEE_1_TITAN_ICE_back: any;
  WATER_FROG_2_back: any;
  ELECTRIC_TIGER_1_back: any;
  ICE_BEAR_2_front: any;
  ICE_BEAR_3_back: any;
  NORMAL_BEE_1_TITAN_ICE_darkMagic_back: any;
  DARKMAGIC_WORM_3_front: any;
  ELECTRIC_CLOUD_2_front: any;
  NORMAL_CROW_2_back: any;
  WATER_TURTLE_1_front: any;
  NORMAL_BEE_1_TITAN_ICE_darkMagic_front: any;
  ICE_SNOWBALL_2_front: any;
  WATER_SWAMP_2_front: any;
  WATER_FROG_2_front: any;
  NORMAL_RODENT_2_front: any;
  WATER_SHARK_2_back: any;
  GHOST_OCTO_1_front: any;
  FIRE_PHOENIX_3_front: any;
  SAND_GOLEM_2_front: any;
  TITAN_ICE_front: any;
  TITAN_SAND_back: any;
  FIRE_KRAKEN_2_back: any;
  SAND_CHIMAERA_2_back: any;
  ICE_CREATURE_2_back: any;
  GHOST_CHERUBIM_1_front: any;
  SAND_MOLE_2_front: any;
  FIRE_MAGMA_3_back: any;
  ICE_CREATURE_2_front: any;
  WATER_SHARK_1_back: any;
  DARKMAGIC_WORM_2_front: any;
  DARKMAGIC_SNOWBALL_2_back: any;
  FIRE_MAGMA_2_front: any;
  GHOST_CAT_1_back: any;
  GHOST_CAT_3_back: any;
  SAND_SKELETON_1_back: any;
  WATER_FROG_3_front: any;
  NORMAL_BEE_1_TITAN_ICE_front: any;
  WATER_JELLYFISH_1_back: any;
  FIRE_BULL_2_back: any;
  GHOST_CAT_3_front: any;
  WATER_JELLYFISH_2_front: any;
  ELECTRIC_BEETLE_2_front: any;
  NORMAL_RODENT_1_back: any;
  WATER_TURTLE_2_back: any;
  ELECTRIC_CERBERUS_2_front: any;
  ELECTRIC_OOZE_1_back: any;
  FIRE_TURTLE_1_front: any;
  TITAN_ICE_darkMagic_front: any;
  NORMAL_BEE_2_back: any;
  SAND_CRAB_2_front: any;
  GHOST_OCTO_2_front: any;
  SAND_CHIMAERA_1_front: any;
  FIRE_PHOENIX_3_back: any;
  ELECTRIC_CLOUD_2_back: any;
  ICE_MOTH_2_front: any;
  SAND_WORM_1_front: any;
  GHOST_OROCHI_1_front: any;
  ELECTRIC_CLOUD_1_back: any;
  NORMAL_BEE_1_TITAN_FIRE_back: any;
  SAND_WORM_2_back: any;
  WATER_SWAMP_1_front: any;
  FIRE_BULL_1_back: any;
  GHOST_CAT_2_front: any;
  WATER_FROG_1_front: any;
  FIRE_PHOENIX_1_back: any;
  FIRE_PHOENIX_2_front: any;
  ICE_CREATURE_3_back: any;
  ELECTRIC_CERBERUS_1_front: any;
  ELECTRIC_TIGER_1_front: any;
  TITAN_GHOST_front: any;
  TITAN_ELECTRIC_back: any;
  WATER_FISH_1_back: any;
  TITAN_WATER_back: any;
  GHOST_SLIME_1_back: any;
  DARKMAGIC_SNOWBALL_1_back: any;
  GHOST_WOLF_1_back: any;
  ELECTRIC_FIREFLY_1_back: any;
  GHOST_WOLF_2_back: any;
  DARKMAGIC_FIREFLY_2_back: any;
  ICE_CREATURE_1_back: any;
  FIRE_KRAKEN_2_front: any;
  GHOST_CAT_1_front: any;
  WATER_TURTLE_2_front: any;
  SAND_MOLE_2_back: any;
  ICE_TOUCAN_1_back: any;
  TITAN_FIRE_back: any;
  ICE_CREATURE_3_front: any;
  GHOST_OROCHI_2_back: any;
  FIRE_BULL_2_front: any;
  WATER_SWAMP_1_back: any;
  TITAN_ICE_darkMagic_back: any;
  ICE_TOUCAN_2_front: any;
  NORMAL_ADDER_2_front: any;
  NORMAL_ADDER_1_front: any;
  WATER_CRAB_1_back: any;
  GHOST_WOLF_1_front: any;
  FIRE_KRAKEN_1_back: any;
  ICE_BEAR_2_back: any;
  TITAN_WATER_front: any;
  FIRE_MAGMA_3_front: any;
  GHOST_OCTO_2_back: any;
  ICE_MOTH_3_back: any;
  NORMAL_BEE_1_TITAN_SAND_front: any;
  SAND_CHIMAERA_1_back: any;
  GHOST_CAT_2_back: any;
  FIRE_TURTLE_2_front: any;
  ELECTRIC_CERBERUS_2_back: any;
  FIRE_GOLEM_1_front: any;
  NORMAL_BEE_1_back: any;
  ELECTRIC_FIREFLY_2_front: any;
  NORMAL_BEE_1_front: any;
  SAND_GOLEM_3_front: any;
  DARKMAGIC_FIREFLY_1_front: any;
  GHOST_CHERUBIM_2_front: any;
  NORMAL_BEE_2_front: any;
  NORMAL_BEE_3_back: any;
  SAND_SKELETON_1_front: any;
  SAND_MOLE_3_back: any;
  NORMAL_CROW_3_front: any;
  NORMAL_CYBORG_2_front: any;
  NORMAL_RODENT_3_back: any;
  NORMAL_CYBORG_1_front: any;
  NORMAL_CYBORG_3_front: any;
  SAND_BEAST_1_back: any;
  NORMAL_SPINNER_back: any;
  FIRE_MAGMA_1_back: any;
  ELECTRIC_OOZE_1_front: any;
  DARKMAGIC_FIREFLY_2_front: any;
  ICE_MOTH_3_front: any;
  FIRE_GOLEM_2_back: any;
  WATER_TURTLE_1_back: any;
  SAND_CRAB_1_back: any;
  ICE_CREATURE_1_front: any;
  WATER_SHARK_3_front: any;
  WATER_JELLYFISH_3_back: any;
  SAND_GOLEM_1_front: any;
  WATER_SHARK_3_back: any;
  WATER_SHARK_1_front: any;
  NORMAL_ADDER_1_back: any;
  NORMAL_CYBORG_2_back: any;
  SAND_SKELETON_2_back: any;
  ELECTRIC_TIGER_2_front: any;
  ICE_SNOWBALL_1_back: any;
  FUSEBOX_front: any;
  SAND_CRAB_1_front: any;
  SAND_WORM_3_front: any;
  NORMAL_BEE_1_TITAN_GHOST_back: any;
  ELECTRIC_TIGER_2_back: any;
  WATER_JELLYFISH_3_front: any;
  ICE_TOUCAN_1_front: any;
  ICE_BEAR_1_front: any;
  NORMAL_BEE_1_TITAN_SAND_back: any;
  NORMAL_BEE_1_TITAN_WATER_darkMagic_back: any;
  NORMAL_CYBORG_1_back: any;
  WATER_CRAB_2_back: any;
  ICE_MOTH_1_back: any;
};
declare const ObtainableHiddenItems: {
  getRandomizable: (_0?: any, _1?: any) => any;
  populateRandomizedObtainableItems: (_0?: any) => any;
  getRandomizedObtainableItems: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const MonsterSpriteActionsOrStatuses: {
  tryApplyIfNoBeforeMessages: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
};
declare const RandomizeTypesMode: {
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  values: any;
  replacePerMonster: {
    shouldReplacePerMonsterFamily: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldShuffle: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldReplacePerMonster: (_0?: any) => any;
  };
  replacePerMonsterFamily: {
    shouldReplacePerMonsterFamily: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldShuffle: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldReplacePerMonster: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  shuffle: {
    shouldReplacePerMonsterFamily: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    shouldShuffle: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldReplacePerMonster: (_0?: any) => any;
  };
};
declare const worldDungeonDrips: {
  createInstance: (_0?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const UIFadeBuilder: {
  newVerticalForGreySlimScrollable: (_0?: any, _1?: any, _2?: any) => any;
  newVertical: (_0?: any, _1?: any) => any;
  newHorizontal: (_0?: any, _1?: any) => any;
};
declare const playerGauntlet: {
  destroy: (_0?: any) => any;
  getSelectedGauntletModule: (_0?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  installGauntletModule: (_0?: any, _1?: any) => any;
  setSelectedGauntletModule: (_0?: any, _1?: any) => any;
  hasInstalledGauntletModule: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
};
declare const native: {
  _getProvider: (_0?: any, _1?: any) => any;
  newWebView: (_0?: any) => any;
  getProperty: (_0?: any) => any;
  cancelAlert: (_0?: any) => any;
  hidePopup: (_0?: any) => any;
  showAlert: (_0?: any) => any;
  getSync: (_0?: any) => any;
  requestExit: (_0?: any) => any;
  canShowPopup: (...args: any[]) => any;
  setSync: (_0?: any) => any;
  showPopup: (...args: any[]) => any;
  setProperty: (_0?: any) => any;
};
declare const lfs: {
  _VERSION: string;
  symlinkattributes: (_0?: any) => any;
  lock_dir: (_0?: any) => any;
  dir: (_0?: any) => any;
  unlock: (_0?: any) => any;
  setmode: (_0?: any) => any;
  _DESCRIPTION: string;
  mkdir: (_0?: any) => any;
  currentdir: (_0?: any) => any;
  link: (_0?: any) => any;
  attributes: (_0?: any) => any;
  _COPYRIGHT: string;
  lock: (_0?: any) => any;
  touch: (_0?: any) => any;
  chdir: (_0?: any) => any;
  rmdir: (_0?: any) => any;
};
declare const RecoverHealthAction: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const RandomizeStartersMode: {
  replaceWithAny: {
    shouldLetPlayerPickFromAny: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldLimitToThreeStages: (_0?: any) => any;
    shouldLimitToStageOne: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
  };
  replaceWithStageOneWithThreeStages: {
    shouldLetPlayerPickFromAny: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldLimitToThreeStages: (_0?: any) => any;
    shouldLimitToStageOne: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  classes: {
    Enum: boolean;
    LocalisableEnum: boolean;
    LocalisableEnumWithDescription: boolean;
  };
  replaceWithStageOne: {
    shouldLetPlayerPickFromAny: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldLimitToThreeStages: (_0?: any) => any;
    shouldLimitToStageOne: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
  };
  values: any;
  newValueObject: (_0?: any, _1?: any) => any;
  replaceWithSelected: {
    shouldLetPlayerPickFromAny: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
    isDisabled: (_0?: any) => any;
    shouldLimitToThreeStages: (_0?: any) => any;
    shouldLimitToStageOne: (_0?: any) => any;
    getLocalisedDescription: (_0?: any) => any;
  };
};
declare const pack: (...args: any[]) => any;
declare const hazyCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const reflectDamageStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const ObtainableItemChestItems: {
  getRandomizable: (_0?: any, _1?: any) => any;
  populateRandomizedObtainableItems: (_0?: any) => any;
  getRandomizedObtainableItems: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const gravityPullStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const delayedPoisonStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const OnlineRankingServer: {
  getSeasonRank: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  getSeasonRanks: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  getLeaderboardPage: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  getSeason: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getAndCacheActiveSeason: (_0?: any, _1?: any, _2?: any) => any;
  getActiveSeasonRank: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
};
declare const errStr: (_0?: any) => any;
declare const AfterCatchMonsterSummaryMode: {
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  ask: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  always: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  never: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  values: any;
};
declare const CustomDifficultyScreen: {
  getScreenClosable: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenNonClosable: (_0?: any) => any;
};
declare const sandSkewersEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const escapeMove: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const OnlineAuthentication: {
  setAccessToken: (_0?: any, _1?: any, _2?: any) => any;
  setDeviceIds: (_0?: any, _1?: any) => any;
  getProvider: (_0?: any) => any;
  getAccessToken: (_0?: any) => any;
  getDeviceId: (_0?: any) => any;
  getRefreshToken: (_0?: any) => any;
  ensureValidAccessToken: (_0?: any, _1?: any, _2?: any) => any;
  logout: (_0?: any) => any;
  setRefreshToken: (_0?: any, _1?: any) => any;
  getDeviceIds: (_0?: any) => any;
};
declare const snowWeatherEffect: {
  new: (_0?: any, _1?: any) => any;
};
declare const pyramidAreaUtility: {
  createOptionalFloorQuestionCutscene: (_0?: any, _1?: any) => any;
};
declare const orderedPairsWithIndex: (_0?: any) => any;
declare const requireOnce: (_0?: any) => any;
declare const drowsyConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const MonsterStorageScreenSortMode: {
  values: any;
  sortByLevelDescending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  sortBySpeciesDescending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  sortByPotentialDescending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  sortByPotentialAscending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  sortByDateAscending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  sortBySpeciesAscending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  sortByLevelAscending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  sortByDateDescending: {
    getMonsterStorageSorted: (_0?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
};
declare const pairsWithIndex: (_0?: any) => any;
declare const sheetHelper: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const statBoostUtility: {
  getFactor: (_0?: any, _1?: any, _2?: any) => any;
  getFactorString: (_0?: any, _1?: any, _2?: any) => any;
  getFactorStringWithColor: (_0?: any, _1?: any, _2?: any) => any;
};
declare const characterPartList: any;
declare const outInExpo: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const ghostTownUtility: {
  getPortalPillarsBlue: (_0?: any) => any;
  createGoDirectionCutscene: (_0?: any, _1?: any) => any;
  shouldMountPurrgyUponTeleport: (_0?: any) => any;
  createPurringCatCutscene: (_0?: any) => any;
  createMazeBookCutscene: (_0?: any) => any;
  isInAlternateDimension: (_0?: any) => any;
  getHieroglyphByTypeMap: (_0?: any) => any;
  getTypeByHieroglyphMap: (_0?: any) => any;
};
declare const smarterTrainerAI: {
  new: (_0?: any) => any;
};
declare const ICloudSaveslotRecords: {
  fetchAll: (_0?: any, _1?: any) => any;
  save: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  create: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any, _5?: any) => any;
  delete: (_0?: any, _1?: any, _2?: any) => any;
};
declare const soundList: boolean;
declare const switchMonsterMove: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const typeUtility: {
  createTypeIconOrUnknownIcon: (_0?: any, _1?: any, _2?: any) => any;
};
declare const sumoStanceStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const functionHelper: {
  optionalOnComplete: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  forEachOnCompleteParallel: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onCompleteFunctionsParallel: (...args: any[]) => any;
  forEachOnCompleteOrUntilTrue: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onCompleteFunctionsWithSkipRemaining: (...args: any[]) => any;
  forEachOnCompleteOrUntilTrueSafe: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  skipOrContinues: (...args: any[]) => any;
  onCompletesParallel: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onCompleteFunctions: (...args: any[]) => any;
  countToUntilReturn: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  onCompleteCounter: (_0?: any, _1?: any) => any;
  onCompletesWithSkipRemaining: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createObjectFunctionArray: (_0?: any, _1?: any, _2?: any) => any;
  forEachOnComplete: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  forEachOnCompleteParallelSimple: (_0?: any, _1?: any, _2?: any) => any;
  createParamFunctionArray: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  forEachOnCompleteParallelWithDelay: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  executeOnce: (_0?: any, _1?: any) => any;
  createObjectsParamsFunctionArray: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  onCompleteIfNotNil: (...args: any[]) => any;
  forEachOnCompleteSafe: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  countFromToUntilReturn: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  getAsynchronousOnCompleteListener: (_0?: any, _1?: any) => any;
  onCompletes: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  afterCount: (_0?: any, _1?: any, _2?: any) => any;
  createCounter: (_0?: any, _1?: any) => any;
  executeMultiple: (_0?: any, _1?: any) => any;
};
declare const spriteHelper: {
  newWithDisplayObjectSequences: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  newAnimatedFill: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  timeScale: number;
  syncSetSequenceWithoutReset: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  syncSetFrame: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  unsyncSetSequence: (_0?: any, _1?: any) => any;
  unsyncSetFrame: (_0?: any, _1?: any) => any;
  mapSpriteFunctionsTo: (_0?: any, _1?: any, _2?: any) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  previousFrame: (_0?: any, _1?: any) => any;
  newPlaying: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newFakeSequence: (_0?: any, _1?: any, _2?: any) => any;
  newFakeSequences: (_0?: any, _1?: any) => any;
  newWithDisplayObjectFrames: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  unsyncSetSequenceWithoutReset: (_0?: any, _1?: any) => any;
  nextFrame: (_0?: any, _1?: any) => any;
  syncSetSequence: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const OnlineAvatar: {
  newInnerImage: (_0?: any, _1?: any, _2?: any) => any;
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const settingsScreen: {
  getScreenForTitleScreen: (_0?: any) => any;
  getScreenForPauseMenuScreen: (_0?: any) => any;
  getScreenParamsForPauseMenuScreenHold: (_0?: any) => any;
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
};
declare const outerTopBarOnlineLeaderboardsButtonBuilder: {
  new: (_0?: any, _1?: any) => any;
};
declare const IAP: {
  instanceOf: (_0?: any, _1?: any) => any;
  STYLE_CRYSTAL_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_3_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  HOLD_LAZY_XP_PREMIUM_3: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  POTENTIAL_STONE_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_1_10: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_2_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_3: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_2_10: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_6: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_2_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  PERFECTION_STONE_20: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  SPINNER_REGULAR_4_20: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  POTENTIAL_READER_PREMIUM: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  POTENTIAL_STONE_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_7: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_4: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  PERFECTION_STONE_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  HOLD_LAZY_XP_PREMIUM_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  values: any;
  POTENTIAL_STONE_10: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  FRUIT_DRONE: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  RECALL_PREMIUM: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_1_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  UNLOCK_FULL_GAME: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  SPINNER_REGULAR_4_6: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_3_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  classes: {
    Enum: boolean;
  };
  PERFECTION_STONE_5: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  HOLD_LAZY_XP_PREMIUM_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  STYLE_CRYSTAL_2: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_3_10: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  XP_CHIP_1_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  REMOTE_MONSTER_STORAGE: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
  SPINNER_REGULAR_4_1: {
    isAutoRenewableSubscription: (_0?: any) => any;
    setIAPStoreProduct: (_0?: any, _1?: any) => any;
    getValue: (_0?: any) => any;
    isNonConsumable: (_0?: any) => any;
    isPurchased: (_0?: any) => any;
    isConsumable: (_0?: any) => any;
    isNonRenewingSubscription: (_0?: any) => any;
    getIdentifier: (_0?: any) => any;
    purchase: (_0?: any, _1?: any) => any;
    isSubscription: (_0?: any) => any;
    getItemUID: (_0?: any) => any;
    getProductCategory: (_0?: any) => any;
    getIAPStoreProduct: (_0?: any) => any;
    getItemAmount: (_0?: any) => any;
  };
};
declare const worldBattleEnvironment: {
  createInstance: (_0?: any, _1?: any) => any;
  isCreated: (_0?: any) => any;
};
declare const inSine: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
declare const skillPowerBoostStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const cutsceneUtility: {
  createPlayerDialogCutsceneWithExpressionAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createObjectInteractCutscene: (_0?: any, _1?: any) => any;
  createMonsterDialogCutsceneWithEmojiWhile: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createNpcDialogCutsceneWithPlayerEmojiAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createStoryTypewriterTextAtCenter: (_0?: any, _1?: any, _2?: any) => any;
  createMonsterDialogCutsceneWithEmojiBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  executeBlockingTileDialogCutscene: (_0?: any, _1?: any, _2?: any) => any;
  createMonsterExpressionCutscene: (_0?: any, _1?: any) => any;
  createNpcDialogCutsceneWithEmojiAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createTrainerHubCutscene: (_0?: any) => any;
  installAndSelectGauntletModule: (_0?: any, _1?: any, _2?: any) => any;
  createPlayerDialogCutscene: (_0?: any, _1?: any) => any;
  createPlayerDialogCutsceneWithEmojiAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  reloadMap: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createSpotEncounterCutscene: (_0?: any, _1?: any) => any;
  createSpeakerlessDialogCutscene: (_0?: any, _1?: any) => any;
  createPlayerDialogCutsceneWithexpressionAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createPlayerDialogCutsceneWithEmojiAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createPlayerTileCutsceneIfAndDestroyOnTrigger: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  playerSteppedOnTile: (_0?: any, _1?: any, _2?: any) => any;
  fadeToBlack: (_0?: any, _1?: any, _2?: any) => any;
  createNpcDialogCutsceneWithoutExpressionWhile: (_0?: any, _1?: any) => any;
  createPlayerDialogCutsceneWithEmojiBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createNpcDialogCutsceneWithExpressionAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  executeItemShowAboveHead: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createCustomDialogCutscene: (_0?: any, _1?: any) => any;
  createMonsterDialogCutsceneWithExpressionBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  getWhiteScreenOverlay: (_0?: any) => any;
  getBlackScreenOverlay: (_0?: any) => any;
  newMonsterButtonPopupForTrading: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  createMonsterDialogCutsceneWithEmojiAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createNpcInteractCutscene: (_0?: any, _1?: any) => any;
  createBlockingTileDialogCutscene: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  executeBattle: (_0?: any, _1?: any) => any;
  evolveMonster: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  createOnloadCutsceneWith: (...args: any[]) => any;
  createMonsterDialogCutsceneWithExpressionAtStart: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  newMonsterButtonPopupForGivingAway: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  createFloorQuestionCutscene: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  createNpcDialogCutsceneWithEmojiAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  stopRecallBlockerWorldEffect: (_0?: any, _1?: any) => any;
  executeNpcDialogCutscene: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  createNpcDialogCutsceneWithExpressionBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  ensureOutfitByOptionallyDeactivatingOutfit: (_0?: any, _1?: any) => any;
  doCharacterSpin: (_0?: any, _1?: any, _2?: any) => any;
  createSpeakerlessDialogCutsceneWithExpressionAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  executeItemPickup: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  ensureSingleWearableItemByOptionallyDeactivatingOutfit: (
    _0?: any,
    _1?: any,
  ) => any;
  createObjectBeforeInteractCutscene: (_0?: any, _1?: any) => any;
  createMonsterDialogCutsceneWithExpressionAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  executeItemsShowAboveHead: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  createPlayerTileCutsceneAndDestroyOnTrigger: (_0?: any, _1?: any) => any;
  doPlayerGotHurtAnimation: (_0?: any, _1?: any, _2?: any) => any;
  createSpeakerlessDialogCutsceneWithEmojiAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createOnloadCutscene: (_0?: any, _1?: any) => any;
  createMonsterEmojiCutscene: (_0?: any, _1?: any, _2?: any) => any;
  createPlayerTileCutsceneIf: (_0?: any, _1?: any, _2?: any) => any;
  createPlayerTileCutscene: (_0?: any, _1?: any) => any;
  createNpcDialogCutsceneWithExpressionAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createSpeakerlessDialogCutsceneWithEmojiWhile: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  newMonsterButtonPopupForOptionallyGivingAway: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  createCutsceneWith: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  createSpotCutscene: (_0?: any, _1?: any) => any;
  createTileCutscene: (_0?: any, _1?: any) => any;
  createMonsterDialogCutscene: (_0?: any, _1?: any) => any;
  createNpcDialogCutsceneWithEmojiWhile: (_0?: any, _1?: any, _2?: any) => any;
  executePlayerDialogCutscene: (_0?: any, _1?: any, _2?: any) => any;
  createShopCutscene: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  executeCustomDialogCutscene: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  createCutscene: (_0?: any, _1?: any) => any;
  executeWildZoneEncounter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  createNpcDialogCutscene: (_0?: any, _1?: any) => any;
  createPlayerCutscene: (_0?: any, _1?: any) => any;
  createPlayerDialogCutsceneWithexpressionBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  executeItemsPickup: (_0?: any, _1?: any, _2?: any, _3?: any, _4?: any) => any;
  createPlayerOnloadCutscene: (_0?: any, _1?: any) => any;
  onDifficultyModified: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
  ) => any;
  executeWildEncounter: (_0?: any, _1?: any, _2?: any) => any;
  createTileCutsceneAndDestroyOnTrigger: (_0?: any, _1?: any) => any;
  createNpcDialogCutsceneWithEmojiBefore: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  createNpcDialogCutsceneWithoutEmojiWhile: (_0?: any, _1?: any) => any;
  evolveMonsterInMenu: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  startRecallBlockerWorldEffect: (_0?: any, _1?: any) => any;
  createPlayerDialogCutsceneWithEmojiWhile: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
  createStoryTypewriterText: (_0?: any, _1?: any, _2?: any) => any;
  createObjectInteractCutsceneWith: (...args: any[]) => any;
  createMonsterDialogCutsceneWithEmojiAfter: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
  ) => any;
  playerTeleportedOnTile: (_0?: any, _1?: any, _2?: any) => any;
  hasRecallBlockerWorldEffect: (_0?: any, _1?: any) => any;
  executeTrainerBattle: (_0?: any, _1?: any) => any;
  createMonsterInteractCutscene: (_0?: any, _1?: any) => any;
};
declare const inOutSine: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const kindredSoulStatus: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const outInCirc: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const playerSettings: {
  getSaveableBattleEffects: (_0?: any) => any;
  registerSaveableBattleEffect: (_0?: any, _1?: any) => any;
  onLoadSaveslotData: (_0?: any, _1?: any) => any;
  getBindTraitMonsterIdentifier: (_0?: any) => any;
  getDifficulty: (_0?: any) => any;
  unregisterSaveableBattleEffect: (_0?: any, _1?: any) => any;
  getBindTraitMonsterWithActiveTraitInSquad: (_0?: any) => any;
  getPhoneMessages: (_0?: any) => any;
  getAmountOfUnreadPhoneMessages: (_0?: any) => any;
  getRecallLocations: (_0?: any) => any;
  getPlayerCharacterConfig: (_0?: any, _1?: any, _2?: any) => any;
  getNotDisabledWearableItemUID: (_0?: any, _1?: any) => any;
  applyRandomizationSeed: (_0?: any) => any;
  getAmountOfTimesVisitedMap: (_0?: any, _1?: any) => any;
  addRecallLocation: (_0?: any, _1?: any) => any;
  wearsOutfitWhichWillBlock: (_0?: any, _1?: any) => any;
  getStarterUID: (_0?: any) => any;
  addVisitedMap: (_0?: any, _1?: any) => any;
  destroy: (_0?: any) => any;
  setStarterUID: (_0?: any, _1?: any) => any;
  resetAmountOfUnreadPhoneMessages: (_0?: any) => any;
  setLastMonsterStorageScreenSortMode: (_0?: any, _1?: any) => any;
  addVisitedLocation: (_0?: any, _1?: any) => any;
  getPlayerPronoun: (_0?: any) => any;
  setBindTraitMonster: (_0?: any, _1?: any) => any;
  setPlayerName: (_0?: any, _1?: any) => any;
  setLastSelectedBattleItemUID: (_0?: any, _1?: any) => any;
  getWearableItemUID: (_0?: any, _1?: any) => any;
  getDifficultyObject: (_0?: any) => any;
  getWearableItemUIDs: (_0?: any) => any;
  setLastSelectedPauseMenuItemUID: (_0?: any, _1?: any) => any;
  setWearableItemUID: (_0?: any, _1?: any, _2?: any) => any;
  getPlayerName: (_0?: any) => any;
  isItemBinded: (_0?: any, _1?: any) => any;
  setCharacterHair: (_0?: any, _1?: any) => any;
  getLastSelectedBattleItemUID: (_0?: any) => any;
  createIdentifier: (_0?: any) => any;
  addPhoneMessage: (_0?: any, _1?: any) => any;
  getCharacterHair: (_0?: any) => any;
  setOnlineProfileId: (_0?: any, _1?: any) => any;
  getLastSelectedPauseMenuItemUID: (_0?: any) => any;
  get: (_0?: any) => any;
  hasVisitedMap: (_0?: any, _1?: any) => any;
  hasFlashlightEnabled: (_0?: any) => any;
  executeOnWorldInit: (_0?: any) => any;
  getDifficultyString: (_0?: any) => any;
  hasVisitedLocation: (_0?: any, _1?: any) => any;
  getOnlineProfileId: (_0?: any) => any;
  setLastSelectedPauseMenuOrBattleItemUID: (_0?: any, _1?: any) => any;
  setCharacterFacialHair: (_0?: any, _1?: any) => any;
  getLastMonsterStorageScreenSortMode: (_0?: any) => any;
  setBindItemUID: (_0?: any, _1?: any, _2?: any) => any;
  getCharacterFacialHair: (_0?: any) => any;
  setWearableItemUIDs: (_0?: any, _1?: any) => any;
  onSaveSaveslotData: (_0?: any, _1?: any) => any;
  getSaveableBattleEffect: (_0?: any, _1?: any) => any;
  setDifficulty: (_0?: any, _1?: any) => any;
  getPlayerNameMaxWidthConfig: (_0?: any) => any;
  isCreated: (_0?: any) => any;
  hasRecallLocation: (_0?: any, _1?: any) => any;
  executeOnWorldDestroy: (_0?: any) => any;
  getLastSelectedPauseMenuOrBattleItemUID: (_0?: any) => any;
  setLuxLuredMap: (_0?: any, _1?: any) => any;
  getBindItemUID: (_0?: any, _1?: any) => any;
  getCharacterSkintone: (_0?: any) => any;
  getWearableItem: (_0?: any, _1?: any) => any;
  executeOnWorldUnload: (_0?: any) => any;
  isLuxLuredMap: (_0?: any, _1?: any) => any;
  hasCustomDifficulty: (_0?: any) => any;
  setPlayerPronoun: (_0?: any, _1?: any) => any;
};
declare const AfterCatchMonsterNicknameMode: {
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  ask: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  instanceOf: (_0?: any, _1?: any) => any;
  always: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  never: {
    optionallyAskAndExecute: (_0?: any, _1?: any, _2?: any) => any;
    getLocalisedValue: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  values: any;
};
declare const outBack: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
  _5?: any,
) => any;
declare const metatable: {
  audio: {
    __index: (_0?: any) => any;
  };
};
declare const blockNegativeStatBoostStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const outCirc: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const LocalisableEnumWithDescription: {
  new: (_0?: any, _1?: any) => any;
};
declare const premonitionStatus: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const saveslotDataUtility: {
  getMainCharacterMapPath: (_0?: any, _1?: any) => any;
  getMainCharacterMapFile: (_0?: any, _1?: any) => any;
};
declare const fontInfoList: {
  glow_potentialCategory_C_10: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  shadow_and_outline_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_8: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  plain_8: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_sp_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  plain_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  outline_10: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_potentialCategory_A_10: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  outline_8: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  outline_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_hp_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  shadow_and_outline_blue_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  shadow_and_outline_orange_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  plain_10: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_potentialCategory_B_10: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  outline_lightBlue_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
  glow_xp_10_bold: {
    sheetOptionsByChar: any;
    maxCharacterWidth: number;
    characterObjectByChar: any;
    belowBaselineHeight: number;
    maxCharacterHeight: number;
  };
};
declare const monsterPotentialUtility: {
  getLowestPotentialForCategory: (_0?: any, _1?: any) => any;
  createCategoryIcon: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getHighestPotentialForCategory: (_0?: any, _1?: any) => any;
  getCategories: (_0?: any) => any;
};
declare const superKnockdownStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const forceRemoveStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const BattleMusic: {
  grass: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  trainer: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  values: any;
  titan: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  cave: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  wubbonian: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  classes: {
    LocalisableEnum: boolean;
    Enum: boolean;
  };
  researcher: {
    getLocalisedValue: (_0?: any) => any;
    getIntroPath: (_0?: any) => any;
    getPath: (_0?: any) => any;
    getValue: (_0?: any) => any;
  };
  newValueObject: (_0?: any, _1?: any) => any;
  instanceOf: (_0?: any, _1?: any) => any;
};
declare const UISaveBarBuilder: {
  new: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  newForManualSave: (_0?: any, _1?: any) => any;
};
declare const outExpo: (
  _0?: any,
  _1?: any,
  _2?: any,
  _3?: any,
  _4?: any,
) => any;
declare const vararg: {
  concatSafe: (...args: any[]) => any;
  countNonNil: (...args: any[]) => any;
  concat: (...args: any[]) => any;
};
declare const mirrorChallengeAI: {
  new: (_0?: any) => any;
};
declare const Monster: {
  calculateStatForLevel: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getMaxCriticalHitCharge: (_0?: any) => any;
  updateSavedMonsterToMonster: (_0?: any, _1?: any) => any;
  monstersWithoutPotentialCategories: {
    TITAN_ELECTRIC: boolean;
    TITAN_FIRE: boolean;
    TITAN_SAND: boolean;
    NORMAL_SPINNER: boolean;
    TITAN_WATER: boolean;
    TITAN_ICE: boolean;
    TITAN_GHOST: boolean;
  };
  new: (_0?: any, _1?: any) => any;
  ensureValidPotentialStats: (_0?: any, _1?: any, _2?: any) => any;
  newDebug: (_0?: any, _1?: any) => any;
  newRandomizableForTrainer: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  mapToSaveableMonster: (_0?: any, _1?: any) => any;
  getAmountOfPotentialStatsUnlockedAtPotentialLevel: (
    _0?: any,
    _1?: any,
  ) => any;
  getMaxPotentialLevelForPotential: (_0?: any, _1?: any) => any;
  newForDebugPlayer: (_0?: any, _1?: any) => any;
  uncast: (_0?: any, _1?: any) => any;
  clone: (_0?: any, _1?: any) => any;
  cast: (_0?: any, _1?: any) => any;
  newInSpinner: (_0?: any, _1?: any, _2?: any) => any;
  newForPlayer: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  getPotentialLevelUpArrayForPotential: (_0?: any, _1?: any) => any;
};
declare const itemUtility: {
  getShopItems: (_0?: any, _1?: any) => any;
  calculatePriceForMode: (_0?: any, _1?: any, _2?: any) => any;
  createOrderedItemArrayWithSubcategories: (
    _0?: any,
    _1?: any,
    _2?: any,
  ) => any;
};
declare const worldSounds: {
  load: (_0?: any, _1?: any) => any;
};
declare const worldMescherRealmLightSoulFlasks: {
  isCreated: (_0?: any) => any;
  createInstance: (_0?: any) => any;
  get: (_0?: any) => any;
};
declare const OnlineWinnerScreen: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const OnlineShopServer: {
  getStyleCrystals: (_0?: any, _1?: any, _2?: any) => any;
  getPromotions: (_0?: any, _1?: any, _2?: any) => any;
  getPendingTransactionsReceipt: (_0?: any, _1?: any, _2?: any) => any;
  purchaseProduct: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
  purchasePromotion: (_0?: any, _1?: any, _2?: any, _3?: any) => any;
};
declare const ObtainableItem: {
  newSpecial: (_0?: any, _1?: any, _2?: any) => any;
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const electroMinesEntryHazard: {
  new: (_0?: any, _1?: any) => any;
};
declare const localiseDialogAnswersWrapper: (_0?: any, _1?: any) => any;
declare const curseConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const shockCondition: {
  new: (_0?: any, _1?: any, _2?: any) => any;
};
declare const poisonConditionStatus: {
  new: (_0?: any, _1?: any) => any;
};
declare const targetingUtility: {
  isSelfTeam: (_0?: any, _1?: any) => any;
  isSelfTarget: (_0?: any, _1?: any) => any;
  isEnemyTeam: (_0?: any, _1?: any) => any;
  isEnemyTargetInBattle: (_0?: any, _1?: any) => any;
  isNoneTarget: (_0?: any, _1?: any) => any;
  isEnemyTeamInBattle: (_0?: any, _1?: any) => any;
  getTargetedMonsterSprites: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  getTargetMonsterSprites: (_0?: any, _1?: any, _2?: any) => any;
  shouldSelectTargetInBattle: (_0?: any, _1?: any) => any;
  shouldSelectTargetInMenu: (_0?: any, _1?: any) => any;
  isSelf: (_0?: any, _1?: any) => any;
  shouldSelectTarget: (_0?: any, _1?: any) => any;
  isEnemyTarget: (_0?: any, _1?: any) => any;
  isAllInBattle: (_0?: any, _1?: any) => any;
  getTargetMonsters: (_0?: any, _1?: any, _2?: any) => any;
  isTargetingPlayer: (_0?: any, _1?: any) => any;
  isTargetingEnemy: (_0?: any, _1?: any) => any;
  isEnemyTargetRandom: (_0?: any, _1?: any) => any;
};
declare const debugQuestStateScreen: {
  new: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
  ) => any;
  getScreenForQuest: (_0?: any, _1?: any) => any;
};
declare const afterPartialSkillMoveCriticalHit: {
  classes: any;
  instanceOf: (_0?: any, _1?: any) => any;
  onAfterPartialSkillMovePriority: (_0?: any) => any;
  mutateSkillDamageModifier: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
  ) => any;
  onAfterPartialSkillMove: (
    _0?: any,
    _1?: any,
    _2?: any,
    _3?: any,
    _4?: any,
    _5?: any,
    _6?: any,
    _7?: any,
    _8?: any,
  ) => any;
};
